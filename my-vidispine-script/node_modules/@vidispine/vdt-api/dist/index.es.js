import axios from 'axios';

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var defaultClient = axios.create();
var CancelToken = axios.CancelToken;
function login(_ref) {
  var baseURL = _ref.baseURL,
      token = _ref.token,
      username = _ref.username,
      password = _ref.password,
      bearerToken = _ref.bearerToken;

  if (baseURL) {
    defaultClient.defaults.baseURL = baseURL;
  }

  if (token) {
    defaultClient.defaults.headers.Authorization = "token ".concat(token);
  }

  if (bearerToken) {
    defaultClient.defaults.headers.Authorization = "Bearer ".concat(bearerToken);
  }

  if (username || password) defaultClient.defaults.auth = {
    username: username,
    password: password
  };
}
function logout() {
  delete defaultClient.defaults.headers.Authorization;
  delete defaultClient.defaults.auth;
}

function btoa(str) {
  var buffer = str instanceof Buffer ? str : Buffer.from(str.toString(), 'binary');
  return buffer.toString('base64');
}

function debounce(func, wait, immediate) {
  var _this = this;

  var timeout;
  return function (args) {
    var context = _this;

    var later = function later() {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };

    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
}
function uuidv4() {
  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
    return (// eslint-disable-next-line
      (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
    );
  });
}

function setDefaultHeaders() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$username = _ref2.username,
      username = _ref2$username === void 0 ? false : _ref2$username,
      _ref2$password = _ref2.password,
      password = _ref2$password === void 0 ? false : _ref2$password,
      token = _ref2.token,
      _ref2$contentType = _ref2.contentType,
      contentType = _ref2$contentType === void 0 ? 'application/json' : _ref2$contentType,
      _ref2$accept = _ref2.accept,
      accept = _ref2$accept === void 0 ? 'application/json' : _ref2$accept,
      props = _objectWithoutProperties(_ref2, ["username", "password", "token", "contentType", "accept"]);

  var headers = {
    'content-type': contentType,
    Accept: accept
  };

  if (username) {
    var encodedAuth = btoa("".concat(username, ":").concat(password));
    headers.Authorization = "Basic ".concat(encodedAuth);
  } else if (token) {
    headers.Authorization = "token ".concat(token);
  }

  return _objectSpread2(_objectSpread2({}, props), headers);
}

var KV_PARAMS = ['jobmetadata', 'jobMetadata', 'notificationdata', 'notificationData', 'methodMetadata'];

function setQueryParams(queryParams) {
  var paramKeys = Object.keys(queryParams);
  if (paramKeys.length === 0) return '';

  var reducer = function reducer(accumulator, currentKey, currentIndex) {
    if (typeof queryParams[currentKey] === 'undefined') {
      return accumulator;
    }

    var currentValue = queryParams[currentKey];
    var separator = currentIndex > 0 ? '&' : '';

    if (KV_PARAMS.includes(currentKey)) {
      var kvReducer = function kvReducer(a, c, i) {
        return "".concat(a).concat(i > 0 ? '&' : '').concat(currentKey, "=").concat(c.key, "%3D").concat(c.value);
      };

      var kvString = currentValue.reduce(kvReducer, '');
      return "".concat(accumulator).concat(separator).concat(kvString);
    }

    if (Array.isArray(currentValue)) {
      return "".concat(accumulator).concat(separator).concat(currentKey, "=").concat(currentValue.join(','));
    }

    return "".concat(accumulator).concat(separator).concat(currentKey, "=").concat(currentValue);
  };

  var paramStr = paramKeys.reduce(reducer, '?');
  return paramStr;
}

function setMatrix(matrix) {
  var matrixList = matrix;

  if (!Array.isArray(matrix)) {
    matrixList = Object.entries(matrix);
  }

  if (matrixList.length === 0) return '';

  var reducer = function reducer(a, c) {
    var matrixKey;
    var matrixValue;

    if (Array.isArray(c)) {
      var _c = _slicedToArray(c, 2);

      matrixKey = _c[0];
      matrixValue = _c[1];
    } else {
      var _Object$keys = Object.keys(c);

      var _Object$keys2 = _slicedToArray(_Object$keys, 1);

      matrixKey = _Object$keys2[0];

      var _Object$values = Object.values(c);

      var _Object$values2 = _slicedToArray(_Object$values, 1);

      matrixValue = _Object$values2[0];
    }

    if (matrixValue === '' || matrixValue === undefined) {
      return a;
    }

    return "".concat(a, ";").concat(matrixKey, "=").concat(encodeURIComponent(matrixValue));
  };

  var matrixStr = matrixList.reduce(reducer, '');
  return matrixStr;
}

function isRequired() {
  throw new Error('Missing property');
}
function vFetch() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      path = _ref3.path,
      _ref3$method = _ref3.method,
      method = _ref3$method === void 0 ? 'GET' : _ref3$method,
      data = _ref3.body,
      _ref3$headers = _ref3.headers,
      extraHeaders = _ref3$headers === void 0 ? {} : _ref3$headers,
      _ref3$queryParams = _ref3.queryParams,
      queryParams = _ref3$queryParams === void 0 ? {} : _ref3$queryParams,
      _ref3$matrixParams = _ref3.matrixParams,
      matrixParams = _ref3$matrixParams === void 0 ? [] : _ref3$matrixParams,
      _ref3$costEstimate = _ref3.costEstimate,
      costEstimate = _ref3$costEstimate === void 0 ? false : _ref3$costEstimate,
      props = _objectWithoutProperties(_ref3, ["path", "method", "body", "headers", "queryParams", "matrixParams", "costEstimate"]);

  var params = setQueryParams(queryParams);
  var matrix = setMatrix(matrixParams);
  var headers = setDefaultHeaders(extraHeaders);
  var url = "".concat(path).concat(matrix).concat(params);

  if (costEstimate) {
    url = url.replace('/API/', '/API/cost/');
  }

  var request = _objectSpread2({
    method: method,
    url: url,
    headers: headers,
    data: data
  }, props);

  return new Promise(function (resolve, reject) {
    defaultClient(request).then(function (response) {
      response.ok = response.status >= 100 && response.status <= 399;

      response.json = function () {
        return response.data;
      };

      response.text = function () {
        return response.data;
      };

      resolve(response);
    })["catch"](function (error) {
      return reject(error);
    });
  });
}

var utils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  defaultClient: defaultClient,
  CancelToken: CancelToken,
  login: login,
  logout: logout,
  debounce: debounce,
  uuidv4: uuidv4,
  isRequired: isRequired,
  vFetch: vFetch,
  'default': vFetch
});

/**
 * {@link https://apidoc.vidispine.com/latest/ref/audit-trail.html#list-all-audit-log-entries APIdoc}
 *
 * `GET /API/log`
 *
 * @function auditlog.listAuditLog
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listAuditLog() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/log/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/audit-trail.html#retrieve-the-entire-audit-log APIdoc}
 *
 * `GET /API/log/export`
 *
 * @function auditlog.listAuditLog
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function exportAuditLog() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref2);

  var path = '/API/log/export';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}

var auditlog = {
  listAuditLog: listAuditLog,
  exportAuditLog: exportAuditLog
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/auto-import.html APIdoc}
 *
 * `GET /API/storage/auto-import/`
 *
 * @function autoimport.listAutoImport
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listAutoImport() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/storage/auto-import/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/auto-import.html APIdoc}
 *
 * `PUT /API/storage/${storageId}/auto-import/`
 *
 * @function autoimport.updateAutoImport
 * @param {Object} obj
 * @param {string} obj.storageId
 * @param {Object} obj.autoImportRuleDocument
 * @returns {Promise<Object>}
 */


function updateAutoImport(_ref2) {
  var _ref2$storageId = _ref2.storageId,
      storageId = _ref2$storageId === void 0 ? isRequired() : _ref2$storageId,
      autoImportRuleDocument = _ref2.autoImportRuleDocument,
      props = _objectWithoutProperties(_ref2, ["storageId", "autoImportRuleDocument"]);

  var path = "/API/storage/".concat(storageId, "/auto-import/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: autoImportRuleDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/auto-import.html APIdoc}
 *
 * `GET /API/storage/${storageId}/auto-import/`
 *
 * @function autoimport.getAutoImport
 * @param {Object} obj
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function getAutoImport(_ref3) {
  var _ref3$storageId = _ref3.storageId,
      storageId = _ref3$storageId === void 0 ? isRequired() : _ref3$storageId,
      props = _objectWithoutProperties(_ref3, ["storageId"]);

  var path = "/API/storage/".concat(storageId, "/auto-import/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/auto-import.html APIdoc}
 *
 * `DELETE /API/storage/${storageId}/auto-import/`
 *
 * @function autoimport.removeAutoImport
 * @param {Object} obj
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function removeAutoImport(_ref4) {
  var _ref4$storageId = _ref4.storageId,
      storageId = _ref4$storageId === void 0 ? isRequired() : _ref4$storageId,
      props = _objectWithoutProperties(_ref4, ["storageId"]);

  var path = "/API/storage/".concat(storageId, "/auto-import/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/auto-import.html APIdoc}
 *
 * `PUT /API/storage/${storageId}/auto-import/enable`
 *
 * @function autoimport.enableAutoImport
 * @param {Object} obj
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function enableAutoImport(_ref5) {
  var _ref5$storageId = _ref5.storageId,
      storageId = _ref5$storageId === void 0 ? isRequired() : _ref5$storageId,
      props = _objectWithoutProperties(_ref5, ["storageId"]);

  var path = "/API/storage/".concat(storageId, "/auto-import/enable");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/auto-import.html APIdoc}
 *
 * `PUT /API/storage/${storageId}/auto-import/disable`
 *
 * @function autoimport.disableAutoImport
 * @param {Object} obj
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function disableAutoImport(_ref6) {
  var _ref6$storageId = _ref6.storageId,
      storageId = _ref6$storageId === void 0 ? isRequired() : _ref6$storageId,
      props = _objectWithoutProperties(_ref6, ["storageId"]);

  var path = "/API/storage/".concat(storageId, "/auto-import/disable");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}

var autoimport = {
  listAutoImport: listAutoImport,
  updateAutoImport: updateAutoImport,
  getAutoImport: getAutoImport,
  removeAutoImport: removeAutoImport,
  enableAutoImport: enableAutoImport,
  disableAutoImport: disableAutoImport
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `PUT /API/${entity}/${entityId}/metadata`
 *
 * @function metadata.updateEntityMetadata
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */

function updateEntityMetadata(_ref) {
  var _ref$entity = _ref.entity,
      entity = _ref$entity === void 0 ? isRequired() : _ref$entity,
      _ref$entityId = _ref.entityId,
      entityId = _ref$entityId === void 0 ? isRequired() : _ref$entityId,
      metadataDocument = _ref.metadataDocument,
      props = _objectWithoutProperties(_ref, ["entity", "entityId", "metadataDocument"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `PUT /API/${entity}/${entityId}/metadata/move`
 *
 * @function metadata.moveEntityMetadata
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function moveEntityMetadata(_ref2) {
  var _ref2$entity = _ref2.entity,
      entity = _ref2$entity === void 0 ? isRequired() : _ref2$entity,
      _ref2$entityId = _ref2.entityId,
      entityId = _ref2$entityId === void 0 ? isRequired() : _ref2$entityId,
      props = _objectWithoutProperties(_ref2, ["entity", "entityId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata/move");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `GET /API/${entity}/${entityId}/metadata/changes`
 *
 * @function metadata.listEntityMetadataChange
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function listEntityMetadataChange(_ref3) {
  var _ref3$entity = _ref3.entity,
      entity = _ref3$entity === void 0 ? isRequired() : _ref3$entity,
      _ref3$entityId = _ref3.entityId,
      entityId = _ref3$entityId === void 0 ? isRequired() : _ref3$entityId,
      props = _objectWithoutProperties(_ref3, ["entity", "entityId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata/changes");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `GET /API/${entity}/${entityId}/metadata/changes/${changesetId}`
 *
 * @function metadata.getEntityMetadataChange
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {string} obj.changesetId
 * @returns {Promise<Object>}
 */


function getEntityMetadataChange(_ref4) {
  var _ref4$entity = _ref4.entity,
      entity = _ref4$entity === void 0 ? isRequired() : _ref4$entity,
      _ref4$entityId = _ref4.entityId,
      entityId = _ref4$entityId === void 0 ? isRequired() : _ref4$entityId,
      _ref4$changesetId = _ref4.changesetId,
      changesetId = _ref4$changesetId === void 0 ? isRequired() : _ref4$changesetId,
      props = _objectWithoutProperties(_ref4, ["entity", "entityId", "changesetId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata/changes/").concat(changesetId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `GET /API/${entity}/${entityId}/metadata/changes/${changesetId}/compareTo/previous`
 *
 * @function metadata.previousEntityMetadataChange
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {string} obj.changesetId
 * @returns {Promise<Object>}
 */


function previousEntityMetadataChange(_ref5) {
  var _ref5$entity = _ref5.entity,
      entity = _ref5$entity === void 0 ? isRequired() : _ref5$entity,
      _ref5$entityId = _ref5.entityId,
      entityId = _ref5$entityId === void 0 ? isRequired() : _ref5$entityId,
      _ref5$changesetId = _ref5.changesetId,
      changesetId = _ref5$changesetId === void 0 ? isRequired() : _ref5$changesetId,
      props = _objectWithoutProperties(_ref5, ["entity", "entityId", "changesetId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata/changes/").concat(changesetId, "/compareTo/previous");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `GET /API/${entity}/${entityId}/metadata/changes/${changesetId}/compareTo/${fromChangesetId}`
 *
 * @function metadata.compareEntityMetadataChange
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {string} obj.changesetId
 * @param {string} obj.fromChangesetId
 * @returns {Promise<Object>}
 */


function compareEntityMetadataChange(_ref6) {
  var _ref6$entity = _ref6.entity,
      entity = _ref6$entity === void 0 ? isRequired() : _ref6$entity,
      _ref6$entityId = _ref6.entityId,
      entityId = _ref6$entityId === void 0 ? isRequired() : _ref6$entityId,
      _ref6$changesetId = _ref6.changesetId,
      changesetId = _ref6$changesetId === void 0 ? isRequired() : _ref6$changesetId,
      _ref6$fromChangesetId = _ref6.fromChangesetId,
      fromChangesetId = _ref6$fromChangesetId === void 0 ? isRequired() : _ref6$fromChangesetId,
      props = _objectWithoutProperties(_ref6, ["entity", "entityId", "changesetId", "fromChangesetId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata/changes/").concat(changesetId, "/compareTo/").concat(fromChangesetId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `PUT /API/${entity}/${entityId}/metadata/changes/${changesetId}/`
 *
 * @function metadata.updateEntityMetadataChange
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {string} obj.changesetId
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */


function updateEntityMetadataChange(_ref7) {
  var _ref7$entity = _ref7.entity,
      entity = _ref7$entity === void 0 ? isRequired() : _ref7$entity,
      _ref7$entityId = _ref7.entityId,
      entityId = _ref7$entityId === void 0 ? isRequired() : _ref7$entityId,
      _ref7$changesetId = _ref7.changesetId,
      changesetId = _ref7$changesetId === void 0 ? isRequired() : _ref7$changesetId,
      _ref7$metadataDocumen = _ref7.metadataDocument,
      metadataDocument = _ref7$metadataDocumen === void 0 ? isRequired() : _ref7$metadataDocumen,
      props = _objectWithoutProperties(_ref7, ["entity", "entityId", "changesetId", "metadataDocument"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata/changes/").concat(changesetId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `PUT /API/${entity}/${entityId}/metadata/changes`
 *
 * @function metadata.updateAllEntityMetadataChange
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {Object} obj.metadataChangeSetDocument
 * @returns {Promise<Object>}
 */


function updateAllEntityMetadataChange(_ref8) {
  var _ref8$entity = _ref8.entity,
      entity = _ref8$entity === void 0 ? isRequired() : _ref8$entity,
      _ref8$entityId = _ref8.entityId,
      entityId = _ref8$entityId === void 0 ? isRequired() : _ref8$entityId,
      _ref8$metadataChangeS = _ref8.metadataChangeSetDocument,
      metadataChangeSetDocument = _ref8$metadataChangeS === void 0 ? isRequired() : _ref8$metadataChangeS,
      props = _objectWithoutProperties(_ref8, ["entity", "entityId", "metadataChangeSetDocument"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata/changes");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metadataChangeSetDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `PUT /API/${entity}/${entityId}/metadata/changes/trim`
 *
 * @function metadata.trimAllEntityMetadataChange
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function trimAllEntityMetadataChange(_ref9) {
  var _ref9$entity = _ref9.entity,
      entity = _ref9$entity === void 0 ? isRequired() : _ref9$entity,
      _ref9$entityId = _ref9.entityId,
      entityId = _ref9$entityId === void 0 ? isRequired() : _ref9$entityId,
      props = _objectWithoutProperties(_ref9, ["entity", "entityId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata/changes/trim");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `PUT /API/${entity}/${entityId}/metadata/changes/${changesetId}/trim`
 *
 * @function metadata.trimEntityMetadataChange
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {string} obj.changesetId
 * @returns {Promise<Object>}
 */


function trimEntityMetadataChange(_ref10) {
  var _ref10$entity = _ref10.entity,
      entity = _ref10$entity === void 0 ? isRequired() : _ref10$entity,
      _ref10$entityId = _ref10.entityId,
      entityId = _ref10$entityId === void 0 ? isRequired() : _ref10$entityId,
      _ref10$changesetId = _ref10.changesetId,
      changesetId = _ref10$changesetId === void 0 ? isRequired() : _ref10$changesetId,
      props = _objectWithoutProperties(_ref10, ["entity", "entityId", "changesetId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata/changes/").concat(changesetId, "/trim");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `DELETE /API/${entity}/${entityId}/metadata/changes/${changesetId}`
 *
 * @function metadata.removeEntityMetadataChange
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {string} obj.changesetId
 * @returns {Promise<Object>}
 */


function removeEntityMetadataChange(_ref11) {
  var _ref11$entity = _ref11.entity,
      entity = _ref11$entity === void 0 ? isRequired() : _ref11$entity,
      _ref11$entityId = _ref11.entityId,
      entityId = _ref11$entityId === void 0 ? isRequired() : _ref11$entityId,
      _ref11$changesetId = _ref11.changesetId,
      changesetId = _ref11$changesetId === void 0 ? isRequired() : _ref11$changesetId,
      props = _objectWithoutProperties(_ref11, ["entity", "entityId", "changesetId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata/changes/").concat(changesetId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `PUT /API/${entity}/${entityId}/metadata/entry/${uuid}`
 *
 * @function metadata.updateEntityMetadataEntry
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {string} obj.uuid
 * @param {Object} obj.metadataEntryDocument
 * @returns {Promise<Object>}
 */


function updateEntityMetadataEntry(_ref12) {
  var _ref12$entity = _ref12.entity,
      entity = _ref12$entity === void 0 ? isRequired() : _ref12$entity,
      _ref12$entityId = _ref12.entityId,
      entityId = _ref12$entityId === void 0 ? isRequired() : _ref12$entityId,
      _ref12$uuid = _ref12.uuid,
      uuid = _ref12$uuid === void 0 ? isRequired() : _ref12$uuid,
      _ref12$metadataEntryD = _ref12.metadataEntryDocument,
      metadataEntryDocument = _ref12$metadataEntryD === void 0 ? isRequired() : _ref12$metadataEntryD,
      props = _objectWithoutProperties(_ref12, ["entity", "entityId", "uuid", "metadataEntryDocument"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata/entry/").concat(uuid);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metadataEntryDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `PUT /API/${entity}/${entityId}/metadata/entry/`
 *
 * @function metadata.updateAllEntityMetadataEntry
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {Object} obj.metadataEntryListDocument
 * @returns {Promise<Object>}
 */


function updateAllEntityMetadataEntry(_ref13) {
  var _ref13$entity = _ref13.entity,
      entity = _ref13$entity === void 0 ? isRequired() : _ref13$entity,
      _ref13$entityId = _ref13.entityId,
      entityId = _ref13$entityId === void 0 ? isRequired() : _ref13$entityId,
      _ref13$metadataEntryL = _ref13.metadataEntryListDocument,
      metadataEntryListDocument = _ref13$metadataEntryL === void 0 ? isRequired() : _ref13$metadataEntryL,
      props = _objectWithoutProperties(_ref13, ["entity", "entityId", "metadataEntryListDocument"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata/entry/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metadataEntryListDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `GET /API/${entity}/${entityId}/metadata/graph`
 *
 * @function metadata.getEntityMetadataGraph
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function getEntityMetadataGraph(_ref14) {
  var _ref14$entity = _ref14.entity,
      entity = _ref14$entity === void 0 ? isRequired() : _ref14$entity,
      _ref14$entityId = _ref14.entityId,
      entityId = _ref14$entityId === void 0 ? isRequired() : _ref14$entityId,
      _ref14$headers = _ref14.headers,
      propHeaders = _ref14$headers === void 0 ? {} : _ref14$headers,
      props = _objectWithoutProperties(_ref14, ["entity", "entityId", "headers"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata/graph");

  var headers = _objectSpread2({
    accept: 'image/png'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `GET /API/${entity}/${entityId}/metadata/graph/dot`
 *
 * @function metadata.getEntityMetadataGraphDot
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function getEntityMetadataGraphDot(_ref15) {
  var _ref15$entity = _ref15.entity,
      entity = _ref15$entity === void 0 ? isRequired() : _ref15$entity,
      _ref15$entityId = _ref15.entityId,
      entityId = _ref15$entityId === void 0 ? isRequired() : _ref15$entityId,
      _ref15$headers = _ref15.headers,
      propHeaders = _ref15$headers === void 0 ? {} : _ref15$headers,
      props = _objectWithoutProperties(_ref15, ["entity", "entityId", "headers"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata/graph/dot");

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `GET /API/${entity}/${entityId}/metadata`
 *
 * @function metadata.getEntityMetadata
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function getEntityMetadata(_ref16) {
  var _ref16$entity = _ref16.entity,
      entity = _ref16$entity === void 0 ? isRequired() : _ref16$entity,
      _ref16$entityId = _ref16.entityId,
      entityId = _ref16$entityId === void 0 ? isRequired() : _ref16$entityId,
      props = _objectWithoutProperties(_ref16, ["entity", "entityId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata");
  return vFetch(_objectSpread2(_objectSpread2({
    path: path,
    method: 'GET'
  }, props), props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `GET /API/metadata/${metadataUuid}/`
 *
 * @function metadata.getMetadata
 * @param {Object} obj
 * @param {string} obj.metadataUuid
 * @returns {Promise<Object>}
 */


function getMetadata(_ref17) {
  var _ref17$metadataUuid = _ref17.metadataUuid,
      metadataUuid = _ref17$metadataUuid === void 0 ? isRequired() : _ref17$metadataUuid,
      props = _objectWithoutProperties(_ref17, ["metadataUuid"]);

  var path = "/API/metadata/".concat(metadataUuid, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `DELETE /API/metadata/${metadataUuid}/`
 *
 * @function metadata.removeMetadata
 * @param {Object} obj
 * @param {string} obj.metadataUuid
 * @returns {Promise<Object>}
 */


function removeMetadata(_ref18) {
  var _ref18$metadataUuid = _ref18.metadataUuid,
      metadataUuid = _ref18$metadataUuid === void 0 ? isRequired() : _ref18$metadataUuid,
      props = _objectWithoutProperties(_ref18, ["metadataUuid"]);

  var path = "/API/metadata/".concat(metadataUuid, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `GET /API/metadata/`
 *
 * @function metadata.getMetadataGlobal
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getMetadataGlobal() {
  var _ref19 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref19);

  var path = '/API/metadata/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `PUT /API/metadata/`
 *
 * @function metadata.updateMetadataGlobal
 * @param {Object} obj
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */


function updateMetadataGlobal() {
  var _ref20 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      metadataDocument = _ref20.metadataDocument,
      props = _objectWithoutProperties(_ref20, ["metadataDocument"]);

  var path = '/API/metadata/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `GET /API/${entityType}/${entityId}/metadata`
 *
 * @function metadata.getSimpleMetadata
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function getSimpleMetadata(_ref21) {
  var _ref21$entityType = _ref21.entityType,
      entityType = _ref21$entityType === void 0 ? isRequired() : _ref21$entityType,
      _ref21$entityId = _ref21.entityId,
      entityId = _ref21$entityId === void 0 ? isRequired() : _ref21$entityId,
      props = _objectWithoutProperties(_ref21, ["entityType", "entityId"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/metadata");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `GET /API/${entityType}/${entityId}/metadata/${subpath}
 *
 * @function metadata.getSimpleMetadataSubpath
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {string} obj.subpath
 * @returns {Promise<Object>}
 */


function getSimpleMetadataSubpath(_ref22) {
  var _ref22$entityType = _ref22.entityType,
      entityType = _ref22$entityType === void 0 ? isRequired() : _ref22$entityType,
      _ref22$entityId = _ref22.entityId,
      entityId = _ref22$entityId === void 0 ? isRequired() : _ref22$entityId,
      subpath = _ref22.subpath,
      props = _objectWithoutProperties(_ref22, ["entityType", "entityId", "subpath"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/metadata/").concat(subpath);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `PUT /API/${entityType}/${entityId}/metadata
 *
 * @function metadata.updateSimpleMetadata
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {Object} obj.simpleMetadataDocument
 * @returns {Promise<Object>}
 */


function updateSimpleMetadata() {
  var _ref23 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      simpleMetadataDocument = _ref23.simpleMetadataDocument,
      _ref23$entityType = _ref23.entityType,
      entityType = _ref23$entityType === void 0 ? isRequired() : _ref23$entityType,
      _ref23$entityId = _ref23.entityId,
      entityId = _ref23$entityId === void 0 ? isRequired() : _ref23$entityId,
      props = _objectWithoutProperties(_ref23, ["simpleMetadataDocument", "entityType", "entityId"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/metadata");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: simpleMetadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `PUT /API/${entityType}/${entityId}/metadata/${subpath}`
 *
 * @function metadata.updateSimpleMetadataSubpath
 * @param {Object} obj
 * @param {string} obj.subpath
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {Object} obj.simpleMetadataDocument
 * @returns {Promise<Object>}
 */


function updateSimpleMetadataSubpath() {
  var _ref24 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      simpleMetadataDocument = _ref24.simpleMetadataDocument,
      _ref24$entityType = _ref24.entityType,
      entityType = _ref24$entityType === void 0 ? isRequired() : _ref24$entityType,
      _ref24$entityId = _ref24.entityId,
      entityId = _ref24$entityId === void 0 ? isRequired() : _ref24$entityId,
      subpath = _ref24.subpath,
      props = _objectWithoutProperties(_ref24, ["simpleMetadataDocument", "entityType", "entityId", "subpath"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/metadata/").concat(subpath);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: simpleMetadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `DELETE /API/${entityType}/${entityId}/metadata`
 *
 * @function metadata.removeSimpleMetadata
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function removeSimpleMetadata() {
  var _ref25 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref25$entityType = _ref25.entityType,
      entityType = _ref25$entityType === void 0 ? isRequired() : _ref25$entityType,
      _ref25$entityId = _ref25.entityId,
      entityId = _ref25$entityId === void 0 ? isRequired() : _ref25$entityId,
      props = _objectWithoutProperties(_ref25, ["entityType", "entityId"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/metadata");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `GET /API/${entityType}/${entityId}/metadata/${key}`
 *
 * @function metadata.getSimpleMetadataKey
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {string} obj.key
 * @returns {Promise<Object>}
 */


function getSimpleMetadataKey(_ref26) {
  var _ref26$entityType = _ref26.entityType,
      entityType = _ref26$entityType === void 0 ? isRequired() : _ref26$entityType,
      _ref26$entityId = _ref26.entityId,
      entityId = _ref26$entityId === void 0 ? isRequired() : _ref26$entityId,
      _ref26$key = _ref26.key,
      key = _ref26$key === void 0 ? isRequired() : _ref26$key,
      _ref26$headers = _ref26.headers,
      propHeaders = _ref26$headers === void 0 ? {} : _ref26$headers,
      props = _objectWithoutProperties(_ref26, ["entityType", "entityId", "key", "headers"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/metadata/").concat(key);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `DELETE /API/${entityType}/${entityId}/metadata/${key}`
 *
 * @function metadata.removeSimpleMetadataKey
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {string} obj.key
 * @returns {Promise<Object>}
 */


function removeSimpleMetadataKey(_ref27) {
  var _ref27$entityType = _ref27.entityType,
      entityType = _ref27$entityType === void 0 ? isRequired() : _ref27$entityType,
      _ref27$entityId = _ref27.entityId,
      entityId = _ref27$entityId === void 0 ? isRequired() : _ref27$entityId,
      _ref27$key = _ref27.key,
      key = _ref27$key === void 0 ? isRequired() : _ref27$key,
      _ref27$headers = _ref27.headers,
      propHeaders = _ref27$headers === void 0 ? {} : _ref27$headers,
      props = _objectWithoutProperties(_ref27, ["entityType", "entityId", "key", "headers"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/metadata/").concat(key);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/metadata.html APIdoc}
 *
 * `PUT /API/${entityType}/${entityId}/metadata/${key}`
 *
 * @function metadata.updateSimpleMetadataKey
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {string} obj.key
 * @param {string} obj.value
 * @returns {Promise<Object>}
 */


function updateSimpleMetadataKey(_ref28) {
  var _ref28$entityType = _ref28.entityType,
      entityType = _ref28$entityType === void 0 ? isRequired() : _ref28$entityType,
      _ref28$entityId = _ref28.entityId,
      entityId = _ref28$entityId === void 0 ? isRequired() : _ref28$entityId,
      _ref28$key = _ref28.key,
      key = _ref28$key === void 0 ? isRequired() : _ref28$key,
      value = _ref28.value,
      _ref28$headers = _ref28.headers,
      propHeaders = _ref28$headers === void 0 ? {} : _ref28$headers,
      props = _objectWithoutProperties(_ref28, ["entityType", "entityId", "key", "value", "headers"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/metadata/").concat(key);

  var headers = _objectSpread2({
    contentType: 'text/plain'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: value,
    headers: headers
  }, props));
}

var metadataApi = {
  updateEntityMetadata: updateEntityMetadata,
  moveEntityMetadata: moveEntityMetadata,
  listEntityMetadataChange: listEntityMetadataChange,
  getEntityMetadataChange: getEntityMetadataChange,
  previousEntityMetadataChange: previousEntityMetadataChange,
  compareEntityMetadataChange: compareEntityMetadataChange,
  updateEntityMetadataChange: updateEntityMetadataChange,
  updateAllEntityMetadataChange: updateAllEntityMetadataChange,
  trimAllEntityMetadataChange: trimAllEntityMetadataChange,
  trimEntityMetadataChange: trimEntityMetadataChange,
  removeEntityMetadataChange: removeEntityMetadataChange,
  updateEntityMetadataEntry: updateEntityMetadataEntry,
  updateAllEntityMetadataEntry: updateAllEntityMetadataEntry,
  getEntityMetadataGraph: getEntityMetadataGraph,
  getEntityMetadataGraphDot: getEntityMetadataGraphDot,
  getEntityMetadata: getEntityMetadata,
  getMetadata: getMetadata,
  removeMetadata: removeMetadata,
  getMetadataGlobal: getMetadataGlobal,
  updateMetadataGlobal: updateMetadataGlobal,
  getSimpleMetadata: getSimpleMetadata,
  getSimpleMetadataSubpath: getSimpleMetadataSubpath,
  updateSimpleMetadata: updateSimpleMetadata,
  updateSimpleMetadataSubpath: updateSimpleMetadataSubpath,
  removeSimpleMetadata: removeSimpleMetadata,
  getSimpleMetadataKey: getSimpleMetadataKey,
  removeSimpleMetadataKey: removeSimpleMetadataKey,
  updateSimpleMetadataKey: updateSimpleMetadataKey
};

/**
 * {@link  APIdoc}
 *
 * `GET /API/${entity}/${entityId}/metadata-lock`
 *
 * @function metadatalock.listEntityMetadataLock
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */

function listEntityMetadataLock(_ref) {
  var _ref$entity = _ref.entity,
      entity = _ref$entity === void 0 ? isRequired() : _ref$entity,
      _ref$entityId = _ref.entityId,
      entityId = _ref$entityId === void 0 ? isRequired() : _ref$entityId,
      props = _objectWithoutProperties(_ref, ["entity", "entityId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata-lock");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link  APIdoc}
 *
 * `POST /API/${entity}/${entityId}/metadata-lock/`
 *
 * @function metadatalock.createEntityMetadataLock
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function createEntityMetadataLock(_ref2) {
  var _ref2$entity = _ref2.entity,
      entity = _ref2$entity === void 0 ? isRequired() : _ref2$entity,
      _ref2$entityId = _ref2.entityId,
      entityId = _ref2$entityId === void 0 ? isRequired() : _ref2$entityId,
      props = _objectWithoutProperties(_ref2, ["entity", "entityId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata-lock");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link  APIdoc}
 *
 * `GET /API/${entity}/${entityId}/metadata-lock/${lockId}`
 *
 * @function metadatalock.getEntityMetadataLock
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {string} obj.lockId
 * @returns {Promise<Object>}
 */


function getEntityMetadataLock(_ref3) {
  var _ref3$entity = _ref3.entity,
      entity = _ref3$entity === void 0 ? isRequired() : _ref3$entity,
      _ref3$entityId = _ref3.entityId,
      entityId = _ref3$entityId === void 0 ? isRequired() : _ref3$entityId,
      _ref3$lockId = _ref3.lockId,
      lockId = _ref3$lockId === void 0 ? isRequired() : _ref3$lockId,
      props = _objectWithoutProperties(_ref3, ["entity", "entityId", "lockId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata-lock/").concat(lockId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link  APIdoc}
 *
 * `PUT /API/${entity}/${entityId}/metadata-lock/${lockId}`
 *
 * @function metadatalock.updateEntityMetadataLock
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {string} obj.lockId
 * @returns {Promise<Object>}
 */


function updateEntityMetadataLock(_ref4) {
  var _ref4$entity = _ref4.entity,
      entity = _ref4$entity === void 0 ? isRequired() : _ref4$entity,
      _ref4$entityId = _ref4.entityId,
      entityId = _ref4$entityId === void 0 ? isRequired() : _ref4$entityId,
      _ref4$lockId = _ref4.lockId,
      lockId = _ref4$lockId === void 0 ? isRequired() : _ref4$lockId,
      props = _objectWithoutProperties(_ref4, ["entity", "entityId", "lockId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata-lock/").concat(lockId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link  APIdoc}
 *
 * `DELETE /API/${entity}/${entityId}/metadata-lock/${lockId}`
 *
 * @function metadatalock.removeEntityMetadataLock
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {string} obj.lockId
 * @returns {Promise<Object>}
 */


function removeEntityMetadataLock(_ref5) {
  var _ref5$entity = _ref5.entity,
      entity = _ref5$entity === void 0 ? isRequired() : _ref5$entity,
      _ref5$entityId = _ref5.entityId,
      entityId = _ref5$entityId === void 0 ? isRequired() : _ref5$entityId,
      _ref5$lockId = _ref5.lockId,
      lockId = _ref5$lockId === void 0 ? isRequired() : _ref5$lockId,
      props = _objectWithoutProperties(_ref5, ["entity", "entityId", "lockId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/metadata-lock/").concat(lockId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var metadataLockApi = {
  listEntityMetadataLock: listEntityMetadataLock,
  createEntityMetadataLock: createEntityMetadataLock,
  getEntityMetadataLock: getEntityMetadataLock,
  updateEntityMetadataLock: updateEntityMetadataLock,
  removeEntityMetadataLock: removeEntityMetadataLock
};

var listEntityMetadataLock$1 = metadataLockApi.listEntityMetadataLock,
    createEntityMetadataLock$1 = metadataLockApi.createEntityMetadataLock,
    getEntityMetadataLock$1 = metadataLockApi.getEntityMetadataLock,
    updateEntityMetadataLock$1 = metadataLockApi.updateEntityMetadataLock,
    removeEntityMetadataLock$1 = metadataLockApi.removeEntityMetadataLock;
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `GET /API/collection/`
 *
 * @function collection.listCollection
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listCollection() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/collection/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `GET /API/collection/${collectionId}/`
 *
 * @function collection.getCollection
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @returns {Promise<Object>}
 */


function getCollection(_ref2) {
  var _ref2$collectionId = _ref2.collectionId,
      collectionId = _ref2$collectionId === void 0 ? isRequired() : _ref2$collectionId,
      props = _objectWithoutProperties(_ref2, ["collectionId"]);

  var path = "/API/collection/".concat(collectionId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `GET /API/collection/${collectionId}/metadata`
 *
 * @function collection.getCollectionMetadata
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @returns {Promise<Object>}
 */


function getCollectionMetadata(_ref3) {
  var _ref3$collectionId = _ref3.collectionId,
      collectionId = _ref3$collectionId === void 0 ? isRequired() : _ref3$collectionId,
      props = _objectWithoutProperties(_ref3, ["collectionId"]);

  var path = "/API/collection/".concat(collectionId, "/metadata");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * @function collection.updateCollectionMetadata
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */


function updateCollectionMetadata(_ref4) {
  var collectionId = _ref4.collectionId,
      metadataDocument = _ref4.metadataDocument,
      props = _objectWithoutProperties(_ref4, ["collectionId", "metadataDocument"]);

  return metadataApi.updateEntityMetadata(_objectSpread2({
    entity: 'collection',
    entityId: collectionId,
    metadataDocument: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `GET /API/collection/${collectionId}/ancestor`
 *
 * @function collection.getCollectionAncestor
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @returns {Promise<Object>}
 */


function getCollectionAncestor(_ref5) {
  var _ref5$collectionId = _ref5.collectionId,
      collectionId = _ref5$collectionId === void 0 ? isRequired() : _ref5$collectionId,
      props = _objectWithoutProperties(_ref5, ["collectionId"]);

  var path = "/API/collection/".concat(collectionId, "/ancestor");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `GET /API/collection/history`
 *
 * @function collection.listCollectionHistory
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function listCollectionHistory() {
  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref6);

  var path = '/API/collection/history';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `GET /API/collection/${collectionId}/item`
 *
 * @function collection.getCollectionItem
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @returns {Promise<Object>}
 */


function getCollectionItem(_ref7) {
  var _ref7$collectionId = _ref7.collectionId,
      collectionId = _ref7$collectionId === void 0 ? isRequired() : _ref7$collectionId,
      props = _objectWithoutProperties(_ref7, ["collectionId"]);

  var path = "/API/collection/".concat(collectionId, "/item");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `PUT /API/collection/`
 *
 * @function collection.searchCollection
 * @param {Object} obj
 * @param {Object} obj.itemSearchDocument
 * @returns {Promise<Object>}
 */


function searchCollection(_ref8) {
  var itemSearchDocument = _ref8.itemSearchDocument,
      props = _objectWithoutProperties(_ref8, ["itemSearchDocument"]);

  var path = '/API/collection/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: itemSearchDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `PUT /API/collection/${collectionId}/item`
 *
 * @function collection.searchCollectionItem
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {Object} obj.searchDocument
 * @returns {Promise<Object>}
 */


function searchCollectionItem(_ref9) {
  var _ref9$collectionId = _ref9.collectionId,
      collectionId = _ref9$collectionId === void 0 ? isRequired() : _ref9$collectionId,
      searchDocument = _ref9.searchDocument,
      props = _objectWithoutProperties(_ref9, ["collectionId", "searchDocument"]);

  var path = "/API/collection/".concat(collectionId, "/item");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: searchDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `POST /API/collection`
 *
 * @function collection.createCollection
 * @param {Object} obj
 * @param {Object} obj.collectionDocument
 * @param {Object} obj.queryParams
 * @returns {Promise<Object>}
 */


function createCollection(_ref10) {
  var collectionDocument = _ref10.collectionDocument,
      queryParams = _ref10.queryParams,
      props = _objectWithoutProperties(_ref10, ["collectionDocument", "queryParams"]);

  var path = '/API/collection';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: collectionDocument,
    queryParams: queryParams
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `DELETE /API/collection/${collectionId}/`
 *
 * @function collection.removeCollection
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @returns {Promise<Object>}
 */


function removeCollection(_ref11) {
  var _ref11$collectionId = _ref11.collectionId,
      collectionId = _ref11$collectionId === void 0 ? isRequired() : _ref11$collectionId,
      props = _objectWithoutProperties(_ref11, ["collectionId"]);

  var path = "/API/collection/".concat(collectionId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `DELETE /API/collection`
 *
 * @function collection.removeCollectionList
 * @param {Object} obj
 * @param {Object} obj.queryParams
 * @returns {Promise<Object>}
 */


function removeCollectionList(_ref12) {
  var _ref12$queryParams = _ref12.queryParams,
      queryParams = _ref12$queryParams === void 0 ? isRequired() : _ref12$queryParams,
      props = _objectWithoutProperties(_ref12, ["queryParams"]);

  var path = '/API/collection';
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE',
    queryParams: queryParams
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `PUT /API/collection/${collectionId}/rename`
 *
 * @function collection.renameCollection
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @returns {Promise<Object>}
 */


function renameCollection(_ref13) {
  var _ref13$collectionId = _ref13.collectionId,
      collectionId = _ref13$collectionId === void 0 ? isRequired() : _ref13$collectionId,
      props = _objectWithoutProperties(_ref13, ["collectionId"]);

  var path = "/API/collection/".concat(collectionId, "/rename");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `PUT /API/collection/${collectionId}/${entityId}`
 *
 * @function collection.addCollectionEntity
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function addCollectionEntity(_ref14) {
  var _ref14$collectionId = _ref14.collectionId,
      collectionId = _ref14$collectionId === void 0 ? isRequired() : _ref14$collectionId,
      _ref14$entityId = _ref14.entityId,
      entityId = _ref14$entityId === void 0 ? isRequired() : _ref14$entityId,
      props = _objectWithoutProperties(_ref14, ["collectionId", "entityId"]);

  var path = "/API/collection/".concat(collectionId, "/").concat(entityId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `DELETE /API/collection/${collectionId}/${entityId}`
 *
 * @function collection.removeCollectionEntity
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function removeCollectionEntity(_ref15) {
  var _ref15$collectionId = _ref15.collectionId,
      collectionId = _ref15$collectionId === void 0 ? isRequired() : _ref15$collectionId,
      _ref15$entityId = _ref15.entityId,
      entityId = _ref15$entityId === void 0 ? isRequired() : _ref15$entityId,
      props = _objectWithoutProperties(_ref15, ["collectionId", "entityId"]);

  var path = "/API/collection/".concat(collectionId, "/").concat(entityId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `PUT /API/collection/${collectionId}/`
 *
 * @function collection.updateCollection
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {Object} obj.collectionDocument
 * @returns {Promise<Object>}
 */


function updateCollection(_ref16) {
  var _ref16$collectionId = _ref16.collectionId,
      collectionId = _ref16$collectionId === void 0 ? isRequired() : _ref16$collectionId,
      collectionDocument = _ref16.collectionDocument,
      props = _objectWithoutProperties(_ref16, ["collectionId", "collectionDocument"]);

  var path = "/API/collection/".concat(collectionId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: collectionDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `POST /API/collection/${collectionId}/order`
 *
 * @function collection.orderCollection
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {Object} obj.collectionReorderDocument
 * @returns {Promise<Object>}
 */


function orderCollection(_ref17) {
  var _ref17$collectionId = _ref17.collectionId,
      collectionId = _ref17$collectionId === void 0 ? isRequired() : _ref17$collectionId,
      collectionReorderDocument = _ref17.collectionReorderDocument,
      props = _objectWithoutProperties(_ref17, ["collectionId", "collectionReorderDocument"]);

  var path = "/API/collection/".concat(collectionId, "/order");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: collectionReorderDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `PUT /API/collection/${collectionId}/map-to-folder`
 *
 * @function collection.markFolderCollection
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @returns {Promise<Object>}
 */


function markFolderCollection(_ref18) {
  var _ref18$collectionId = _ref18.collectionId,
      collectionId = _ref18$collectionId === void 0 ? isRequired() : _ref18$collectionId,
      props = _objectWithoutProperties(_ref18, ["collectionId"]);

  var path = "/API/collection/".concat(collectionId, "/map-to-folder");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `DELETE /API/collection/${collectionId}/map-to-folder`
 *
 * @function collection.unMarkFolderCollection
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @returns {Promise<Object>}
 */


function unMarkFolderCollection(_ref19) {
  var _ref19$collectionId = _ref19.collectionId,
      collectionId = _ref19$collectionId === void 0 ? isRequired() : _ref19$collectionId,
      props = _objectWithoutProperties(_ref19, ["collectionId"]);

  var path = "/API/collection/".concat(collectionId, "/map-to-folder");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * `PUT /API/collection/${collectionId}/folder-name`
 *
 * @function collection.updateFolderCollection
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {Object} obj.queryParams
 * @returns {Promise<Object>}
 */


function updateFolderCollection(_ref20) {
  var _ref20$collectionId = _ref20.collectionId,
      collectionId = _ref20$collectionId === void 0 ? isRequired() : _ref20$collectionId,
      _ref20$queryParams = _ref20.queryParams,
      queryParams = _ref20$queryParams === void 0 ? isRequired() : _ref20$queryParams,
      props = _objectWithoutProperties(_ref20, ["collectionId", "queryParams"]);

  var path = "/API/collection/".concat(collectionId, "/folder-name");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    queryParams: queryParams
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * @function collection.listCollectionMetadataLock
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @returns {Promise<Object>}
 */


function listCollectionMetadataLock(_ref21) {
  var _ref21$collectionId = _ref21.collectionId,
      collectionId = _ref21$collectionId === void 0 ? isRequired() : _ref21$collectionId,
      props = _objectWithoutProperties(_ref21, ["collectionId"]);

  return listEntityMetadataLock$1(_objectSpread2({
    entity: 'collection',
    entityId: collectionId
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * @function collection.createCollectionMetadataLock
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @returns {Promise<Object>}
 */


function createCollectionMetadataLock(_ref22) {
  var _ref22$collectionId = _ref22.collectionId,
      collectionId = _ref22$collectionId === void 0 ? isRequired() : _ref22$collectionId,
      props = _objectWithoutProperties(_ref22, ["collectionId"]);

  return createEntityMetadataLock$1(_objectSpread2({
    entity: 'collection',
    entityId: collectionId
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * @function collection.getCollectionMetadataLock
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @returns {Promise<Object>}
 */


function getCollectionMetadataLock(_ref23) {
  var _ref23$collectionId = _ref23.collectionId,
      collectionId = _ref23$collectionId === void 0 ? isRequired() : _ref23$collectionId,
      props = _objectWithoutProperties(_ref23, ["collectionId"]);

  return getEntityMetadataLock$1(_objectSpread2({
    entity: 'collection',
    entityId: collectionId
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * @function collection.updateCollectionMetadataLock
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @returns {Promise<Object>}
 */


function updateCollectionMetadataLock(_ref24) {
  var _ref24$collectionId = _ref24.collectionId,
      collectionId = _ref24$collectionId === void 0 ? isRequired() : _ref24$collectionId,
      props = _objectWithoutProperties(_ref24, ["collectionId"]);

  return updateEntityMetadataLock$1(_objectSpread2({
    entity: 'collection',
    entityId: collectionId
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/collection.html APIdoc}
 *
 * @function collection.removeCollectionMetadataLock
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @returns {Promise<Object>}
 */


function removeCollectionMetadataLock(_ref25) {
  var _ref25$collectionId = _ref25.collectionId,
      collectionId = _ref25$collectionId === void 0 ? isRequired() : _ref25$collectionId,
      props = _objectWithoutProperties(_ref25, ["collectionId"]);

  return removeEntityMetadataLock$1(_objectSpread2({
    entity: 'collection',
    entityId: collectionId
  }, props));
}

var collection = {
  listCollection: listCollection,
  getCollection: getCollection,
  getCollectionMetadata: getCollectionMetadata,
  updateCollectionMetadata: updateCollectionMetadata,
  getCollectionAncestor: getCollectionAncestor,
  listCollectionHistory: listCollectionHistory,
  getCollectionItem: getCollectionItem,
  searchCollection: searchCollection,
  searchCollectionItem: searchCollectionItem,
  createCollection: createCollection,
  removeCollection: removeCollection,
  removeCollectionList: removeCollectionList,
  renameCollection: renameCollection,
  addCollectionEntity: addCollectionEntity,
  removeCollectionEntity: removeCollectionEntity,
  updateCollection: updateCollection,
  orderCollection: orderCollection,
  markFolderCollection: markFolderCollection,
  unMarkFolderCollection: unMarkFolderCollection,
  updateFolderCollection: updateFolderCollection,
  listCollectionMetadataLock: listCollectionMetadataLock,
  createCollectionMetadataLock: createCollectionMetadataLock,
  getCollectionMetadataLock: getCollectionMetadataLock,
  updateCollectionMetadataLock: updateCollectionMetadataLock,
  removeCollectionMetadataLock: removeCollectionMetadataLock
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/misc/debug.html?highlight=echo#echo APIdoc}
 *
 * `PUT /APInoauth/debug/echo`
 *
 * @function debug.echo
 * @param {Object} obj
 * @param {Object} obj.xmlDocument
 * @returns {Promise<Object>}
 */

function echo(_ref) {
  var _ref$xmlDocument = _ref.xmlDocument,
      xmlDocument = _ref$xmlDocument === void 0 ? isRequired() : _ref$xmlDocument,
      _ref$headers = _ref.headers,
      propHeaders = _ref$headers === void 0 ? {} : _ref$headers,
      props = _objectWithoutProperties(_ref, ["xmlDocument", "headers"]);

  return vFetch(_objectSpread2({
    path: '/APInoauth/debug/echo',
    method: 'PUT',
    body: xmlDocument,
    headers: _objectSpread2({
      contentType: 'application/xml'
    }, propHeaders)
  }, props));
}

var debug = {
  echo: echo
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/index.html APIdoc}
 *
 * `GET /API/error`
 *
 * @function errorlog.listErrorLogs
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listErrorLogs() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  return vFetch(_objectSpread2({
    path: '/API/error',
    method: 'GET'
  }, props));
}

var errorlog = {
  listErrorLogs: listErrorLogs
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/export-location.html APIdoc}
 *
 * `GET /API/export-location`
 *
 * @function exportlocation.listExportLocation
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listExportLocation() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  return vFetch(_objectSpread2({
    path: '/API/export-location',
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/export-location.html APIdoc}
 *
 * `GET /API/export-location/${locationName}`
 *
 * @function exportlocation.getExportLocation
 * @param {Object} obj
 * @param {string} obj.locationName
 * @returns {Promise<Object>}
 */


function getExportLocation(_ref2) {
  var _ref2$locationName = _ref2.locationName,
      locationName = _ref2$locationName === void 0 ? isRequired() : _ref2$locationName,
      props = _objectWithoutProperties(_ref2, ["locationName"]);

  return vFetch(_objectSpread2({
    path: "/API/export-location/".concat(locationName),
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/export-location.html APIdoc}
 *
 * `PUT /API/export-location/${locationName}`
 *
 * @function exportlocation.updateExportLocation
 * @param {Object} obj
 * @param {string} obj.locationName
 * @param {Object} obj.exportLocationDocument
 * @returns {Promise<Object>}
 */


function updateExportLocation(_ref3) {
  var _ref3$locationName = _ref3.locationName,
      locationName = _ref3$locationName === void 0 ? isRequired() : _ref3$locationName,
      exportLocationDocument = _ref3.exportLocationDocument,
      props = _objectWithoutProperties(_ref3, ["locationName", "exportLocationDocument"]);

  var path = "/API/export-location/".concat(locationName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: exportLocationDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/export-location.html APIdoc}
 *
 * `DELETE /API/export-location/${locationName}`
 *
 * @function exportlocation.removeExportLocation
 * @param {Object} obj
 * @param {string} obj.locationName
 * @returns {Promise<Object>}
 */


function removeExportLocation(_ref4) {
  var _ref4$locationName = _ref4.locationName,
      locationName = _ref4$locationName === void 0 ? isRequired() : _ref4$locationName,
      props = _objectWithoutProperties(_ref4, ["locationName"]);

  var path = "/API/export-location/".concat(locationName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/export-location.html APIdoc}
 *
 * `GET /API/export-location/${locationName}/script`
 *
 * @function exportlocation.getExportLocationScript
 * @param {Object} obj
 * @param {string} obj.locationName
 * @returns {Promise<Object>}
 */


function getExportLocationScript(_ref5) {
  var _ref5$locationName = _ref5.locationName,
      locationName = _ref5$locationName === void 0 ? isRequired() : _ref5$locationName,
      _ref5$headers = _ref5.headers,
      propHeaders = _ref5$headers === void 0 ? {} : _ref5$headers,
      props = _objectWithoutProperties(_ref5, ["locationName", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  var path = "/API/export-location/".concat(locationName, "/script");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/export-location.html APIdoc}
 *
 * `PUT /API/export-location/${locationName}/script`
 *
 * @function exportlocation.updateExportLocationScript
 * @param {Object} obj
 * @param {string} obj.locationName
 * @param {string} obj.exportScript
 * @returns {Promise<Object>}
 */


function updateExportLocationScript(_ref6) {
  var _ref6$locationName = _ref6.locationName,
      locationName = _ref6$locationName === void 0 ? isRequired() : _ref6$locationName,
      _ref6$exportScript = _ref6.exportScript,
      exportScript = _ref6$exportScript === void 0 ? isRequired() : _ref6$exportScript,
      _ref6$headers = _ref6.headers,
      propHeaders = _ref6$headers === void 0 ? {} : _ref6$headers,
      props = _objectWithoutProperties(_ref6, ["locationName", "exportScript", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain',
    contentType: 'text/plain'
  }, propHeaders);

  var path = "/API/export-location/".concat(locationName, "/script");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: exportScript,
    headers: headers
  }, props));
}

var exportlocation = {
  listExportLocation: listExportLocation,
  getExportLocation: getExportLocation,
  updateExportLocation: updateExportLocation,
  removeExportLocation: removeExportLocation,
  getExportLocationScript: getExportLocationScript,
  updateExportLocationScript: updateExportLocationScript
};

/**
 * {@link https://apidoc.vidispine.com/latest/item/export-templates.html APIdoc}
 *
 * `GET /API/export-template`
 *
 * @function exporttemplate.listExportTemplate
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listExportTemplete() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  return vFetch(_objectSpread2({
    path: '/API/export-template',
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/item/export-templates.html APIdoc}
 *
 * `GET /API/export-template/${templateName}`
 *
 * @function exporttemplate.getExportTemplate
 * @param {Object} obj
 * @param {string} obj.templateName
 * @returns {Promise<Object>}
 */


function getExportTemplate(_ref2) {
  var _ref2$templateName = _ref2.templateName,
      templateName = _ref2$templateName === void 0 ? isRequired() : _ref2$templateName,
      props = _objectWithoutProperties(_ref2, ["templateName"]);

  return vFetch(_objectSpread2({
    path: "/API/export-template/".concat(templateName),
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/item/export-templates.html APIdoc}
 *
 * `DELTE /API/export-template/${templateName}`
 *
 * @function exporttemplate.getExportTemplate
 * @param {Object} obj
 * @param {string} obj.templateName
 * @returns {Promise<Object>}
 */


function removeExportTemplate(_ref3) {
  var _ref3$templateName = _ref3.templateName,
      templateName = _ref3$templateName === void 0 ? isRequired() : _ref3$templateName,
      props = _objectWithoutProperties(_ref3, ["templateName"]);

  return vFetch(_objectSpread2({
    path: "/API/export-template/".concat(templateName),
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/item/export-templates.html APIdoc}
 *
 * `PUT /API/export-template/${templateName}`
 *
 * @function exporttemplate.createExportTemplate
 * @param {Object} obj
 * @param {string} obj.templateName
 * @param {string} obj.exportTemplateDocument
 * @returns {Promise<Object>}
 */


function createExportTemplate(_ref4) {
  var _ref4$templateName = _ref4.templateName,
      templateName = _ref4$templateName === void 0 ? isRequired() : _ref4$templateName,
      exportTemplateDocument = _ref4.exportTemplateDocument,
      props = _objectWithoutProperties(_ref4, ["templateName", "exportTemplateDocument"]);

  return vFetch(_objectSpread2({
    path: "/API/export-template/".concat(templateName),
    method: 'PUT',
    body: exportTemplateDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/item/export-templates.html APIdoc}
 *
 * `PUT /API/export-template/${templateName}`
 *
 * @function exporttemplate.updateExportTemplate
 * @param {Object} obj
 * @param {string} obj.templateName
 * @param {string} obj.exportTemplateDocument
 * @returns {Promise<Object>}
 */


function updateExportTemplate(_ref5) {
  var _ref5$templateName = _ref5.templateName,
      templateName = _ref5$templateName === void 0 ? isRequired() : _ref5$templateName,
      exportTemplateDocument = _ref5.exportTemplateDocument,
      props = _objectWithoutProperties(_ref5, ["templateName", "exportTemplateDocument"]);

  return vFetch(_objectSpread2({
    path: "/API/export-template/".concat(templateName),
    method: 'PUT',
    body: exportTemplateDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/item/export-templates.html APIdoc}
 *
 * `GET /API/export-template/${templateName}/graph`
 *
 * @function exporttemplate.getExportTemplateGraph
 * @param {Object} obj
 * @param {string} obj.templateName
 * @returns {Promise<Object>}
 */


function getExportTemplateGraph(_ref6) {
  var _ref6$templateName = _ref6.templateName,
      templateName = _ref6$templateName === void 0 ? isRequired() : _ref6$templateName,
      _ref6$headers = _ref6.headers,
      propHeaders = _ref6$headers === void 0 ? {} : _ref6$headers,
      props = _objectWithoutProperties(_ref6, ["templateName", "headers"]);

  var path = "/API/export-template/".concat(templateName, "/graph");

  var headers = _objectSpread2({
    accept: 'image/png'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/item/export-templates.html APIdoc}
 *
 * `GET /API/export-template/${templateName}/graph/dot`
 *
 * @function exporttemplate.getExportTemplateGraphDot
 * @param {Object} obj
 * @param {string} obj.templateName
 * @returns {Promise<Object>}
 */


function getExportTemplateGraphDot(_ref7) {
  var _ref7$templateName = _ref7.templateName,
      templateName = _ref7$templateName === void 0 ? isRequired() : _ref7$templateName,
      _ref7$headers = _ref7.headers,
      propHeaders = _ref7$headers === void 0 ? {} : _ref7$headers,
      props = _objectWithoutProperties(_ref7, ["templateName", "headers"]);

  var path = "/API/export-template/".concat(templateName, "/graph/dot");

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/item/export-templates.html APIdoc}
 *
 * `POST /API/export-template/test`
 *
 * @function exporttemplate.createExportTemplateTest
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function createExportTemplateTest(_ref8) {
  var props = _extends({}, _ref8);

  var path = '/API/export-template/test';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/item/export-templates.html APIdoc}
 *
 * `PUT /API/export-template/test`
 *
 * @function exporttemplate.createExportTemplateTestRender
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function createExportTemplateTestRender(_ref9) {
  var props = _extends({}, _ref9);

  var path = '/API/export-template/test';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}

var exporttemplate = {
  listExportTemplete: listExportTemplete,
  getExportTemplate: getExportTemplate,
  removeExportTemplate: removeExportTemplate,
  createExportTemplate: createExportTemplate,
  updateExportTemplate: updateExportTemplate,
  getExportTemplateGraph: getExportTemplateGraph,
  getExportTemplateGraphDot: getExportTemplateGraphDot,
  createExportTemplateTest: createExportTemplateTest,
  createExportTemplateTestRender: createExportTemplateTestRender
};

function getEntityTypeUrl(entityType) {
  if (entityType === 'field-group') {
    return 'metadata-field/field-group';
  }

  return entityType;
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/external-id.html APIdoc}
 *
 * `GET /API/external-id`
 *
 * @function externalid.listExternalIdNamespace
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function listExternalIdNamespace() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/external-id';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/external-id.html APIdoc}
 *
 * `GET /API/external-id/${idName}`
 *
 * @function externalid.getExternalIdNamespace
 * @param {Object} obj
 * @param {string} obj.idName
 * @returns {Promise<Object>}
 */


function getExternalIdNamespace(_ref2) {
  var _ref2$idName = _ref2.idName,
      idName = _ref2$idName === void 0 ? isRequired() : _ref2$idName,
      props = _objectWithoutProperties(_ref2, ["idName"]);

  var path = "/API/external-id/".concat(idName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/external-id.html APIdoc}
 *
 * `PUT /API/external-id/${idName}`
 *
 * @function externalid.updateExternalIdNamespace
 * @param {Object} obj
 * @param {string} obj.idName
 * @param {Object} obj.externalIdentifierNamespaceDocument
 * @returns {Promise<Object>}
 */


function updateExternalIdNamespace(_ref3) {
  var _ref3$idName = _ref3.idName,
      idName = _ref3$idName === void 0 ? isRequired() : _ref3$idName,
      externalIdentifierNamespaceDocument = _ref3.externalIdentifierNamespaceDocument,
      props = _objectWithoutProperties(_ref3, ["idName", "externalIdentifierNamespaceDocument"]);

  var path = "/API/external-id/".concat(idName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: externalIdentifierNamespaceDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/external-id.html APIdoc}
 *
 * `DELETE /API/external-id/${idName}`
 *
 * @function externalid.removeExternalIdNamespace
 * @param {Object} obj
 * @param {string} obj.idName
 * @returns {Promise<Object>}
 */


function removeExternalIdNamespace(_ref4) {
  var _ref4$idName = _ref4.idName,
      idName = _ref4$idName === void 0 ? isRequired() : _ref4$idName,
      props = _objectWithoutProperties(_ref4, ["idName"]);

  var path = "/API/external-id/".concat(idName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/external-id.html APIdoc}
 *
 * `GET /API/${getEntityTypeUrl(entityType)}/${entityId}/external-id/`
 *
 * @function externalid.listExternalId
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function listExternalId(_ref5) {
  var _ref5$entityType = _ref5.entityType,
      entityType = _ref5$entityType === void 0 ? isRequired() : _ref5$entityType,
      _ref5$entityId = _ref5.entityId,
      entityId = _ref5$entityId === void 0 ? isRequired() : _ref5$entityId,
      props = _objectWithoutProperties(_ref5, ["entityType", "entityId"]);

  var path = "/API/".concat(getEntityTypeUrl(entityType), "/").concat(entityId, "/external-id/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/external-id.html APIdoc}
 *
 * `PUT /API/${getEntityTypeUrl(entityType)}/${entityId}/external-id/${externalId}`
 *
 * @function externalid.createExternalId
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {string} obj.externalId
 * @returns {Promise<Object>}
 */


function createExternalId(_ref6) {
  var _ref6$entityType = _ref6.entityType,
      entityType = _ref6$entityType === void 0 ? isRequired() : _ref6$entityType,
      _ref6$entityId = _ref6.entityId,
      entityId = _ref6$entityId === void 0 ? isRequired() : _ref6$entityId,
      _ref6$externalId = _ref6.externalId,
      externalId = _ref6$externalId === void 0 ? isRequired() : _ref6$externalId,
      props = _objectWithoutProperties(_ref6, ["entityType", "entityId", "externalId"]);

  var path = "/API/".concat(getEntityTypeUrl(entityType), "/").concat(entityId, "/external-id/").concat(externalId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/external-id.html APIdoc}
 *
 * `PUT /API/${getEntityTypeUrl(entityType)}/${entityId}/external-id/${externalId}`
 *
 * @function externalid.removeExternalId
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {string} obj.externalId
 * @returns {Promise<Object>}
 */


function removeExternalId(_ref7) {
  var _ref7$entityType = _ref7.entityType,
      entityType = _ref7$entityType === void 0 ? isRequired() : _ref7$entityType,
      _ref7$entityId = _ref7.entityId,
      entityId = _ref7$entityId === void 0 ? isRequired() : _ref7$entityId,
      _ref7$externalId = _ref7.externalId,
      externalId = _ref7$externalId === void 0 ? isRequired() : _ref7$externalId,
      props = _objectWithoutProperties(_ref7, ["entityType", "entityId", "externalId"]);

  var path = "/API/".concat(getEntityTypeUrl(entityType), "/").concat(entityId, "/external-id/").concat(externalId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/external-id.html APIdoc}
 *
 * `DELETE /API/${getEntityTypeUrl(entityType)}/${entityId}/external-id`
 *
 * @function externalid.removeAllExternalId
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function removeAllExternalId(_ref8) {
  var _ref8$entityType = _ref8.entityType,
      entityType = _ref8$entityType === void 0 ? isRequired() : _ref8$entityType,
      _ref8$entityId = _ref8.entityId,
      entityId = _ref8$entityId === void 0 ? isRequired() : _ref8$entityId,
      props = _objectWithoutProperties(_ref8, ["entityType", "entityId"]);

  var path = "/API/".concat(getEntityTypeUrl(entityType), "/").concat(entityId, "/external-id");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var externalid = {
  listExternalIdNamespace: listExternalIdNamespace,
  getExternalIdNamespace: getExternalIdNamespace,
  updateExternalIdNamespace: updateExternalIdNamespace,
  removeExternalIdNamespace: removeExternalIdNamespace,
  listExternalId: listExternalId,
  createExternalId: createExternalId,
  removeExternalId: removeExternalId,
  removeAllExternalId: removeAllExternalId
};

var getEntitySimpleMetadata = metadataApi.getSimpleMetadata;
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field-group.html APIdoc}
 *
 * `GET /API/metadata-field/field-group/`
 *
 * @function fieldgroup.listFieldGroup
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listFieldGroup() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/metadata-field/field-group/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field-group.html APIdoc}
 *
 * `GET /API/metadata-field/field-group/${groupName}/`
 *
 * @function fieldgroup.getFieldGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function getFieldGroup(_ref2) {
  var _ref2$groupName = _ref2.groupName,
      groupName = _ref2$groupName === void 0 ? isRequired() : _ref2$groupName,
      props = _objectWithoutProperties(_ref2, ["groupName"]);

  var path = "/API/metadata-field/field-group/".concat(groupName, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field-group.html APIdoc}
 *
 * `PUT /API/metadata-field/field-group/${groupName}`
 *
 * @function fieldgroup.updateFieldGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {Object} obj.metadataFieldGroupDocument
 * @returns {Promise<Object>}
 */


function updateFieldGroup(_ref3) {
  var _ref3$groupName = _ref3.groupName,
      groupName = _ref3$groupName === void 0 ? isRequired() : _ref3$groupName,
      metadataFieldGroupDocument = _ref3.metadataFieldGroupDocument,
      props = _objectWithoutProperties(_ref3, ["groupName", "metadataFieldGroupDocument"]);

  var path = "/API/metadata-field/field-group/".concat(groupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metadataFieldGroupDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field-group.html APIdoc}
 *
 * `DELETE /API/metadata-field/field-group/${groupName}`
 *
 * @function fieldgroup.removeFieldGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function removeFieldGroup(_ref4) {
  var _ref4$groupName = _ref4.groupName,
      groupName = _ref4$groupName === void 0 ? isRequired() : _ref4$groupName,
      props = _objectWithoutProperties(_ref4, ["groupName"]);

  var path = "/API/metadata-field/field-group/".concat(groupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field-group.html APIdoc}
 *
 * `PUT /API/metadata-field/field-group/${groupName}/${fieldName}`
 *
 * @function fieldgroup.updateFieldGroupField
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {string} obj.fieldName
 * @returns {Promise<Object>}
 */


function updateFieldGroupField(_ref5) {
  var _ref5$groupName = _ref5.groupName,
      groupName = _ref5$groupName === void 0 ? isRequired() : _ref5$groupName,
      _ref5$fieldName = _ref5.fieldName,
      fieldName = _ref5$fieldName === void 0 ? isRequired() : _ref5$fieldName,
      props = _objectWithoutProperties(_ref5, ["groupName", "fieldName"]);

  var path = "/API/metadata-field/field-group/".concat(groupName, "/").concat(fieldName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field-group.html APIdoc}
 *
 * `DELETE /API/metadata-field/field-group/${groupName}/${fieldName}`
 *
 * @function fieldgroup.removeFieldGroupField
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {string} obj.fieldName
 * @returns {Promise<Object>}
 */


function removeFieldGroupField(_ref6) {
  var _ref6$groupName = _ref6.groupName,
      groupName = _ref6$groupName === void 0 ? isRequired() : _ref6$groupName,
      _ref6$fieldName = _ref6.fieldName,
      fieldName = _ref6$fieldName === void 0 ? isRequired() : _ref6$fieldName,
      props = _objectWithoutProperties(_ref6, ["groupName", "fieldName"]);

  var path = "/API/metadata-field/field-group/".concat(groupName, "/").concat(fieldName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field-group.html APIdoc}
 *
 * `PUT /API/metadata-field/field-group/${groupName}/group/${childGroupName}`
 *
 * @function fieldgroup.updateFieldGroupChild
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {string} obj.childGroupName
 * @returns {Promise<Object>}
 */


function updateFieldGroupChild(_ref7) {
  var _ref7$groupName = _ref7.groupName,
      groupName = _ref7$groupName === void 0 ? isRequired() : _ref7$groupName,
      _ref7$childGroupName = _ref7.childGroupName,
      childGroupName = _ref7$childGroupName === void 0 ? isRequired() : _ref7$childGroupName,
      props = _objectWithoutProperties(_ref7, ["groupName", "childGroupName"]);

  var path = "/API/metadata-field/field-group/".concat(groupName, "/group/").concat(childGroupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field-group.html APIdoc}
 *
 * `DELETE /API/metadata-field/field-group/${groupName}/group/${childGroupName}`
 *
 * @function fieldgroup.removeFieldGroupChild
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {string} obj.childGroupName
 * @returns {Promise<Object>}
 */


function removeFieldGroupChild(_ref8) {
  var _ref8$groupName = _ref8.groupName,
      groupName = _ref8$groupName === void 0 ? isRequired() : _ref8$groupName,
      _ref8$childGroupName = _ref8.childGroupName,
      childGroupName = _ref8$childGroupName === void 0 ? isRequired() : _ref8$childGroupName,
      props = _objectWithoutProperties(_ref8, ["groupName", "childGroupName"]);

  var path = "/API/metadata-field/field-group/".concat(groupName, "/group/").concat(childGroupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field-group.html APIdoc}
 *
 * `PUT /API/metadata-field/field-group/`
 *
 * @function fieldgroup.searchFieldGroup
 * @param {Object} obj
 * @param {Object} obj.metadataFieldGroupSearchDocument
 * @returns {Promise<Object>}
 */


function searchFieldGroup(_ref9) {
  var metadataFieldGroupSearchDocument = _ref9.metadataFieldGroupSearchDocument,
      props = _objectWithoutProperties(_ref9, ["metadataFieldGroupSearchDocument"]);

  var path = '/API/metadata-field/field-group/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metadataFieldGroupSearchDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field-group.html APIdoc}
 *
 * `GET /API/metadata-field/field-group/metadata`
 *
 * @function fieldgroup.getSimpleMetadata
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function getSimpleMetadata$1(_ref10) {
  var _ref10$groupName = _ref10.groupName,
      groupName = _ref10$groupName === void 0 ? isRequired() : _ref10$groupName,
      props = _objectWithoutProperties(_ref10, ["groupName"]);

  var entityType = 'metadata-field/field-group';
  return getEntitySimpleMetadata(_objectSpread2({
    entityType: entityType,
    entityId: groupName
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field-group.html APIdoc}
 *
 * `GET /API/metadata-field/field-group/${groupName}/access`
 *
 * @function fieldgroup.listFieldGroupAccess
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function listFieldGroupAccess(_ref11) {
  var _ref11$groupName = _ref11.groupName,
      groupName = _ref11$groupName === void 0 ? isRequired() : _ref11$groupName,
      props = _objectWithoutProperties(_ref11, ["groupName"]);

  var path = "/API/metadata-field/field-group/".concat(groupName, "/access");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field-group.html APIdoc}
 *
 * `POST /API/metadata-field/field-group/${groupName}/access`
 *
 * @function fieldgroup.createFieldGroupAccess
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {Object} obj.metadataFieldAccessControlDocument
 * @returns {Promise<Object>}
 */


function createFieldGroupAccess(_ref12) {
  var _ref12$groupName = _ref12.groupName,
      groupName = _ref12$groupName === void 0 ? isRequired() : _ref12$groupName,
      _ref12$metadataFieldA = _ref12.metadataFieldAccessControlDocument,
      metadataFieldAccessControlDocument = _ref12$metadataFieldA === void 0 ? isRequired() : _ref12$metadataFieldA,
      props = _objectWithoutProperties(_ref12, ["groupName", "metadataFieldAccessControlDocument"]);

  var path = "/API/metadata-field/field-group/".concat(groupName, "/access");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: metadataFieldAccessControlDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field-group.html APIdoc}
 *
 * `DELETE /API/metadata-field/field-group/${groupName}/access/${accessId}`
 *
 * @function fieldgroup.removeFieldGroupAccess
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {string} obj.accessId
 * @returns {Promise<Object>}
 */


function removeFieldGroupAccess(_ref13) {
  var _ref13$groupName = _ref13.groupName,
      groupName = _ref13$groupName === void 0 ? isRequired() : _ref13$groupName,
      _ref13$accessId = _ref13.accessId,
      accessId = _ref13$accessId === void 0 ? isRequired() : _ref13$accessId,
      props = _objectWithoutProperties(_ref13, ["groupName", "accessId"]);

  var path = "/API/metadata-field/field-group/".concat(groupName, "/access/").concat(accessId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field-group.html APIdoc}
 *
 * `GET /API/metadata-field/field-group/merged-access`
 *
 * @function fieldgroup.listFieldGroupMergedAccess
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function listFieldGroupMergedAccess() {
  var _ref14 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref14);

  var path = '/API/metadata-field/field-group/merged-access';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field-group.html APIdoc}
 *
 * `GET /API/metadata-field/field-group/${groupName}/merged-access`
 *
 * @function fieldgroup.getFieldGroupMergedAccess
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function getFieldGroupMergedAccess() {
  var _ref15 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref15$groupName = _ref15.groupName,
      groupName = _ref15$groupName === void 0 ? isRequired() : _ref15$groupName,
      props = _objectWithoutProperties(_ref15, ["groupName"]);

  var path = "/API/metadata-field/field-group/".concat(groupName, "/merged-access");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}

var fieldgroup = {
  listFieldGroup: listFieldGroup,
  getFieldGroup: getFieldGroup,
  updateFieldGroup: updateFieldGroup,
  removeFieldGroup: removeFieldGroup,
  updateFieldGroupField: updateFieldGroupField,
  removeFieldGroupField: removeFieldGroupField,
  updateFieldGroupChild: updateFieldGroupChild,
  removeFieldGroupChild: removeFieldGroupChild,
  searchFieldGroup: searchFieldGroup,
  getSimpleMetadata: getSimpleMetadata$1,
  listFieldGroupAccess: listFieldGroupAccess,
  createFieldGroupAccess: createFieldGroupAccess,
  removeFieldGroupAccess: removeFieldGroupAccess,
  listFieldGroupMergedAccess: listFieldGroupMergedAccess,
  getFieldGroupMergedAccess: getFieldGroupMergedAccess
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `GET /API/storage/file/`
 *
 * @function file.listFile
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listFile() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/storage/file/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `GET /API/storage/${storageId}/file/`
 *
 * @function file.listFileStorage
 * @param {Object} obj
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function listFileStorage() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$storageId = _ref2.storageId,
      storageId = _ref2$storageId === void 0 ? isRequired() : _ref2$storageId,
      props = _objectWithoutProperties(_ref2, ["storageId"]);

  var path = "/API/storage/".concat(storageId, "/file/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `GET /API/storage/file/importable/`
 *
 * @function file.listFileImportable
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function listFileImportable() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref3);

  var path = '/API/storage/file/importable/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `GET `
 *
 * @function file.listFileStorageImportable
 * @param {Object} obj
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function listFileStorageImportable() {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref4$storageId = _ref4.storageId,
      storageId = _ref4$storageId === void 0 ? isRequired() : _ref4$storageId,
      props = _objectWithoutProperties(_ref4, ["storageId"]);

  var path = "/API/storage/".concat(storageId, "/file/importable/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `GET /API/storage/file/${fileId}/`
 *
 * @function file.getFile
 * @param {Object} obj
 * @param {string} obj.fileId
 * @returns {Promise<Object>}
 */


function getFile(_ref5) {
  var _ref5$fileId = _ref5.fileId,
      fileId = _ref5$fileId === void 0 ? isRequired() : _ref5$fileId,
      props = _objectWithoutProperties(_ref5, ["fileId"]);

  var path = "/API/storage/file/".concat(fileId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `POST /API/storage/${storageId}/file/data`
 *
 * @function file.createFileRaw
 * @param {Object} obj
 * @param {string} obj.storageId
 * @param {Object} obj.file
 * @returns {Promise<Object>}
 */


function createFileRaw(_ref6) {
  var _ref6$storageId = _ref6.storageId,
      storageId = _ref6$storageId === void 0 ? isRequired() : _ref6$storageId,
      _ref6$file = _ref6.file,
      file = _ref6$file === void 0 ? isRequired() : _ref6$file,
      _ref6$headers = _ref6.headers,
      propHeaders = _ref6$headers === void 0 ? {} : _ref6$headers,
      props = _objectWithoutProperties(_ref6, ["storageId", "file", "headers"]);

  var headers = _objectSpread2({
    contentType: 'application/octet-stream'
  }, propHeaders);

  var path = "/API/storage/".concat(storageId, "/file/data");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: file,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `GET /API/storage/file/${fileId}/data`
 *
 * @function file.getFileRaw
 * @param {Object} obj
 * @param {string} obj.fileId
 * @returns {Promise<Object>}
 */


function getFileRaw(_ref7) {
  var _ref7$fileId = _ref7.fileId,
      fileId = _ref7$fileId === void 0 ? isRequired() : _ref7$fileId,
      _ref7$headers = _ref7.headers,
      propHeaders = _ref7$headers === void 0 ? {} : _ref7$headers,
      props = _objectWithoutProperties(_ref7, ["fileId", "headers"]);

  var headers = _objectSpread2({
    accept: 'application/octet-stream'
  }, propHeaders);

  var path = "/API/storage/file/".concat(fileId, "/data");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers,
    responseType: 'blob'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `POST /API/storage/file/${fileId}/data/`
 *
 * @function file.updateFileRaw
 * @param {Object} obj
 * @param {string} obj.fileId
 * @param {Object} obj.file
 * @returns {Promise<Object>}
 */


function updateFileRaw(_ref8) {
  var _ref8$fileId = _ref8.fileId,
      fileId = _ref8$fileId === void 0 ? isRequired() : _ref8$fileId,
      file = _ref8.file,
      _ref8$headers = _ref8.headers,
      propHeaders = _ref8$headers === void 0 ? {} : _ref8$headers,
      props = _objectWithoutProperties(_ref8, ["fileId", "file", "headers"]);

  var headers = _objectSpread2({
    contentType: 'application/octet-stream'
  }, propHeaders);

  var path = "/API/storage/file/".concat(fileId, "/data/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: file,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `POST /API/storage/file/${fileId}/import/`
 *
 * @function file.createFileImport
 * @param {Object} obj
 * @param {string} obj.fileId
 * @returns {Promise<Object>}
 */


function createFileImport(_ref9) {
  var _ref9$fileId = _ref9.fileId,
      fileId = _ref9$fileId === void 0 ? isRequired() : _ref9$fileId,
      metadataDocument = _ref9.metadataDocument,
      props = _objectWithoutProperties(_ref9, ["fileId", "metadataDocument"]);

  var path = "/API/storage/file/".concat(fileId, "/import/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `POST /API/storage/file/${fileId}/import/assetmap`
 *
 * @function file.createFileImportAssetMap
 * @param {Object} obj
 * @param {string} obj.fileId
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */


function createFileImportAssetMap(_ref10) {
  var _ref10$fileId = _ref10.fileId,
      fileId = _ref10$fileId === void 0 ? isRequired() : _ref10$fileId,
      metadataDocument = _ref10.metadataDocument,
      props = _objectWithoutProperties(_ref10, ["fileId", "metadataDocument"]);

  var path = "/API/storage/file/".concat(fileId, "/import/assetmap");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `POST /API/storage/${storageId}/file/import/assetmap`
 *
 * @function file.createFilePathImportAssetMap
 * @param {Object} obj
 * @param {string} obj.storageId
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */


function createFilePathImportAssetMap(_ref11) {
  var _ref11$storageId = _ref11.storageId,
      storageId = _ref11$storageId === void 0 ? isRequired() : _ref11$storageId,
      metadataDocument = _ref11.metadataDocument,
      props = _objectWithoutProperties(_ref11, ["storageId", "metadataDocument"]);

  var path = "/API/storage/".concat(storageId, "/file/import/assetmap");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `POST /API/storage/${storageId}/import/`
 *
 * @function file.createFileImportPath
 * @param {Object} obj
 * @param {string} obj.storageId
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */


function createFileImportPath(_ref12) {
  var _ref12$storageId = _ref12.storageId,
      storageId = _ref12$storageId === void 0 ? isRequired() : _ref12$storageId,
      metadataDocument = _ref12.metadataDocument,
      props = _objectWithoutProperties(_ref12, ["storageId", "metadataDocument"]);

  var path = "/API/storage/".concat(storageId, "/import/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `POST /API/storage/file/${fileId}/storage/${targetStorageId}/`
 *
 * @function file.createFileMove
 * @param {Object} obj
 * @param {string} obj.fileId
 * @param {string} obj.targetStorageId
 * @returns {Promise<Object>}
 */


function createFileMove(_ref13) {
  var _ref13$fileId = _ref13.fileId,
      fileId = _ref13$fileId === void 0 ? isRequired() : _ref13$fileId,
      _ref13$targetStorageI = _ref13.targetStorageId,
      targetStorageId = _ref13$targetStorageI === void 0 ? isRequired() : _ref13$targetStorageI,
      props = _objectWithoutProperties(_ref13, ["fileId", "targetStorageId"]);

  var path = "/API/storage/file/".concat(fileId, "/storage/").concat(targetStorageId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `DELETE /API/storage/file/${fileId}`
 *
 * @function file.removeFile
 * @param {Object} obj
 * @param {string} obj.fileId
 * @returns {Promise<Object>}
 */


function removeFile(_ref14) {
  var _ref14$fileId = _ref14.fileId,
      fileId = _ref14$fileId === void 0 ? isRequired() : _ref14$fileId,
      props = _objectWithoutProperties(_ref14, ["fileId"]);

  var path = "/API/storage/file/".concat(fileId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `POST /API/storage/${storageId}/file/`
 *
 * @function file.createFileEntity
 * @param {Object} obj
 * @param {string} obj.storageId
 * @param {Object} obj.fileDocument
 * @returns {Promise<Object>}
 */


function createFileEntity(_ref15) {
  var _ref15$storageId = _ref15.storageId,
      storageId = _ref15$storageId === void 0 ? isRequired() : _ref15$storageId,
      fileDocument = _ref15.fileDocument,
      props = _objectWithoutProperties(_ref15, ["storageId", "fileDocument"]);

  var path = "/API/storage/".concat(storageId, "/file/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: fileDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `DELETE /API/storage/file/${fileId}/entity`
 *
 * @function file.removeFileEntity
 * @param {Object} obj
 * @param {string} obj.fileId
 * @returns {Promise<Object>}
 */


function removeFileEntity(_ref16) {
  var _ref16$fileId = _ref16.fileId,
      fileId = _ref16$fileId === void 0 ? isRequired() : _ref16$fileId,
      props = _objectWithoutProperties(_ref16, ["fileId"]);

  var path = "/API/storage/file/".concat(fileId, "/entity");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `POST /API/storage/file/${fileId}/path/`
 *
 * @function file.createFilePath
 * @param {Object} obj
 * @param {string} obj.fileId
 * @returns {Promise<Object>}
 */


function createFilePath(_ref17) {
  var _ref17$fileId = _ref17.fileId,
      fileId = _ref17$fileId === void 0 ? isRequired() : _ref17$fileId,
      props = _objectWithoutProperties(_ref17, ["fileId"]);

  var path = "/API/storage/file/".concat(fileId, "/path/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `PUT /API/storage/file/${fileId}/state/${state}`
 *
 * @function file.updateFileState
 * @param {Object} obj
 * @param {string} obj.fileId
 * @param {string} obj.state
 * @returns {Promise<Object>}
 */


function updateFileState(_ref18) {
  var _ref18$fileId = _ref18.fileId,
      fileId = _ref18$fileId === void 0 ? isRequired() : _ref18$fileId,
      _ref18$state = _ref18.state,
      state = _ref18$state === void 0 ? isRequired() : _ref18$state,
      props = _objectWithoutProperties(_ref18, ["fileId", "state"]);

  var path = "/API/storage/file/".concat(fileId, "/state/").concat(state);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html#set-file-hash APIdoc}
 *
 * `PUT /API/storage/file/${fileId}/hash/${hash}`
 *
 * @function file.updateFileHash
 * @param {Object} obj
 * @param {string} obj.fileId
 * @param {string} obj.hash
 * @returns {Promise<Object>}
 */


function updateFileHash(_ref19) {
  var _ref19$fileId = _ref19.fileId,
      fileId = _ref19$fileId === void 0 ? isRequired() : _ref19$fileId,
      _ref19$hash = _ref19.hash,
      hash = _ref19$hash === void 0 ? isRequired() : _ref19$hash,
      props = _objectWithoutProperties(_ref19, ["fileId", "hash"]);

  var path = "/API/storage/file/".concat(fileId, "/hash/").concat(hash);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `PUT /API/storage/file/${fileId}/abandon`
 *
 * @function file.abandonFile
 * @param {Object} obj
 * @param {string} obj.fileId
 * @returns {Promise<Object>}
 */


function abandonFile(_ref20) {
  var _ref20$fileId = _ref20.fileId,
      fileId = _ref20$fileId === void 0 ? isRequired() : _ref20$fileId,
      props = _objectWithoutProperties(_ref20, ["fileId"]);

  var path = "/API/storage/file/".concat(fileId, "/abandon");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `PUT /API/storage/file/${fileId}/re-index`
 *
 * @function file.reindexFile
 * @param {Object} obj
 * @param {string} obj.fileId
 * @returns {Promise<Object>}
 */


function reindexFile(_ref21) {
  var _ref21$fileId = _ref21.fileId,
      fileId = _ref21$fileId === void 0 ? isRequired() : _ref21$fileId,
      props = _objectWithoutProperties(_ref21, ["fileId"]);

  var path = "/API/storage/file/".concat(fileId, "/re-index");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html APIdoc}
 *
 * `POST /API/storage/file/${fileId}/uri`
 *
 * @function file.createFileTemporaryCredentials
 * @param {Object} obj
 * @param {string} obj.fileId
 * @returns {Promise<Object>}
 */


function createFileTemporaryCredentials(_ref22) {
  var _ref22$fileId = _ref22.fileId,
      fileId = _ref22$fileId === void 0 ? isRequired() : _ref22$fileId,
      props = _objectWithoutProperties(_ref22, ["fileId"]);

  var path = "/API/storage/file/".concat(fileId, "/uri");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html#perform-shape-deduction-on-a-file APIdoc}
 *
 * `POST /API/storage/file/${fileId}/analyze`
 *
 * @function file.analyzeFile
 * @param {Object} obj
 * @param {string} obj.fileId
 * @returns {Promise<Object>}
 */


function analyzeFile(_ref23) {
  var _ref23$fileId = _ref23.fileId,
      fileId = _ref23$fileId === void 0 ? isRequired() : _ref23$fileId,
      props = _objectWithoutProperties(_ref23, ["fileId"]);

  var path = "/API/storage/file/".concat(fileId, "/analyze");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html#perform-shape-deduction-on-an-imf-package APIdoc}
 *
 * `POST /API/storage/file/${fileId}/analyze/imp`
 *
 * @function file.analyzeFileImp
 * @param {Object} obj
 * @param {string} obj.fileId
 * @returns {Promise<Object>}
 */


function analyzeFileImp(_ref24) {
  var _ref24$fileId = _ref24.fileId,
      fileId = _ref24$fileId === void 0 ? isRequired() : _ref24$fileId,
      props = _objectWithoutProperties(_ref24, ["fileId"]);

  var path = "/API/storage/file/".concat(fileId, "/analyze/imp");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/file.html#get-shapes-for-a-file APIdoc}
 *
 * `GET /API/storage/file/${fileId}/shape`
 *
 * @function file.listFileShapes
 * @param {Object} obj
 * @param {string} obj.fileId
 * @returns {Promise<Object>}
 */


function listFileShapes(_ref25) {
  var _ref25$fileId = _ref25.fileId,
      fileId = _ref25$fileId === void 0 ? isRequired() : _ref25$fileId,
      props = _objectWithoutProperties(_ref25, ["fileId"]);

  var path = "/API/storage/file/".concat(fileId, "/shape");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}

var fileApi = {
  listFile: listFile,
  listFileStorage: listFileStorage,
  listFileImportable: listFileImportable,
  listFileStorageImportable: listFileStorageImportable,
  getFile: getFile,
  createFileRaw: createFileRaw,
  getFileRaw: getFileRaw,
  updateFileRaw: updateFileRaw,
  createFileImport: createFileImport,
  createFileImportAssetMap: createFileImportAssetMap,
  createFilePathImportAssetMap: createFilePathImportAssetMap,
  createFileImportPath: createFileImportPath,
  createFileMove: createFileMove,
  removeFile: removeFile,
  createFileEntity: createFileEntity,
  removeFileEntity: removeFileEntity,
  createFilePath: createFilePath,
  updateFileState: updateFileState,
  updateFileHash: updateFileHash,
  abandonFile: abandonFile,
  reindexFile: reindexFile,
  createFileTemporaryCredentials: createFileTemporaryCredentials,
  analyzeFile: analyzeFile,
  analyzeFileImp: analyzeFileImp,
  listFileShapes: listFileShapes
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html APIdoc}
 *
 * `GET /API/group/`
 *
 * @function group.listGroup
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listGroup() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/group/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html APIdoc}
 *
 * `GET /API/group/${groupName}`
 *
 * @function group.getGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function getGroup(_ref2) {
  var _ref2$groupName = _ref2.groupName,
      groupName = _ref2$groupName === void 0 ? isRequired() : _ref2$groupName,
      props = _objectWithoutProperties(_ref2, ["groupName"]);

  var path = "/API/group/".concat(groupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html APIdoc}
 *
 * `PUT /API/group/${groupName}/`
 *
 * @function group.updateGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {Object} obj.groupDocument
 * @returns {Promise<Object>}
 */


function updateGroup(_ref3) {
  var _ref3$groupName = _ref3.groupName,
      groupName = _ref3$groupName === void 0 ? isRequired() : _ref3$groupName,
      groupDocument = _ref3.groupDocument,
      props = _objectWithoutProperties(_ref3, ["groupName", "groupDocument"]);

  var path = "/API/group/".concat(groupName, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: groupDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html APIdoc}
 *
 * `DELETE /API/group/${groupName}`
 *
 * @function group.removeGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function removeGroup(_ref4) {
  var _ref4$groupName = _ref4.groupName,
      groupName = _ref4$groupName === void 0 ? isRequired() : _ref4$groupName,
      props = _objectWithoutProperties(_ref4, ["groupName"]);

  var path = "/API/group/".concat(groupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html#delete-multiple-groups APIdoc}
 *
 * `DELETE /API/group/`
 *
 * @function group.removeGroupList
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function removeGroupList(_ref5) {
  var props = _extends({}, _ref5);

  var path = '/API/group/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html APIdoc}
 *
 * `PUT /API/group/`
 *
 * @function group.searchGroup
 * @param {Object} obj
 * @param {Object} obj.groupSearchDocument
 * @returns {Promise<Object>}
 */


function searchGroup(_ref6) {
  var groupSearchDocument = _ref6.groupSearchDocument,
      props = _objectWithoutProperties(_ref6, ["groupSearchDocument"]);

  var path = '/API/group/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: groupSearchDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html APIdoc}
 *
 * `GET API/group/${groupName}/role`
 *
 * @function group.getGroupRoleStatus
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function getGroupRoleStatus(_ref7) {
  var _ref7$groupName = _ref7.groupName,
      groupName = _ref7$groupName === void 0 ? isRequired() : _ref7$groupName,
      _ref7$headers = _ref7.headers,
      propHeaders = _ref7$headers === void 0 ? {} : _ref7$headers,
      props = _objectWithoutProperties(_ref7, ["groupName", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  var path = "/API/group/".concat(groupName, "/role");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html APIdoc}
 *
 * `GET /API/group/${groupName}/description`
 *
 * @function group.getGroupDescription
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function getGroupDescription(_ref8) {
  var _ref8$groupName = _ref8.groupName,
      groupName = _ref8$groupName === void 0 ? isRequired() : _ref8$groupName,
      _ref8$headers = _ref8.headers,
      propHeaders = _ref8$headers === void 0 ? {} : _ref8$headers,
      props = _objectWithoutProperties(_ref8, ["groupName", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  var path = "/API/group/".concat(groupName, "/description");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html APIdoc}
 *
 * `PUT /API/group/${groupName}/description`
 *
 * @function group.updateGroupDescription
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {string} obj.description
 * @returns {Promise<Object>}
 */


function updateGroupDescription(_ref9) {
  var _ref9$groupName = _ref9.groupName,
      groupName = _ref9$groupName === void 0 ? isRequired() : _ref9$groupName,
      description = _ref9.description,
      _ref9$headers = _ref9.headers,
      propHeaders = _ref9$headers === void 0 ? {} : _ref9$headers,
      props = _objectWithoutProperties(_ref9, ["groupName", "description", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain',
    contentType: 'text/plain'
  }, propHeaders);

  var path = "/API/group/".concat(groupName, "/description");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: description,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html APIdoc}
 *
 * `GET /API/group/${groupName}/parents/`
 *
 * @function group.getGroupParents
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function getGroupParents(_ref10) {
  var _ref10$groupName = _ref10.groupName,
      groupName = _ref10$groupName === void 0 ? isRequired() : _ref10$groupName,
      _ref10$headers = _ref10.headers,
      propHeaders = _ref10$headers === void 0 ? {} : _ref10$headers,
      props = _objectWithoutProperties(_ref10, ["groupName", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  var path = "/API/group/".concat(groupName, "/parents/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html APIdoc}
 *
 * `GET /API/group/${groupName}/children/`
 *
 * @function group.getGroupChildren
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function getGroupChildren(_ref11) {
  var _ref11$groupName = _ref11.groupName,
      groupName = _ref11$groupName === void 0 ? isRequired() : _ref11$groupName,
      _ref11$headers = _ref11.headers,
      propHeaders = _ref11$headers === void 0 ? {} : _ref11$headers,
      props = _objectWithoutProperties(_ref11, ["groupName", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  var path = "/API/group/".concat(groupName, "/children/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html APIdoc}
 *
 * `PUT /API/group/${groupName}/group/${childGroupName}`
 *
 * @function group.addGroupChildren
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {string} obj.childGroupName
 * @returns {Promise<Object>}
 */


function addGroupChildren(_ref12) {
  var _ref12$groupName = _ref12.groupName,
      groupName = _ref12$groupName === void 0 ? isRequired() : _ref12$groupName,
      _ref12$childGroupName = _ref12.childGroupName,
      childGroupName = _ref12$childGroupName === void 0 ? isRequired() : _ref12$childGroupName,
      props = _objectWithoutProperties(_ref12, ["groupName", "childGroupName"]);

  var path = "/API/group/".concat(groupName, "/group/").concat(childGroupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html APIdoc}
 *
 * `DELETE /API/group/${groupName}/group/${childGroupName}`
 *
 * @function group.removeGroupChildren
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {string} obj.childGroupName
 * @returns {Promise<Object>}
 */


function removeGroupChildren(_ref13) {
  var _ref13$groupName = _ref13.groupName,
      groupName = _ref13$groupName === void 0 ? isRequired() : _ref13$groupName,
      _ref13$childGroupName = _ref13.childGroupName,
      childGroupName = _ref13$childGroupName === void 0 ? isRequired() : _ref13$childGroupName,
      props = _objectWithoutProperties(_ref13, ["groupName", "childGroupName"]);

  var path = "/API/group/".concat(groupName, "/group/").concat(childGroupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html APIdoc}
 *
 * `GET /API/group/${groupName}/users/`
 *
 * @function group.getGroupUser
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function getGroupUser(_ref14) {
  var _ref14$groupName = _ref14.groupName,
      groupName = _ref14$groupName === void 0 ? isRequired() : _ref14$groupName,
      _ref14$headers = _ref14.headers,
      propHeaders = _ref14$headers === void 0 ? {} : _ref14$headers,
      props = _objectWithoutProperties(_ref14, ["groupName", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  var path = "/API/group/".concat(groupName, "/users/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html APIdoc}
 *
 * `PUT /API/group/${groupName}/user/${userName}`
 *
 * @function group.addGroupUser
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function addGroupUser(_ref15) {
  var _ref15$groupName = _ref15.groupName,
      groupName = _ref15$groupName === void 0 ? isRequired() : _ref15$groupName,
      _ref15$userName = _ref15.userName,
      userName = _ref15$userName === void 0 ? isRequired() : _ref15$userName,
      props = _objectWithoutProperties(_ref15, ["groupName", "userName"]);

  var path = "/API/group/".concat(groupName, "/user/").concat(userName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/group.html APIdoc}
 *
 * `DELETE /API/group/${groupName}/user/${userName}`
 *
 * @function group.removeGroupUser
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function removeGroupUser(_ref16) {
  var _ref16$groupName = _ref16.groupName,
      groupName = _ref16$groupName === void 0 ? isRequired() : _ref16$groupName,
      _ref16$userName = _ref16.userName,
      userName = _ref16$userName === void 0 ? isRequired() : _ref16$userName,
      props = _objectWithoutProperties(_ref16, ["groupName", "userName"]);

  var path = "/API/group/".concat(groupName, "/user/").concat(userName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var group = {
  listGroup: listGroup,
  getGroup: getGroup,
  updateGroup: updateGroup,
  removeGroup: removeGroup,
  removeGroupList: removeGroupList,
  searchGroup: searchGroup,
  getGroupRoleStatus: getGroupRoleStatus,
  getGroupDescription: getGroupDescription,
  updateGroupDescription: updateGroupDescription,
  getGroupParents: getGroupParents,
  getGroupChildren: getGroupChildren,
  addGroupChildren: addGroupChildren,
  removeGroupChildren: removeGroupChildren,
  getGroupUser: getGroupUser,
  addGroupUser: addGroupUser,
  removeGroupUser: removeGroupUser
};

var updateEntityMetadata$1 = metadataApi.updateEntityMetadata,
    getEntityMetadata$1 = metadataApi.getEntityMetadata;
var listEntityMetadataLock$2 = metadataLockApi.listEntityMetadataLock,
    createEntityMetadataLock$2 = metadataLockApi.createEntityMetadataLock,
    getEntityMetadataLock$2 = metadataLockApi.getEntityMetadataLock,
    updateEntityMetadataLock$2 = metadataLockApi.updateEntityMetadataLock,
    removeEntityMetadataLock$2 = metadataLockApi.removeEntityMetadataLock;
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `GET /API/item/`
 *
 * @function item.listItem
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listItem() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/item/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `GET /API/item/${itemId}/`
 *
 * @function item.getItem
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function getItem(_ref2) {
  var _ref2$itemId = _ref2.itemId,
      itemId = _ref2$itemId === void 0 ? isRequired() : _ref2$itemId,
      props = _objectWithoutProperties(_ref2, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `GET /API/item/${itemId}/uri`
 *
 * @function item.getItemUri
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function getItemUri(_ref3) {
  var _ref3$itemId = _ref3.itemId,
      itemId = _ref3$itemId === void 0 ? isRequired() : _ref3$itemId,
      props = _objectWithoutProperties(_ref3, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/uri");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/`
 *
 * @function item.removeItem
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function removeItem(_ref4) {
  var _ref4$itemId = _ref4.itemId,
      itemId = _ref4$itemId === void 0 ? isRequired() : _ref4$itemId,
      props = _objectWithoutProperties(_ref4, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `DELETE /API/item/`
 *
 * @function item.removeItemList
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function removeItemList() {
  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref5);

  var path = '/API/item/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `PUT /API/item/`
 *
 * @function item.searchItem
 * @param {Object} obj
 * @param {Object} obj.itemSearchDocument
 * @returns {Promise<Object>}
 */


function searchItem() {
  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref6$itemSearchDocum = _ref6.itemSearchDocument,
      itemSearchDocument = _ref6$itemSearchDocum === void 0 ? {} : _ref6$itemSearchDocum,
      props = _objectWithoutProperties(_ref6, ["itemSearchDocument"]);

  return vFetch(_objectSpread2({
    path: '/API/item/',
    method: 'PUT',
    body: itemSearchDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `PUT /API/item/metadata`
 *
 * @function item.updateItemMetadata
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */


function updateItemMetadata(_ref7) {
  var _ref7$itemId = _ref7.itemId,
      itemId = _ref7$itemId === void 0 ? isRequired() : _ref7$itemId,
      metadataDocument = _ref7.metadataDocument,
      props = _objectWithoutProperties(_ref7, ["itemId", "metadataDocument"]);

  return updateEntityMetadata$1(_objectSpread2({
    entity: 'item',
    entityId: itemId,
    metadataDocument: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `GET /API/item/metadata`
 *
 * @function item.getItemMetadata
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function getItemMetadata(_ref8) {
  var _ref8$itemId = _ref8.itemId,
      itemId = _ref8$itemId === void 0 ? isRequired() : _ref8$itemId,
      props = _objectWithoutProperties(_ref8, ["itemId"]);

  return getEntityMetadata$1(_objectSpread2({
    entity: 'item',
    entityId: itemId
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `POST /API/item/${itemId}/thumbnail`
 *
 * @function item.createThumbnail
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function createThumbnail(_ref9) {
  var _ref9$itemId = _ref9.itemId,
      itemId = _ref9$itemId === void 0 ? isRequired() : _ref9$itemId,
      props = _objectWithoutProperties(_ref9, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/thumbnail");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/transcode.html#transcode-an-item APIdoc}
 *
 * `POST /API/item/${itemId}/transcode`
 *
 * @function item.createTranscode
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function createTranscode(_ref10) {
  var _ref10$itemId = _ref10.itemId,
      itemId = _ref10$itemId === void 0 ? isRequired() : _ref10$itemId,
      props = _objectWithoutProperties(_ref10, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/transcode");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `POST /API/item/${itemId}/export`
 *
 * @function item.createExport
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function createExport(_ref11) {
  var _ref11$itemId = _ref11.itemId,
      itemId = _ref11$itemId === void 0 ? isRequired() : _ref11$itemId,
      props = _objectWithoutProperties(_ref11, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/export");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `POST /API/item/${itemId}/export/imp`
 *
 * @function item.createExportImp
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function createExportImp(_ref12) {
  var _ref12$itemId = _ref12.itemId,
      itemId = _ref12$itemId === void 0 ? isRequired() : _ref12$itemId,
      props = _objectWithoutProperties(_ref12, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/export/imp");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `GET /API/item/${itemId}/relation`
 *
 * @function item.listItemRelation
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function listItemRelation(_ref13) {
  var _ref13$itemId = _ref13.itemId,
      itemId = _ref13$itemId === void 0 ? isRequired() : _ref13$itemId,
      props = _objectWithoutProperties(_ref13, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/relation");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `POST /API/item/${itemId}/relation/${relationItemId}`
 *
 * @function item.createItemRelation
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.relationItemId
 * @returns {Promise<Object>}
 */


function createItemRelation(_ref14) {
  var _ref14$itemId = _ref14.itemId,
      itemId = _ref14$itemId === void 0 ? isRequired() : _ref14$itemId,
      _ref14$relationItemId = _ref14.relationItemId,
      relationItemId = _ref14$relationItemId === void 0 ? isRequired() : _ref14$relationItemId,
      props = _objectWithoutProperties(_ref14, ["itemId", "relationItemId"]);

  var path = "/API/item/".concat(itemId, "/relation/").concat(relationItemId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/relations.html#create-multiple-item-relations APIdoc}
 *
 * `POST /API/relation/`
 *
 * @function item.createItemRelationList
 * @param {Object} obj
 * @param {string} obj.itemRelationListDocument
 * @returns {Promise<Object>}
 */


function createItemRelationList(_ref15) {
  var _ref15$itemRelationLi = _ref15.itemRelationListDocument,
      itemRelationListDocument = _ref15$itemRelationLi === void 0 ? isRequired() : _ref15$itemRelationLi,
      props = _objectWithoutProperties(_ref15, ["itemRelationListDocument"]);

  var path = '/API/relation/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: itemRelationListDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/relation/${relationItemId}`
 *
 * @function item.removeItemRelation
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.relationItemId
 * @returns {Promise<Object>}
 */


function removeItemRelation(_ref16) {
  var _ref16$itemId = _ref16.itemId,
      itemId = _ref16$itemId === void 0 ? isRequired() : _ref16$itemId,
      _ref16$relationItemId = _ref16.relationItemId,
      relationItemId = _ref16$relationItemId === void 0 ? isRequired() : _ref16$relationItemId,
      props = _objectWithoutProperties(_ref16, ["itemId", "relationItemId"]);

  var path = "/API/item/".concat(itemId, "/relation/").concat(relationItemId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/relation/`
 *
 * @function item.removeAllItemRelation
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function removeAllItemRelation(_ref17) {
  var _ref17$itemId = _ref17.itemId,
      itemId = _ref17$itemId === void 0 ? isRequired() : _ref17$itemId,
      props = _objectWithoutProperties(_ref17, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/relation/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `POST /API/relation`
 *
 * @function item.createRelation
 * @param {Object} obj
 * @param {Object} obj.itemRelationListDocument
 * @returns {Promise<Object>}
 */


function createRelation(_ref18) {
  var _ref18$itemRelationLi = _ref18.itemRelationListDocument,
      itemRelationListDocument = _ref18$itemRelationLi === void 0 ? isRequired() : _ref18$itemRelationLi,
      props = _objectWithoutProperties(_ref18, ["itemRelationListDocument"]);

  var path = '/API/relation';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: itemRelationListDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `GET /API/relation/${relationId}/`
 *
 * @function item.getRelation
 * @param {Object} obj
 * @param {string} obj.relationId
 * @returns {Promise<Object>}
 */


function getRelation(_ref19) {
  var _ref19$relationId = _ref19.relationId,
      relationId = _ref19$relationId === void 0 ? isRequired() : _ref19$relationId,
      props = _objectWithoutProperties(_ref19, ["relationId"]);

  var path = "/API/relation/".concat(relationId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `PUT /API/relation/${relationId}/`
 *
 * @function item.updateRelation
 * @param {Object} obj
 * @param {string} obj.relationId
 * @returns {Promise<Object>}
 */


function updateRelation(_ref20) {
  var _ref20$relationId = _ref20.relationId,
      relationId = _ref20$relationId === void 0 ? isRequired() : _ref20$relationId,
      props = _objectWithoutProperties(_ref20, ["relationId"]);

  var path = "/API/relation/".concat(relationId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `DELETE /API/relation/${relationId}/`
 *
 * @function item.removeRelation
 * @param {Object} obj
 * @param {string} obj.relationId
 * @returns {Promise<Object>}
 */


function removeRelation(_ref21) {
  var _ref21$relationId = _ref21.relationId,
      relationId = _ref21$relationId === void 0 ? isRequired() : _ref21$relationId,
      props = _objectWithoutProperties(_ref21, ["relationId"]);

  var path = "/API/relation/".concat(relationId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `GET /API/item/history`
 *
 * @function item.getItemSearchHistory
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getItemSearchHistory() {
  var _ref22 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref22);

  var path = '/API/item/history';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `PUT /API/item/${itemId}/re-index`
 *
 * @function item.reindexItem
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function reindexItem(_ref23) {
  var _ref23$itemId = _ref23.itemId,
      itemId = _ref23$itemId === void 0 ? isRequired() : _ref23$itemId,
      props = _objectWithoutProperties(_ref23, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/re-index");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `POST /API/item/list`
 *
 * @function item.createItemList
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function createItemList() {
  var _ref24 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref24);

  var path = '/API/item/list';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `GET /API/item/${itemId}/collections`
 *
 * @function item.listItemCollection
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function listItemCollection(_ref25) {
  var _ref25$itemId = _ref25.itemId,
      itemId = _ref25$itemId === void 0 ? isRequired() : _ref25$itemId,
      props = _objectWithoutProperties(_ref25, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/collections");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `GET /API/item/${itemId}/library`
 *
 * @function item.listItemLibrary
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function listItemLibrary(_ref26) {
  var _ref26$itemId = _ref26.itemId,
      itemId = _ref26$itemId === void 0 ? isRequired() : _ref26$itemId,
      props = _objectWithoutProperties(_ref26, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/library");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `POST /API/item/${itemId}/lock`
 *
 * @function item.createItemLock
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function createItemLock(_ref27) {
  var _ref27$itemId = _ref27.itemId,
      itemId = _ref27$itemId === void 0 ? isRequired() : _ref27$itemId,
      props = _objectWithoutProperties(_ref27, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/lock");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `GET /API/item/${itemId}/lock`
 *
 * @function item.getItemLock
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function getItemLock(_ref28) {
  var _ref28$itemId = _ref28.itemId,
      itemId = _ref28$itemId === void 0 ? isRequired() : _ref28$itemId,
      props = _objectWithoutProperties(_ref28, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/lock");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/lock`
 *
 * @function item.removeItemLock
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function removeItemLock(_ref29) {
  var _ref29$itemId = _ref29.itemId,
      itemId = _ref29$itemId === void 0 ? isRequired() : _ref29$itemId,
      props = _objectWithoutProperties(_ref29, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/lock");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `PUT /API/item/${itemId}/lock`
 *
 * @function item.updateItemLock
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function updateItemLock(_ref30) {
  var _ref30$itemId = _ref30.itemId,
      itemId = _ref30$itemId === void 0 ? isRequired() : _ref30$itemId,
      props = _objectWithoutProperties(_ref30, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/lock");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `GET /API/item/${itemId}/metadata-lock`
 *
 * @function item.listItemMetadataLock
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function listItemMetadataLock(_ref31) {
  var _ref31$itemId = _ref31.itemId,
      itemId = _ref31$itemId === void 0 ? isRequired() : _ref31$itemId,
      props = _objectWithoutProperties(_ref31, ["itemId"]);

  return listEntityMetadataLock$2(_objectSpread2({
    entity: 'item',
    entityId: itemId
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `POST /API/item/${itemId}/metadata-lock`
 *
 * @function item.createItemMetadataLock
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function createItemMetadataLock(_ref32) {
  var _ref32$itemId = _ref32.itemId,
      itemId = _ref32$itemId === void 0 ? isRequired() : _ref32$itemId,
      props = _objectWithoutProperties(_ref32, ["itemId"]);

  return createEntityMetadataLock$2(_objectSpread2({
    entity: 'item',
    entityId: itemId
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `GET /API/item/${itemId}/metadata-lock/${lockId}`
 *
 * @function item.getItemMetadataLock
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.lockId
 * @returns {Promise<Object>}
 */


function getItemMetadataLock(_ref33) {
  var _ref33$itemId = _ref33.itemId,
      itemId = _ref33$itemId === void 0 ? isRequired() : _ref33$itemId,
      _ref33$lockId = _ref33.lockId,
      lockId = _ref33$lockId === void 0 ? isRequired() : _ref33$lockId,
      props = _objectWithoutProperties(_ref33, ["itemId", "lockId"]);

  return getEntityMetadataLock$2(_objectSpread2({
    entity: 'item',
    entityId: itemId,
    lockId: lockId
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `PUT /API/item/${itemId}/metadata-lock/${lockId}`
 *
 * @function item.updateItemMetadataLock
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.lockId
 * @returns {Promise<Object>}
 */


function updateItemMetadataLock(_ref34) {
  var _ref34$itemId = _ref34.itemId,
      itemId = _ref34$itemId === void 0 ? isRequired() : _ref34$itemId,
      _ref34$lockId = _ref34.lockId,
      lockId = _ref34$lockId === void 0 ? isRequired() : _ref34$lockId,
      props = _objectWithoutProperties(_ref34, ["itemId", "lockId"]);

  return updateEntityMetadataLock$2(_objectSpread2({
    entity: 'item',
    entityId: itemId,
    lockId: lockId
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/item.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/metadata-lock/${lockId}`
 *
 * @function item.removeItemMetadataLock
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.lockId
 * @returns {Promise<Object>}
 */


function removeItemMetadataLock(_ref35) {
  var _ref35$itemId = _ref35.itemId,
      itemId = _ref35$itemId === void 0 ? isRequired() : _ref35$itemId,
      _ref35$lockId = _ref35.lockId,
      lockId = _ref35$lockId === void 0 ? isRequired() : _ref35$lockId,
      props = _objectWithoutProperties(_ref35, ["itemId", "lockId"]);

  return removeEntityMetadataLock$2(_objectSpread2({
    entity: 'item',
    entityId: itemId,
    lockId: lockId
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/analyze.html#get-loudness-values APIdoc}
 *
 * `GET /API/item/${itemId}/loudness`
 *
 * @function item.getItemLoudness
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function getItemLoudness(_ref36) {
  var _ref36$itemId = _ref36.itemId,
      itemId = _ref36$itemId === void 0 ? isRequired() : _ref36$itemId,
      props = _objectWithoutProperties(_ref36, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/loudness");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/analyze.html#get-waveform-data APIdoc}
 *
 * `GET /API/item/${itemId}/waveform/values`
 *
 * @function item.getItemWaveformValue
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */

function getItemWaveformValue(_ref38) {
  var _ref38$itemId = _ref38.itemId,
      itemId = _ref38$itemId === void 0 ? isRequired() : _ref38$itemId,
      props = _objectWithoutProperties(_ref38, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/waveform/values");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/analyze.html#get-waveform-image APIdoc}
 *
 * `GET /API/item/${itemId}/waveform/image`
 *
 * @function item.getItemWaveformImage
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function getItemWaveformImage(_ref39) {
  var _ref39$itemId = _ref39.itemId,
      itemId = _ref39$itemId === void 0 ? isRequired() : _ref39$itemId,
      _ref39$headers = _ref39.headers,
      propsHeaders = _ref39$headers === void 0 ? {} : _ref39$headers,
      props = _objectWithoutProperties(_ref39, ["itemId", "headers"]);

  var path = "/API/item/".concat(itemId, "/waveform/image");

  var headers = _objectSpread2({
    accept: 'image/png'
  }, propsHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/analyze.html#get-waveform-image-uri APIdoc}
 *
 * `GET /API/item/${itemId}/waveform/imageURI`
 *
 * @function item.getItemWaveformImageUri
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function getItemWaveformImageUri(_ref40) {
  var _ref40$itemId = _ref40.itemId,
      itemId = _ref40$itemId === void 0 ? isRequired() : _ref40$itemId,
      _ref40$headers = _ref40.headers,
      propsHeaders = _ref40$headers === void 0 ? {} : _ref40$headers,
      props = _objectWithoutProperties(_ref40, ["itemId", "headers"]);

  var path = "/API/item/".concat(itemId, "/waveform/imageURI");

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propsHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/analyze.html#analyze-an-item APIdoc}
 *
 * `GET /API/item/${itemId}/analyze`
 *
 * @function item.getItemWaveformImageUri
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {Object} obj.analyzeJobDocument
 * @returns {Promise<Object>}
 */

function createItemAnalyze(_ref42) {
  var _ref42$itemId = _ref42.itemId,
      itemId = _ref42$itemId === void 0 ? isRequired() : _ref42$itemId,
      analyzeJobDocument = _ref42.analyzeJobDocument,
      props = _objectWithoutProperties(_ref42, ["itemId", "analyzeJobDocument"]);

  var path = "/API/item/".concat(itemId, "/analyze");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: analyzeJobDocument
  }, props));
}

var item = {
  listItem: listItem,
  getItem: getItem,
  getItemUri: getItemUri,
  removeItem: removeItem,
  removeItemList: removeItemList,
  searchItem: searchItem,
  updateItemMetadata: updateItemMetadata,
  getItemMetadata: getItemMetadata,
  createThumbnail: createThumbnail,
  createTranscode: createTranscode,
  createExport: createExport,
  createExportImp: createExportImp,
  listItemRelation: listItemRelation,
  createItemRelation: createItemRelation,
  createItemRelationList: createItemRelationList,
  removeItemRelation: removeItemRelation,
  removeAllItemRelation: removeAllItemRelation,
  createRelation: createRelation,
  getRelation: getRelation,
  updateRelation: updateRelation,
  removeRelation: removeRelation,
  getItemSearchHistory: getItemSearchHistory,
  reindexItem: reindexItem,
  createItemList: createItemList,
  listItemCollection: listItemCollection,
  listItemLibrary: listItemLibrary,
  createItemLock: createItemLock,
  getItemLock: getItemLock,
  removeItemLock: removeItemLock,
  updateItemLock: updateItemLock,
  listItemMetadataLock: listItemMetadataLock,
  createItemMetadataLock: createItemMetadataLock,
  getItemMetadataLock: getItemMetadataLock,
  updateItemMetadataLock: updateItemMetadataLock,
  removeItemMetadataLock: removeItemMetadataLock,
  getItemLoudness: getItemLoudness,
  getItemWaveformValue: getItemWaveformValue,
  getItemWaveformImage: getItemWaveformImage,
  getItemWaveformImageUri: getItemWaveformImageUri,
  createItemAnalyze: createItemAnalyze
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/javascript.html APIdoc}
 *
 * `POST /API/javascript/test`
 *
 * @function javascript.test
 * @param {Object} obj
 * @param {Object} obj.javascriptDocument
 * @returns {Promise<Object>}
 */

function test(_ref) {
  var javascriptDocument = _ref.javascriptDocument,
      _ref$headers = _ref.headers,
      propHeaders = _ref$headers === void 0 ? {} : _ref$headers,
      props = _objectWithoutProperties(_ref, ["javascriptDocument", "headers"]);

  var headers = _objectSpread2({
    contentType: 'application/javascript'
  }, propHeaders);

  var path = '/API/javascript/test';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: javascriptDocument,
    headers: headers
  }, props));
}

var javascript = {
  test: test
};

function getEntityTypeUrl$1(entityType) {
  if (entityType === 'file') {
    return 'storage/file';
  }

  if (['metadata', 'access'].includes(entityType)) {
    return 'item';
  }

  return entityType;
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/notification/index.html APIdoc}
 *
 * `GET /API/${entityType}/notification/`
 *
 * @function notification.listNotification
 * @param {Object} obj
 * @param {string} obj.entityType
 * @returns {Promise<Object>}
 */


function listNotification() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$entityType = _ref.entityType,
      entityType = _ref$entityType === void 0 ? isRequired() : _ref$entityType,
      props = _objectWithoutProperties(_ref, ["entityType"]);

  var entityTypeUrl = getEntityTypeUrl$1(entityType);
  var path = "/API/".concat(entityTypeUrl, "/notification/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/notification/index.html APIdoc}
 *
 * `GET /API/${entityType}/${entityId}/notification/`
 *
 * @function notification.listNotificationEntity
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function listNotificationEntity() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$entityType = _ref2.entityType,
      entityType = _ref2$entityType === void 0 ? isRequired() : _ref2$entityType,
      _ref2$entityId = _ref2.entityId,
      entityId = _ref2$entityId === void 0 ? isRequired() : _ref2$entityId,
      props = _objectWithoutProperties(_ref2, ["entityType", "entityId"]);

  var entityTypeUrl = getEntityTypeUrl$1(entityType);
  var path = "/API/".concat(entityTypeUrl, "/").concat(entityId, "/notification/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/notification/index.html APIdoc}
 *
 * `GET /API/${entityType}/notification/${notificationId}`
 *
 * @function notification.getNotification
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.notificationId
 * @returns {Promise<Object>}
 */


function getNotification() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref3$notificationId = _ref3.notificationId,
      notificationId = _ref3$notificationId === void 0 ? isRequired() : _ref3$notificationId,
      _ref3$entityType = _ref3.entityType,
      entityType = _ref3$entityType === void 0 ? isRequired() : _ref3$entityType,
      props = _objectWithoutProperties(_ref3, ["notificationId", "entityType"]);

  var entityTypeUrl = getEntityTypeUrl$1(entityType);
  var path = "/API/".concat(entityTypeUrl, "/notification/").concat(notificationId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/notification/index.html APIdoc}
 *
 * `PUT /API/${entityType}/notification/${notificationId}`
 *
 * @function notification.updateNotification
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.notificationId
 * @param {Object} obj.notificationDocument
 * @returns {Promise<Object>}
 */


function updateNotification() {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref4$notificationId = _ref4.notificationId,
      notificationId = _ref4$notificationId === void 0 ? isRequired() : _ref4$notificationId,
      _ref4$entityType = _ref4.entityType,
      entityType = _ref4$entityType === void 0 ? isRequired() : _ref4$entityType,
      notificationDocument = _ref4.notificationDocument,
      props = _objectWithoutProperties(_ref4, ["notificationId", "entityType", "notificationDocument"]);

  var entityTypeUrl = getEntityTypeUrl$1(entityType);
  var path = "/API/".concat(entityTypeUrl, "/notification/").concat(notificationId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: notificationDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/notification/index.html APIdoc}
 *
 * `POST /API/${entityType}/notification/`
 *
 * @function notification.createNotification
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {Object} obj.notificationDocument
 * @returns {Promise<Object>}
 */


function createNotification() {
  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref5$entityType = _ref5.entityType,
      entityType = _ref5$entityType === void 0 ? isRequired() : _ref5$entityType,
      notificationDocument = _ref5.notificationDocument,
      props = _objectWithoutProperties(_ref5, ["entityType", "notificationDocument"]);

  var entityTypeUrl = getEntityTypeUrl$1(entityType);
  var path = "/API/".concat(entityTypeUrl, "/notification/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: notificationDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/notification/index.html APIdoc}
 *
 * `DELETE /API/${entityType}/notification/${notificationId}`
 *
 * @function notification.removeNotification
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.notificationId
 * @returns {Promise<Object>}
 */


function removeNotification() {
  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref6$notificationId = _ref6.notificationId,
      notificationId = _ref6$notificationId === void 0 ? isRequired() : _ref6$notificationId,
      _ref6$entityType = _ref6.entityType,
      entityType = _ref6$entityType === void 0 ? isRequired() : _ref6$entityType,
      props = _objectWithoutProperties(_ref6, ["notificationId", "entityType"]);

  var entityTypeUrl = getEntityTypeUrl$1(entityType);
  var path = "/API/".concat(entityTypeUrl, "/notification/").concat(notificationId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/notification/index.html APIdoc}
 *
 * `GET /API/${entityType}/${entityId}/notification/${notificationId}`
 *
 * @function notification.getNotificationEntity
 * @param {Object} obj
 * @param {string} obj.entityId
 * @param {string} obj.entityType
 * @param {string} obj.notificationId
 * @returns {Promise<Object>}
 */


function getNotificationEntity() {
  var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref7$notificationId = _ref7.notificationId,
      notificationId = _ref7$notificationId === void 0 ? isRequired() : _ref7$notificationId,
      _ref7$entityType = _ref7.entityType,
      entityType = _ref7$entityType === void 0 ? isRequired() : _ref7$entityType,
      _ref7$entityId = _ref7.entityId,
      entityId = _ref7$entityId === void 0 ? isRequired() : _ref7$entityId,
      props = _objectWithoutProperties(_ref7, ["notificationId", "entityType", "entityId"]);

  var entityTypeUrl = getEntityTypeUrl$1(entityType);
  var path = "/API/".concat(entityTypeUrl, "/").concat(entityId, "/notification/").concat(notificationId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/notification/index.html APIdoc}
 *
 * `PUT /API/${entityType}/${entityId}/notification/${notificationId}`
 *
 * @function notification.updateNotificationEntity
 * @param {Object} obj
 * @param {string} obj.entityId
 * @param {string} obj.entityType
 * @param {string} obj.notificationId
 * @param {Object} obj.notificationDocument
 * @returns {Promise<Object>}
 */


function updateNotificationEntity() {
  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref8$notificationId = _ref8.notificationId,
      notificationId = _ref8$notificationId === void 0 ? isRequired() : _ref8$notificationId,
      _ref8$entityType = _ref8.entityType,
      entityType = _ref8$entityType === void 0 ? isRequired() : _ref8$entityType,
      _ref8$entityId = _ref8.entityId,
      entityId = _ref8$entityId === void 0 ? isRequired() : _ref8$entityId,
      notificationDocument = _ref8.notificationDocument,
      props = _objectWithoutProperties(_ref8, ["notificationId", "entityType", "entityId", "notificationDocument"]);

  var entityTypeUrl = getEntityTypeUrl$1(entityType);
  var path = "/API/".concat(entityTypeUrl, "/").concat(entityId, "/notification/").concat(notificationId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: notificationDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/notification/index.html APIdoc}
 *
 * `POST /API/${entityType}/${entityId}/notification/`
 *
 * @function notification.createNotificationEntity
 * @param {Object} obj
 * @param {string} obj.entityId
 * @param {string} obj.entityType
 * @param {Object} obj.notificationDocument
 * @returns {Promise<Object>}
 */


function createNotificationEntity() {
  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref9$entityType = _ref9.entityType,
      entityType = _ref9$entityType === void 0 ? isRequired() : _ref9$entityType,
      notificationDocument = _ref9.notificationDocument,
      entityId = _ref9.entityId,
      props = _objectWithoutProperties(_ref9, ["entityType", "notificationDocument", "entityId"]);

  var entityTypeUrl = getEntityTypeUrl$1(entityType);
  var path = "/API/".concat(entityTypeUrl, "/").concat(entityId, "/notification/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: notificationDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/notification/index.html APIdoc}
 *
 * `DELETE /API/${entityType}/${entityId}/notification/${notificationId}`
 *
 * @function notification.removeNotificationEntity
 * @param {Object} obj
 * @param {string} obj.entityId
 * @param {string} obj.entityType
 * @param {string} obj.notificationId
 * @returns {Promise<Object>}
 */


function removeNotificationEntity() {
  var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref10$notificationId = _ref10.notificationId,
      notificationId = _ref10$notificationId === void 0 ? isRequired() : _ref10$notificationId,
      _ref10$entityType = _ref10.entityType,
      entityType = _ref10$entityType === void 0 ? isRequired() : _ref10$entityType,
      _ref10$entityId = _ref10.entityId,
      entityId = _ref10$entityId === void 0 ? isRequired() : _ref10$entityId,
      props = _objectWithoutProperties(_ref10, ["notificationId", "entityType", "entityId"]);

  var entityTypeUrl = getEntityTypeUrl$1(entityType);
  var path = "/API/".concat(entityTypeUrl, "/").concat(entityId, "/notification/").concat(notificationId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var notificationApi = {
  listNotification: listNotification,
  listNotificationEntity: listNotificationEntity,
  getNotification: getNotification,
  updateNotification: updateNotification,
  createNotification: createNotification,
  removeNotification: removeNotification,
  getNotificationEntity: getNotificationEntity,
  updateNotificationEntity: updateNotificationEntity,
  createNotificationEntity: createNotificationEntity,
  removeNotificationEntity: removeNotificationEntity
};

var listNotification$1 = notificationApi.listNotification;
/**
 * {@link https://apidoc.vidispine.com/latest/ref/job.html APIdoc}
 *
 * `GET /API/job/`
 *
 * @function job.listJob
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listJob() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/job/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/job.html#search-and-count-jobs APIdoc}
 *
 * `PUT /API/job/search`
 *
 * @function job.searchJob
 * @param {Object} obj
 * @param {Object} obj.jobSearchDocument
 * @returns {Promise<Object>}
 */


function searchJob() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$jobSearchDocume = _ref2.jobSearchDocument,
      jobSearchDocument = _ref2$jobSearchDocume === void 0 ? {} : _ref2$jobSearchDocume,
      props = _objectWithoutProperties(_ref2, ["jobSearchDocument"]);

  var path = '/API/job/search/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: jobSearchDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/job.html APIdoc}
 *
 * `GET /API/job/${jobId}`
 *
 * @function job.getJob
 * @param {Object} obj
 * @param {string} obj.jobId
 * @returns {Promise<Object>}
 */


function getJob(_ref3) {
  var _ref3$jobId = _ref3.jobId,
      jobId = _ref3$jobId === void 0 ? isRequired() : _ref3$jobId,
      props = _objectWithoutProperties(_ref3, ["jobId"]);

  var path = "/API/job/".concat(jobId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/job.html APIdoc}
 *
 * `POST /API/job`
 *
 * @function job.createJob
 * @param {Object} obj
 * @param {Object} obj.simpleMetadataDocument
 * @returns {Promise<Object>}
 */


function createJob() {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      simpleMetadataDocument = _ref4.simpleMetadataDocument,
      props = _objectWithoutProperties(_ref4, ["simpleMetadataDocument"]);

  var path = '/API/job';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: simpleMetadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/job.html APIdoc}
 *
 * `POST /API/job/${jobId}/re-run`
 *
 * @function job.duplicateJob
 * @param {Object} obj
 * @param {string} obj.jobId
 * @returns {Promise<Object>}
 */


function duplicateJob(_ref5) {
  var _ref5$jobId = _ref5.jobId,
      jobId = _ref5$jobId === void 0 ? isRequired() : _ref5$jobId,
      props = _objectWithoutProperties(_ref5, ["jobId"]);

  var path = "/API/job/".concat(jobId, "/re-run");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/job.html APIdoc}
 *
 * `PUT /API/job/${jobId}`
 *
 * @function job.modifyJob
 * @param {Object} obj
 * @param {string} obj.jobId
 * @returns {Promise<Object>}
 */


function modifyJob(_ref6) {
  var _ref6$jobId = _ref6.jobId,
      jobId = _ref6$jobId === void 0 ? isRequired() : _ref6$jobId,
      props = _objectWithoutProperties(_ref6, ["jobId"]);

  var path = "/API/job/".concat(jobId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/job.html APIdoc}
 *
 * `DELETE /API/job/${jobId}`
 *
 * @function job.abortJob
 * @param {Object} obj
 * @param {string} obj.jobId
 * @returns {Promise<Object>}
 */


function abortJob(_ref7) {
  var _ref7$jobId = _ref7.jobId,
      jobId = _ref7$jobId === void 0 ? isRequired() : _ref7$jobId,
      props = _objectWithoutProperties(_ref7, ["jobId"]);

  var path = "/API/job/".concat(jobId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/job.html APIdoc}
 *
 * `DELETE /API/job/`
 *
 * @function job.deleteJob
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function deleteJob() {
  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref8);

  var path = '/API/job/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/job.html APIdoc}
 *
 * @function job.listJobNotification
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function listJobNotification() {
  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref9);

  var entityType = 'job';
  return listNotification$1(_objectSpread2({
    entityType: entityType
  }, props));
}

var job = {
  listJob: listJob,
  searchJob: searchJob,
  getJob: getJob,
  createJob: createJob,
  duplicateJob: duplicateJob,
  modifyJob: modifyJob,
  abortJob: abortJob,
  deleteJob: deleteJob,
  listJobNotification: listJobNotification
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/license.html APIdoc}
 *
 * `POST /API/license`
 *
 * @function license.createLicense
 * @param {Object} obj
 * @param {Object} obj.file
 * @returns {Promise<Object>}
 */

function createLicense(_ref) {
  var _ref$file = _ref.file,
      file = _ref$file === void 0 ? isRequired() : _ref$file,
      _ref$headers = _ref.headers,
      propHeaders = _ref$headers === void 0 ? {} : _ref$headers,
      props = _objectWithoutProperties(_ref, ["file", "headers"]);

  var headers = _objectSpread2({
    contentType: 'application/octet-stream'
  }, propHeaders);

  var path = '/API/license';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: file,
    headers: headers
  }, props));
}

var license = {
  createLicense: createLicense
};

var getEntitySimpleMetadata$1 = metadataApi.getSimpleMetadata;
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field.html APIdoc}
 *
 * `GET /API/metadata-field/`
 *
 * @function metadatafield.listMetadataField
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listMetadataField() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/metadata-field/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field.html APIdoc}
 *
 * `GET /API/metadata-field/${fieldName}/`
 *
 * @function metadatafield.getMetadataField
 * @param {Object} obj
 * @param {string} obj.fieldName
 * @returns {Promise<Object>}
 */


function getMetadataField(_ref2) {
  var _ref2$fieldName = _ref2.fieldName,
      fieldName = _ref2$fieldName === void 0 ? isRequired() : _ref2$fieldName,
      props = _objectWithoutProperties(_ref2, ["fieldName"]);

  var path = "/API/metadata-field/".concat(fieldName, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field.html APIdoc}
 *
 * `PUT /API/metadata-field/${fieldName}`
 *
 * @function metadatafield.updateMetadataField
 * @param {Object} obj
 * @param {string} obj.fieldName
 * @param {Object} obj.metadataFieldDocument
 * @returns {Promise<Object>}
 */


function updateMetadataField(_ref3) {
  var _ref3$fieldName = _ref3.fieldName,
      fieldName = _ref3$fieldName === void 0 ? isRequired() : _ref3$fieldName,
      metadataFieldDocument = _ref3.metadataFieldDocument,
      props = _objectWithoutProperties(_ref3, ["fieldName", "metadataFieldDocument"]);

  var path = "/API/metadata-field/".concat(fieldName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metadataFieldDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field.html APIdoc}
 *
 * `DELETE /API/metadata-field/${fieldName}`
 *
 * @function metadatafield.removeMetadataField
 * @param {Object} obj
 * @param {string} obj.fieldName
 * @returns {Promise<Object>}
 */


function removeMetadataField(_ref4) {
  var _ref4$fieldName = _ref4.fieldName,
      fieldName = _ref4$fieldName === void 0 ? isRequired() : _ref4$fieldName,
      props = _objectWithoutProperties(_ref4, ["fieldName"]);

  var path = "/API/metadata-field/".concat(fieldName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field.html APIdoc}
 *
 * `GET /API/metadata-field/${fieldName}/values/`
 *
 * @function metadatafield.getMetadataFieldValues
 * @param {Object} obj
 * @param {string} obj.fieldName
 * @returns {Promise<Object>}
 */


function getMetadataFieldValues(_ref5) {
  var _ref5$fieldName = _ref5.fieldName,
      fieldName = _ref5$fieldName === void 0 ? isRequired() : _ref5$fieldName,
      props = _objectWithoutProperties(_ref5, ["fieldName"]);

  var path = "/API/metadata-field/".concat(fieldName, "/values/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field.html APIdoc}
 *
 * `GET/POST /API/metadata-field/${fieldName}/allowed-values/`
 *
 * @function metadatafield.getMetadataFieldAllowedValues
 * @param {Object} obj
 * @param {string} obj.fieldName
 * @param {Object} obj.metadataFieldValueConstraintListDocument
 * @returns {Promise<Object>}
 */


function getMetadataFieldAllowedValues(_ref6) {
  var _ref6$fieldName = _ref6.fieldName,
      fieldName = _ref6$fieldName === void 0 ? isRequired() : _ref6$fieldName,
      metadataFieldValueConstraintListDocument = _ref6.metadataFieldValueConstraintListDocument,
      props = _objectWithoutProperties(_ref6, ["fieldName", "metadataFieldValueConstraintListDocument"]);

  var path = "/API/metadata-field/".concat(fieldName, "/allowed-values/");
  var method = 'GET';

  if (metadataFieldValueConstraintListDocument) {
    method = 'POST';
  }

  return vFetch(_objectSpread2({
    path: path,
    method: method,
    body: metadataFieldValueConstraintListDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field.html APIdoc}
 *
 * `PUT /API/metadata-field/${fieldName}/values`
 *
 * @function metadatafield.updateMetadataFieldValues
 * @param {Object} obj
 * @param {string} obj.fieldName
 * @param {Object} obj.simpleMetadataDocument
 * @returns {Promise<Object>}
 */


function updateMetadataFieldValues(_ref7) {
  var _ref7$fieldName = _ref7.fieldName,
      fieldName = _ref7$fieldName === void 0 ? isRequired() : _ref7$fieldName,
      simpleMetadataDocument = _ref7.simpleMetadataDocument,
      props = _objectWithoutProperties(_ref7, ["fieldName", "simpleMetadataDocument"]);

  var path = "/API/metadata-field/".concat(fieldName, "/values");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: simpleMetadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field.html APIdoc}
 *
 * `GET /API/metadata-field/${fieldName}/metadata`
 *
 * @function metadatafield.getSimpleMetadata
 * @param {Object} obj
 * @param {string} obj.fieldName
 * @returns {Promise<Object>}
 */


function getSimpleMetadata$2(_ref8) {
  var _ref8$fieldName = _ref8.fieldName,
      fieldName = _ref8$fieldName === void 0 ? isRequired() : _ref8$fieldName,
      props = _objectWithoutProperties(_ref8, ["fieldName"]);

  var entityType = 'metadata-field';
  return getEntitySimpleMetadata$1(_objectSpread2({
    entityType: entityType,
    entityId: fieldName
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field.html APIdoc}
 *
 * `GET /API/metadata-field/${fieldName}/access`
 *
 * @function metadatafield.listMetadataFieldAccess
 * @param {Object} obj
 * @param {string} obj.fieldName
 * @returns {Promise<Object>}
 */


function listMetadataFieldAccess(_ref9) {
  var _ref9$fieldName = _ref9.fieldName,
      fieldName = _ref9$fieldName === void 0 ? isRequired() : _ref9$fieldName,
      props = _objectWithoutProperties(_ref9, ["fieldName"]);

  var path = "/API/metadata-field/".concat(fieldName, "/access");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field.html APIdoc}
 *
 * `POST /API/metadata-field/${fieldName}/access`
 *
 * @function metadatafield.createMetadataFieldAccess
 * @param {Object} obj
 * @param {string} obj.fieldName
 * @param {Object} obj.metadataFieldAccessControlDocument
 * @returns {Promise<Object>}
 */


function createMetadataFieldAccess(_ref10) {
  var _ref10$fieldName = _ref10.fieldName,
      fieldName = _ref10$fieldName === void 0 ? isRequired() : _ref10$fieldName,
      _ref10$metadataFieldA = _ref10.metadataFieldAccessControlDocument,
      metadataFieldAccessControlDocument = _ref10$metadataFieldA === void 0 ? isRequired() : _ref10$metadataFieldA,
      props = _objectWithoutProperties(_ref10, ["fieldName", "metadataFieldAccessControlDocument"]);

  var path = "/API/metadata-field/".concat(fieldName, "/access");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: metadataFieldAccessControlDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field.html APIdoc}
 *
 * `DELETE /API/metadata-field/${fieldName}/access/${accessId}`
 *
 * @function metadatafield.removeMetadataFieldAccess
 * @param {Object} obj
 * @param {string} obj.fieldName
 * @param {string} obj.accessId
 * @returns {Promise<Object>}
 */


function removeMetadataFieldAccess(_ref11) {
  var _ref11$fieldName = _ref11.fieldName,
      fieldName = _ref11$fieldName === void 0 ? isRequired() : _ref11$fieldName,
      _ref11$accessId = _ref11.accessId,
      accessId = _ref11$accessId === void 0 ? isRequired() : _ref11$accessId,
      props = _objectWithoutProperties(_ref11, ["fieldName", "accessId"]);

  var path = "/API/metadata-field/".concat(fieldName, "/access/").concat(accessId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field.html APIdoc}
 *
 * `GET /API/metadata-field/merged-access`
 *
 * @function metadatafield.listMetadataFieldMergedAccess
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function listMetadataFieldMergedAccess() {
  var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref12);

  var path = '/API/metadata-field/merged-access';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/field.html APIdoc}
 *
 * `GET /API/metadata-field/${fieldName}/merged-access`
 *
 * @function metadatafield.getMetadataFieldMergedAccess
 * @param {Object} obj
 * @param {string} obj.fieldName
 * @returns {Promise<Object>}
 */


function getMetadataFieldMergedAccess() {
  var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref13$fieldName = _ref13.fieldName,
      fieldName = _ref13$fieldName === void 0 ? isRequired() : _ref13$fieldName,
      props = _objectWithoutProperties(_ref13, ["fieldName"]);

  var path = "/API/metadata-field/".concat(fieldName, "/merged-access");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}

var metadatafield = {
  listMetadataField: listMetadataField,
  getMetadataField: getMetadataField,
  updateMetadataField: updateMetadataField,
  removeMetadataField: removeMetadataField,
  getMetadataFieldValues: getMetadataFieldValues,
  getMetadataFieldAllowedValues: getMetadataFieldAllowedValues,
  updateMetadataFieldValues: updateMetadataFieldValues,
  getSimpleMetadata: getSimpleMetadata$2,
  listMetadataFieldAccess: listMetadataFieldAccess,
  createMetadataFieldAccess: createMetadataFieldAccess,
  removeMetadataFieldAccess: removeMetadataFieldAccess,
  listMetadataFieldMergedAccess: listMetadataFieldMergedAccess,
  getMetadataFieldMergedAccess: getMetadataFieldMergedAccess
};

/**
 * `GET /APInoauth/is-online/`
 *
 * @function noauth.isOnline
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function isOnline() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/APInoauth/is-online/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/self-test.html#get--APInoauth-selftest APIdoc}
 *
 * `GET /APInoauth/selftest/`
 *
 * @function noauth.getSelfTest
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getSelfTest() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref2);

  var path = '/APInoauth/selftest/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * `POST /APIinit/`
 *
 * @function noauth.createInit
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function createInit() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref3$headers = _ref3.headers,
      propHeaders = _ref3$headers === void 0 ? {} : _ref3$headers,
      props = _objectWithoutProperties(_ref3, ["headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  var path = '/APIinit/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    headers: headers
  }, props));
}
/**
 *
 * @function noauth.getFileRaw
 * @param {Object} obj
 * @param {string} obj.path
 * @returns {Promise<Object>}
 */


function getFileRaw$1(_ref4) {
  var _ref4$path = _ref4.path,
      path = _ref4$path === void 0 ? isRequired() : _ref4$path,
      _ref4$headers = _ref4.headers,
      propHeaders = _ref4$headers === void 0 ? {} : _ref4$headers,
      props = _objectWithoutProperties(_ref4, ["path", "headers"]);

  var headers = _objectSpread2({
    accept: 'application/octet-stream'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers,
    responseType: 'blob'
  }, props));
}

var noauth = {
  getSelfTest: getSelfTest,
  createInit: createInit,
  getFileRaw: getFileRaw$1,
  isOnline: isOnline
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/reindex.html APIdoc}
 *
 * `GET /API/reindex/${indexName}`
 *
 * @function reindex.getReindex
 * @param {Object} obj
 * @param {string} obj.indexName
 * @returns {Promise<Object>}
 */

function getReindex(_ref) {
  var _ref$indexName = _ref.indexName,
      indexName = _ref$indexName === void 0 ? isRequired() : _ref$indexName,
      props = _objectWithoutProperties(_ref, ["indexName"]);

  var path = "/API/reindex/".concat(indexName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/reindex.html APIdoc}
 *
 * `PUT /API/reindex/${indexName}`
 *
 * @function reindex.updateReindex
 * @param {Object} obj
 * @param {string} obj.indexName
 * @returns {Promise<Object>}
 */


function updateReindex(_ref2) {
  var _ref2$indexName = _ref2.indexName,
      indexName = _ref2$indexName === void 0 ? isRequired() : _ref2$indexName,
      props = _objectWithoutProperties(_ref2, ["indexName"]);

  var path = "/API/reindex/".concat(indexName, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}

var reindex = {
  getReindex: getReindex,
  updateReindex: updateReindex
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/resource.html APIdoc}
 *
 * `GET /API/resource/`
 *
 * @function resource.listResource
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listResource() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/resource/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/resource.html APIdoc}
 *
 * `GET /API/resource/${resourceType}`
 *
 * @function resource.listResourceType
 * @param {Object} obj
 * @param {string} obj.resourceType
 * @returns {Promise<Object>}
 */


function listResourceType(_ref2) {
  var _ref2$resourceType = _ref2.resourceType,
      resourceType = _ref2$resourceType === void 0 ? isRequired() : _ref2$resourceType,
      props = _objectWithoutProperties(_ref2, ["resourceType"]);

  var path = "/API/resource/".concat(resourceType);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/resource.html APIdoc}
 *
 * `POST /API/resource/${resourceType}`
 *
 * @function resource.createResource
 * @param {Object} obj
 * @param {string} obj.resourceType
 * @param {Object} obj.resourceDocument
 * @returns {Promise<Object>}
 */


function createResource(_ref3) {
  var _ref3$resourceType = _ref3.resourceType,
      resourceType = _ref3$resourceType === void 0 ? isRequired() : _ref3$resourceType,
      resourceDocument = _ref3.resourceDocument,
      props = _objectWithoutProperties(_ref3, ["resourceType", "resourceDocument"]);

  var path = "/API/resource/".concat(resourceType);
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: resourceDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/resource.html APIdoc}
 *
 * `PUT /API/resource/${resourceType}/${resourceId}`
 *
 * @function resource.modifyResource
 * @param {Object} obj
 * @param {string} obj.resourceType
 * @param {string} obj.resourceId
 * @param {Object} obj.resourceDocument
 * @returns {Promise<Object>}
 */


function modifyResource(_ref4) {
  var _ref4$resourceType = _ref4.resourceType,
      resourceType = _ref4$resourceType === void 0 ? isRequired() : _ref4$resourceType,
      _ref4$resourceId = _ref4.resourceId,
      resourceId = _ref4$resourceId === void 0 ? isRequired() : _ref4$resourceId,
      resourceDocument = _ref4.resourceDocument,
      props = _objectWithoutProperties(_ref4, ["resourceType", "resourceId", "resourceDocument"]);

  var path = "/API/resource/".concat(resourceType, "/").concat(resourceId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: resourceDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/resource.html APIdoc}
 *
 * `GET /API/resource/${resourceType}/${resourceId}`
 *
 * @function resource.getResource
 * @param {Object} obj
 * @param {string} obj.resourceId
 * @param {string} obj.resourceType
 * @returns {Promise<Object>}
 */


function getResource(_ref5) {
  var _ref5$resourceType = _ref5.resourceType,
      resourceType = _ref5$resourceType === void 0 ? isRequired() : _ref5$resourceType,
      _ref5$resourceId = _ref5.resourceId,
      resourceId = _ref5$resourceId === void 0 ? isRequired() : _ref5$resourceId,
      props = _objectWithoutProperties(_ref5, ["resourceType", "resourceId"]);

  var path = "/API/resource/".concat(resourceType, "/").concat(resourceId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/resource.html APIdoc}
 *
 * `DELETE /API/resource/${resourceType}/${resourceId}`
 *
 * @function resource.removeResource
 * @param {Object} obj
 * @param {string} obj.resourceType
 * @param {string} obj.resourceId
 * @returns {Promise<Object>}
 */


function removeResource(_ref6) {
  var _ref6$resourceType = _ref6.resourceType,
      resourceType = _ref6$resourceType === void 0 ? isRequired() : _ref6$resourceType,
      _ref6$resourceId = _ref6.resourceId,
      resourceId = _ref6$resourceId === void 0 ? isRequired() : _ref6$resourceId,
      props = _objectWithoutProperties(_ref6, ["resourceType", "resourceId"]);

  var path = "/API/resource/".concat(resourceType, "/").concat(resourceId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/resource.html APIdoc}
 *
 * `GET /API/resource/${resourceType}/${resourceId}/status`
 *
 * @function resource.statusResource
 * @param {Object} obj
 * @param {string} obj.resourceType
 * @param {string} obj.resourceId
 * @returns {Promise<Object>}
 */


function statusResource(_ref7) {
  var _ref7$resourceType = _ref7.resourceType,
      resourceType = _ref7$resourceType === void 0 ? isRequired() : _ref7$resourceType,
      _ref7$resourceId = _ref7.resourceId,
      resourceId = _ref7$resourceId === void 0 ? isRequired() : _ref7$resourceId,
      _ref7$headers = _ref7.headers,
      propHeaders = _ref7$headers === void 0 ? {} : _ref7$headers,
      props = _objectWithoutProperties(_ref7, ["resourceType", "resourceId", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  var path = "/API/resource/".concat(resourceType, "/").concat(resourceId, "/status");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}

var resource = {
  listResource: listResource,
  listResourceType: listResourceType,
  createResource: createResource,
  modifyResource: modifyResource,
  getResource: getResource,
  removeResource: removeResource,
  statusResource: statusResource
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/search.html APIdoc}
 *
 * `GET /API/search/`
 *
 * @function search.listItemCollection
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listItemCollection$1() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  return vFetch(_objectSpread2({
    path: '/API/search/',
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/search.html APIdoc}
 *
 * `PUT /API/search/`
 *
 * @function search.searchItemCollection
 * @param {Object} obj
 * @param {Object} obj.itemSearchDocument
 * @returns {Promise<Object>}
 */


function searchItemCollection(_ref2) {
  var itemSearchDocument = _ref2.itemSearchDocument,
      props = _objectWithoutProperties(_ref2, ["itemSearchDocument"]);

  return vFetch(_objectSpread2({
    path: '/API/search/',
    method: 'PUT',
    body: itemSearchDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/search.html APIdoc}
 *
 * `PUT /API/search/shape/`
 *
 * @function search.searchShape
 * @param {Object} obj
 * @param {Object} obj.shapeSearchDocument
 * @returns {Promise<Object>}
 */


function searchShape(_ref3) {
  var shapeSearchDocument = _ref3.shapeSearchDocument,
      props = _objectWithoutProperties(_ref3, ["shapeSearchDocument"]);

  return vFetch(_objectSpread2({
    path: '/API/search/shape/',
    method: 'PUT',
    body: shapeSearchDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/search.html APIdoc}
 *
 * `PUT /API/search/file/`
 *
 * @function search.searchFile
 * @param {Object} obj
 * @param {Object} obj.fileSearchDocument
 * @returns {Promise<Object>}
 */


function searchFile(_ref4) {
  var fileSearchDocument = _ref4.fileSearchDocument,
      props = _objectWithoutProperties(_ref4, ["fileSearchDocument"]);

  return vFetch(_objectSpread2({
    path: '/API/search/file/',
    method: 'PUT',
    body: fileSearchDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/search.html APIdoc}
 *
 * `PUT /API/search/autocomplete/`
 *
 * @function search.searchAutoComplete
 * @param {Object} obj
 * @param {Object} obj.autocompleteRequestDocument
 * @returns {Promise<Object>}
 */


function searchAutoComplete(_ref5) {
  var autocompleteRequestDocument = _ref5.autocompleteRequestDocument,
      props = _objectWithoutProperties(_ref5, ["autocompleteRequestDocument"]);

  return vFetch(_objectSpread2({
    path: '/API/search/autocomplete/',
    method: 'PUT',
    body: autocompleteRequestDocument
  }, props));
}

var search = {
  listItemCollection: listItemCollection$1,
  searchItemCollection: searchItemCollection,
  searchShape: searchShape,
  searchFile: searchFile,
  searchAutoComplete: searchAutoComplete
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/self-test.html APIdoc}
 *
 * `GET /API/selftest/`
 *
 * @function selftest.listSelfTest
 * @param {Object} obj
 * @param {boolean} obj.noAuth
 * @returns {Promise<Object>}
 */

function listSelfTest() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$noAuth = _ref.noAuth,
      noAuth = _ref$noAuth === void 0 ? false : _ref$noAuth,
      props = _objectWithoutProperties(_ref, ["noAuth"]);

  var path = noAuth ? '/APInoauth/selftest/' : '/API/selftest/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/self-test.html APIdoc}
 *
 * `GET /API/selftest/${testName}`
 *
 * @function selftest.getSelfTest
 * @param {Object} obj
 * @param {string} obj.testName
 * @returns {Promise<Object>}
 */


function getSelfTest$1() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$testName = _ref2.testName,
      testName = _ref2$testName === void 0 ? isRequired() : _ref2$testName,
      props = _objectWithoutProperties(_ref2, ["testName"]);

  var path = "/API/selftest/".concat(testName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}

var selftest = {
  listSelfTest: listSelfTest,
  getSelfTest: getSelfTest$1
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/vidispine-service.html APIdoc}
 *
 * `GET /API/vidispine-service`
 *
 * @function service.getServiceList
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function getServiceList() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/vidispine-service';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/vidispine-service.html APIdoc}
 *
 * `GET /API/vidispine-service/service/${serviceName}`
 *
 * @function service.getService
 * @param {Object} obj
 * @param {string} obj.serviceName
 * @returns {Promise<Object>}
 */


function getService(_ref2) {
  var _ref2$serviceName = _ref2.serviceName,
      serviceName = _ref2$serviceName === void 0 ? isRequired() : _ref2$serviceName,
      props = _objectWithoutProperties(_ref2, ["serviceName"]);

  var path = "/API/vidispine-service/service/".concat(serviceName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/vidispine-service.html APIdoc}
 *
 * `PUT /API/vidispine-service/service/${serviceName}/enable`
 *
 * @function service.enableService
 * @param {Object} obj
 * @param {string} obj.serviceName
 * @returns {Promise<Object>}
 */


function enableService(_ref3) {
  var _ref3$serviceName = _ref3.serviceName,
      serviceName = _ref3$serviceName === void 0 ? isRequired() : _ref3$serviceName,
      props = _objectWithoutProperties(_ref3, ["serviceName"]);

  var path = "/API/vidispine-service/service/".concat(serviceName, "/enable");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/vidispine-service.html APIdoc}
 *
 * `PUT /API/vidispine-service/service/${serviceName}/disable`
 *
 * @function service.disableService
 * @param {Object} obj
 * @param {string} obj.serviceName
 * @returns {Promise<Object>}
 */


function disableService(_ref4) {
  var _ref4$serviceName = _ref4.serviceName,
      serviceName = _ref4$serviceName === void 0 ? isRequired() : _ref4$serviceName,
      props = _objectWithoutProperties(_ref4, ["serviceName"]);

  var path = "/API/vidispine-service/service/".concat(serviceName, "/disable");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/vidispine-service.html APIdoc}
 *
 * `GET /API/vidispine-service/stacktrace`
 *
 * @function service.getStackTrace
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getStackTrace() {
  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref5$headers = _ref5.headers,
      propHeaders = _ref5$headers === void 0 ? {} : _ref5$headers,
      props = _objectWithoutProperties(_ref5, ["headers"]);

  var path = '/API/vidispine-service/stacktrace';

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}

var service = {
  getServiceList: getServiceList,
  getService: getService,
  enableService: enableService,
  disableService: disableService,
  getStackTrace: getStackTrace
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/placeholder`
 *
 * @function shape.createShapePlaceholder
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */

function createShapePlaceholder(_ref) {
  var _ref$itemId = _ref.itemId,
      itemId = _ref$itemId === void 0 ? isRequired() : _ref$itemId,
      _ref$metadataDocument = _ref.metadataDocument,
      metadataDocument = _ref$metadataDocument === void 0 ? {} : _ref$metadataDocument,
      _ref$headers = _ref.headers,
      propHeaders = _ref$headers === void 0 ? {} : _ref$headers,
      props = _objectWithoutProperties(_ref, ["itemId", "metadataDocument", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  var path = "/API/item/".concat(itemId, "/shape/placeholder");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: metadataDocument,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/create`
 *
 * @function shape.createShape
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {Object} obj.shapeDocument
 * @returns {Promise<Object>}
 */


function createShape(_ref2) {
  var _ref2$itemId = _ref2.itemId,
      itemId = _ref2$itemId === void 0 ? isRequired() : _ref2$itemId,
      _ref2$shapeDocument = _ref2.shapeDocument,
      shapeDocument = _ref2$shapeDocument === void 0 ? {} : _ref2$shapeDocument,
      props = _objectWithoutProperties(_ref2, ["itemId", "shapeDocument"]);

  var path = "/API/item/".concat(itemId, "/shape/create");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: shapeDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `PUT /API/item/${itemId}/shape/${shapeId}/placeholder`
 *
 * @function shape.updateShapePlaceholder
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {Object} obj.simpleMetadataDocument
 * @returns {Promise<Object>}
 */


function updateShapePlaceholder(_ref3) {
  var _ref3$itemId = _ref3.itemId,
      itemId = _ref3$itemId === void 0 ? isRequired() : _ref3$itemId,
      _ref3$shapeId = _ref3.shapeId,
      shapeId = _ref3$shapeId === void 0 ? isRequired() : _ref3$shapeId,
      _ref3$simpleMetadataD = _ref3.simpleMetadataDocument,
      simpleMetadataDocument = _ref3$simpleMetadataD === void 0 ? {} : _ref3$simpleMetadataD,
      props = _objectWithoutProperties(_ref3, ["itemId", "shapeId", "simpleMetadataDocument"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/placeholder");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: simpleMetadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/`
 *
 * @function shape.createShapeImport
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function createShapeImport(_ref4) {
  var _ref4$itemId = _ref4.itemId,
      itemId = _ref4$itemId === void 0 ? isRequired() : _ref4$itemId,
      props = _objectWithoutProperties(_ref4, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/shape/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/imp`
 *
 * @function shape.createShapeImportImp
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function createShapeImportImp(_ref5) {
  var _ref5$itemId = _ref5.itemId,
      itemId = _ref5$itemId === void 0 ? isRequired() : _ref5$itemId,
      props = _objectWithoutProperties(_ref5, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/shape/imp");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/raw`
 *
 * @function shape.createShapeImportRaw
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {Object} obj.file
 * @returns {Promise<Object>}
 */


function createShapeImportRaw(_ref6) {
  var _ref6$itemId = _ref6.itemId,
      itemId = _ref6$itemId === void 0 ? isRequired() : _ref6$itemId,
      _ref6$headers = _ref6.headers,
      propHeaders = _ref6$headers === void 0 ? {} : _ref6$headers,
      file = _ref6.file,
      props = _objectWithoutProperties(_ref6, ["itemId", "headers", "file"]);

  var path = "/API/item/".concat(itemId, "/shape/raw");

  var headers = _objectSpread2({
    contentType: 'application/octet-stream'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: file,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `GET /API/item/${itemId}/shape/`
 *
 * @function shape.listShape
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function listShape(_ref7) {
  var _ref7$itemId = _ref7.itemId,
      itemId = _ref7$itemId === void 0 ? isRequired() : _ref7$itemId,
      props = _objectWithoutProperties(_ref7, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/shape/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `GET /API/item/${itemId}/shape/${shapeId}/`
 *
 * @function shape.getShape
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function getShape(_ref8) {
  var _ref8$itemId = _ref8.itemId,
      itemId = _ref8$itemId === void 0 ? isRequired() : _ref8$itemId,
      _ref8$shapeId = _ref8.shapeId,
      shapeId = _ref8$shapeId === void 0 ? isRequired() : _ref8$shapeId,
      props = _objectWithoutProperties(_ref8, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `GET /API/item/${itemId}/shape/${shapeId}/graph`
 *
 * @function shape.getShapeGraph
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function getShapeGraph(_ref9) {
  var _ref9$itemId = _ref9.itemId,
      itemId = _ref9$itemId === void 0 ? isRequired() : _ref9$itemId,
      _ref9$shapeId = _ref9.shapeId,
      shapeId = _ref9$shapeId === void 0 ? isRequired() : _ref9$shapeId,
      _ref9$headers = _ref9.headers,
      propHeaders = _ref9$headers === void 0 ? {} : _ref9$headers,
      props = _objectWithoutProperties(_ref9, ["itemId", "shapeId", "headers"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/graph");

  var headers = _objectSpread2({
    accept: 'image/png'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `GET /API/item/${itemId}/shape/${shapeId}/graph/dot`
 *
 * @function shape.getShapeGraphDot
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function getShapeGraphDot(_ref10) {
  var _ref10$itemId = _ref10.itemId,
      itemId = _ref10$itemId === void 0 ? isRequired() : _ref10$itemId,
      _ref10$shapeId = _ref10.shapeId,
      shapeId = _ref10$shapeId === void 0 ? isRequired() : _ref10$shapeId,
      _ref10$headers = _ref10.headers,
      propHeaders = _ref10$headers === void 0 ? {} : _ref10$headers,
      props = _objectWithoutProperties(_ref10, ["itemId", "shapeId", "headers"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/graph/dot");

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `GET /API/item/${itemId}/shape/${shapeId}/cpl`
 *
 * @function shape.getShapeCpl
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function getShapeCpl(_ref11) {
  var _ref11$itemId = _ref11.itemId,
      itemId = _ref11$itemId === void 0 ? isRequired() : _ref11$itemId,
      _ref11$shapeId = _ref11.shapeId,
      shapeId = _ref11$shapeId === void 0 ? isRequired() : _ref11$shapeId,
      _ref11$headers = _ref11.headers,
      propHeaders = _ref11$headers === void 0 ? {} : _ref11$headers,
      props = _objectWithoutProperties(_ref11, ["itemId", "shapeId", "headers"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/cpl");

  var headers = _objectSpread2({
    accept: 'application/xml'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/${shapeId}/transcode`
 *
 * @function shape.createShapeTranscode
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function createShapeTranscode(_ref12) {
  var _ref12$itemId = _ref12.itemId,
      itemId = _ref12$itemId === void 0 ? isRequired() : _ref12$itemId,
      _ref12$shapeId = _ref12.shapeId,
      shapeId = _ref12$shapeId === void 0 ? isRequired() : _ref12$shapeId,
      props = _objectWithoutProperties(_ref12, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/transcode");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `GET /API/item/${itemId}/shape/version`
 *
 * @function shape.listShapeEssence
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function listShapeEssence(_ref13) {
  var _ref13$itemId = _ref13.itemId,
      itemId = _ref13$itemId === void 0 ? isRequired() : _ref13$itemId,
      props = _objectWithoutProperties(_ref13, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/shape/version");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `GET /API/item/${itemId}/shape/version/${versionId}`
 *
 * @function shape.getShapeEssence
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.versionId
 * @returns {Promise<Object>}
 */


function getShapeEssence(_ref14) {
  var _ref14$itemId = _ref14.itemId,
      itemId = _ref14$itemId === void 0 ? isRequired() : _ref14$itemId,
      _ref14$versionId = _ref14.versionId,
      versionId = _ref14$versionId === void 0 ? isRequired() : _ref14$versionId,
      props = _objectWithoutProperties(_ref14, ["itemId", "versionId"]);

  var path = "/API/item/".concat(itemId, "/shape/version/").concat(versionId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/shape/version/${versionId}`
 *
 * @function shape.removeShapeEssence
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.versionId
 * @returns {Promise<Object>}
 */


function removeShapeEssence(_ref15) {
  var _ref15$itemId = _ref15.itemId,
      itemId = _ref15$itemId === void 0 ? isRequired() : _ref15$itemId,
      _ref15$versionId = _ref15.versionId,
      versionId = _ref15$versionId === void 0 ? isRequired() : _ref15$versionId,
      props = _objectWithoutProperties(_ref15, ["itemId", "versionId"]);

  var path = "/API/item/".concat(itemId, "/shape/version/").concat(versionId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/version/`
 *
 * @function shape.copyShapeEssence
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function copyShapeEssence(_ref16) {
  var _ref16$itemId = _ref16.itemId,
      itemId = _ref16$itemId === void 0 ? isRequired() : _ref16$itemId,
      props = _objectWithoutProperties(_ref16, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/shape/version/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/version/${versionId}`
 *
 * @function shape.copyShapeEssenceSpecific
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.versionId
 * @returns {Promise<Object>}
 */


function copyShapeEssenceSpecific(_ref17) {
  var _ref17$itemId = _ref17.itemId,
      itemId = _ref17$itemId === void 0 ? isRequired() : _ref17$itemId,
      _ref17$versionId = _ref17.versionId,
      versionId = _ref17$versionId === void 0 ? isRequired() : _ref17$versionId,
      props = _objectWithoutProperties(_ref17, ["itemId", "versionId"]);

  var path = "/API/item/".concat(itemId, "/shape/version/").concat(versionId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/essence`
 *
 * @function shape.createShapeEssenceImport
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function createShapeEssenceImport(_ref18) {
  var _ref18$itemId = _ref18.itemId,
      itemId = _ref18$itemId === void 0 ? isRequired() : _ref18$itemId,
      props = _objectWithoutProperties(_ref18, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/shape/essence");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/essence/raw`
 *
 * @function shape.createShapeEssenceImportRaw
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {Object} obj.file
 * @returns {Promise<Object>}
 */


function createShapeEssenceImportRaw(_ref19) {
  var _ref19$itemId = _ref19.itemId,
      itemId = _ref19$itemId === void 0 ? isRequired() : _ref19$itemId,
      _ref19$headers = _ref19.headers,
      propHeaders = _ref19$headers === void 0 ? {} : _ref19$headers,
      file = _ref19.file,
      props = _objectWithoutProperties(_ref19, ["itemId", "headers", "file"]);

  var path = "/API/item/".concat(itemId, "/shape/essence/raw");

  var headers = _objectSpread2({
    contentType: 'application/octet-stream'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    body: file,
    method: 'POST',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/shape/${shapeId}`
 *
 * @function shape.removeShape
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function removeShape() {
  var _ref20 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref20$itemId = _ref20.itemId,
      itemId = _ref20$itemId === void 0 ? isRequired() : _ref20$itemId,
      _ref20$shapeId = _ref20.shapeId,
      shapeId = _ref20$shapeId === void 0 ? isRequired() : _ref20$shapeId,
      props = _objectWithoutProperties(_ref20, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/shape/`
 *
 * @function shape.removeShapeAll
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function removeShapeAll() {
  var _ref21 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref21$itemId = _ref21.itemId,
      itemId = _ref21$itemId === void 0 ? isRequired() : _ref21$itemId,
      props = _objectWithoutProperties(_ref21, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/shape/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/transcode.html#transcode-a-specific-shape APIdoc}
 *
 * `POST /API/item/${itemId}/shape/${shapeId}/transcode`
 *
 * @function shape.createTranscode
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function createTranscode$1(_ref22) {
  var _ref22$itemId = _ref22.itemId,
      itemId = _ref22$itemId === void 0 ? isRequired() : _ref22$itemId,
      _ref22$shapeId = _ref22.shapeId,
      shapeId = _ref22$shapeId === void 0 ? isRequired() : _ref22$shapeId,
      props = _objectWithoutProperties(_ref22, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/transcode");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/${shapeId}/thumbnail`
 *
 * @function shape.createThumbnail
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function createThumbnail$1(_ref23) {
  var _ref23$itemId = _ref23.itemId,
      itemId = _ref23$itemId === void 0 ? isRequired() : _ref23$itemId,
      _ref23$shapeId = _ref23.shapeId,
      shapeId = _ref23$shapeId === void 0 ? isRequired() : _ref23$shapeId,
      props = _objectWithoutProperties(_ref23, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/thumbnail");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/${shapeId}/update`
 *
 * @function shape.createDeduction
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function createDeduction(_ref24) {
  var _ref24$itemId = _ref24.itemId,
      itemId = _ref24$itemId === void 0 ? isRequired() : _ref24$itemId,
      _ref24$shapeId = _ref24.shapeId,
      shapeId = _ref24$shapeId === void 0 ? isRequired() : _ref24$shapeId,
      props = _objectWithoutProperties(_ref24, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/update");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `GET /API/item/${itemId}/shape/${shapeId}file`
 *
 * @function shape.listShapeFile
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function listShapeFile(_ref25) {
  var _ref25$itemId = _ref25.itemId,
      itemId = _ref25$itemId === void 0 ? isRequired() : _ref25$itemId,
      _ref25$shapeId = _ref25.shapeId,
      shapeId = _ref25$shapeId === void 0 ? isRequired() : _ref25$shapeId,
      props = _objectWithoutProperties(_ref25, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "file");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `GET /API/item/${itemId}/shape/${shapeId}/tag`
 *
 * @function shape.getShapeTag
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function getShapeTag(_ref26) {
  var _ref26$itemId = _ref26.itemId,
      itemId = _ref26$itemId === void 0 ? isRequired() : _ref26$itemId,
      _ref26$shapeId = _ref26.shapeId,
      shapeId = _ref26$shapeId === void 0 ? isRequired() : _ref26$shapeId,
      props = _objectWithoutProperties(_ref26, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/tag");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `PUT /API/item/${itemId}/shape/${shapeId}/tag/${tagName}`
 *
 * @function shape.updateShapeTag
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.tagName
 * @returns {Promise<Object>}
 */


function updateShapeTag(_ref27) {
  var _ref27$itemId = _ref27.itemId,
      itemId = _ref27$itemId === void 0 ? isRequired() : _ref27$itemId,
      _ref27$shapeId = _ref27.shapeId,
      shapeId = _ref27$shapeId === void 0 ? isRequired() : _ref27$shapeId,
      _ref27$tagName = _ref27.tagName,
      tagName = _ref27$tagName === void 0 ? isRequired() : _ref27$tagName,
      props = _objectWithoutProperties(_ref27, ["itemId", "shapeId", "tagName"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/tag/").concat(tagName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/shape/${shapeId}/tag/${tagName}`
 *
 * @function shape.removeShapeTag
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.tagName
 * @returns {Promise<Object>}
 */


function removeShapeTag(_ref28) {
  var _ref28$itemId = _ref28.itemId,
      itemId = _ref28$itemId === void 0 ? isRequired() : _ref28$itemId,
      _ref28$shapeId = _ref28.shapeId,
      shapeId = _ref28$shapeId === void 0 ? isRequired() : _ref28$shapeId,
      _ref28$tagName = _ref28.tagName,
      tagName = _ref28$tagName === void 0 ? isRequired() : _ref28$tagName,
      props = _objectWithoutProperties(_ref28, ["itemId", "shapeId", "tagName"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/tag/").concat(tagName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `GET /API/item/${itemId}/shape/${shapeId}/mime`
 *
 * @function shape.getShapeMime
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function getShapeMime(_ref29) {
  var _ref29$itemId = _ref29.itemId,
      itemId = _ref29$itemId === void 0 ? isRequired() : _ref29$itemId,
      _ref29$shapeId = _ref29.shapeId,
      shapeId = _ref29$shapeId === void 0 ? isRequired() : _ref29$shapeId,
      props = _objectWithoutProperties(_ref29, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/mime");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `PUT /API/item/${itemId}/shape/${shapeId}/mime/${mimeType}`
 *
 * @function shape.updateShapeMime
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.mimeType
 * @returns {Promise<Object>}
 */


function updateShapeMime(_ref30) {
  var _ref30$itemId = _ref30.itemId,
      itemId = _ref30$itemId === void 0 ? isRequired() : _ref30$itemId,
      _ref30$shapeId = _ref30.shapeId,
      shapeId = _ref30$shapeId === void 0 ? isRequired() : _ref30$shapeId,
      _ref30$mimeType = _ref30.mimeType,
      mimeType = _ref30$mimeType === void 0 ? isRequired() : _ref30$mimeType,
      props = _objectWithoutProperties(_ref30, ["itemId", "shapeId", "mimeType"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/mime/").concat(mimeType);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/shape/${shapeId}/mime/${mimeType}`
 *
 * @function shape.removeShapeMime
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.mimeType
 * @returns {Promise<Object>}
 */


function removeShapeMime(_ref31) {
  var _ref31$itemId = _ref31.itemId,
      itemId = _ref31$itemId === void 0 ? isRequired() : _ref31$itemId,
      _ref31$shapeId = _ref31.shapeId,
      shapeId = _ref31$shapeId === void 0 ? isRequired() : _ref31$shapeId,
      _ref31$mimeType = _ref31.mimeType,
      mimeType = _ref31$mimeType === void 0 ? isRequired() : _ref31$mimeType,
      props = _objectWithoutProperties(_ref31, ["itemId", "shapeId", "mimeType"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/mime/").concat(mimeType);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `GET /API/item/${itemId}/shape/${shapeId}/filename`
 *
 * @function shape.getShapeFileNameRule
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function getShapeFileNameRule(_ref32) {
  var _ref32$itemId = _ref32.itemId,
      itemId = _ref32$itemId === void 0 ? isRequired() : _ref32$itemId,
      _ref32$shapeId = _ref32.shapeId,
      shapeId = _ref32$shapeId === void 0 ? isRequired() : _ref32$shapeId,
      props = _objectWithoutProperties(_ref32, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/filename");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `PUT /API/item/${itemId}/shape/${shapeId}/filename/${storageId}`
 *
 * @function shape.createShapeFileNameRule
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.storageId
 * @param {Object} obj.queryParams
 * @returns {Promise<Object>}
 */


function createShapeFileNameRule(_ref33) {
  var _ref33$itemId = _ref33.itemId,
      itemId = _ref33$itemId === void 0 ? isRequired() : _ref33$itemId,
      _ref33$shapeId = _ref33.shapeId,
      shapeId = _ref33$shapeId === void 0 ? isRequired() : _ref33$shapeId,
      _ref33$storageId = _ref33.storageId,
      storageId = _ref33$storageId === void 0 ? isRequired() : _ref33$storageId,
      _ref33$queryParams = _ref33.queryParams,
      queryParams = _ref33$queryParams === void 0 ? isRequired() : _ref33$queryParams,
      props = _objectWithoutProperties(_ref33, ["itemId", "shapeId", "storageId", "queryParams"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/filename/").concat(storageId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    queryParams: queryParams
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/shape/${shapeId}/filename/${storageId}`
 *
 * @function shape.removeShapeFileNameRule
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function removeShapeFileNameRule(_ref34) {
  var _ref34$itemId = _ref34.itemId,
      itemId = _ref34$itemId === void 0 ? isRequired() : _ref34$itemId,
      _ref34$shapeId = _ref34.shapeId,
      shapeId = _ref34$shapeId === void 0 ? isRequired() : _ref34$shapeId,
      _ref34$storageId = _ref34.storageId,
      storageId = _ref34$storageId === void 0 ? isRequired() : _ref34$storageId,
      props = _objectWithoutProperties(_ref34, ["itemId", "shapeId", "storageId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/filename/").concat(storageId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/shape.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/${shapeId}/analyze`
 *
 * @function shape.createShapeAnalyze
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {Object} obj.analyzeJobDocument
 * @returns {Promise<Object>}
 */


function createShapeAnalyze(_ref35) {
  var _ref35$itemId = _ref35.itemId,
      itemId = _ref35$itemId === void 0 ? isRequired() : _ref35$itemId,
      _ref35$shapeId = _ref35.shapeId,
      shapeId = _ref35$shapeId === void 0 ? isRequired() : _ref35$shapeId,
      analyzeJobDocument = _ref35.analyzeJobDocument,
      props = _objectWithoutProperties(_ref35, ["itemId", "shapeId", "analyzeJobDocument"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/analyze");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: analyzeJobDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/analyze.html#start-a-smart-cropping-job APIdoc}
 *
 * `POST /API/item/${itemId}/shape/${shapeId}/smartcrop-render`
 *
 * @function shape.createSmartcrop
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function createSmartcrop(_ref36) {
  var _ref36$itemId = _ref36.itemId,
      itemId = _ref36$itemId === void 0 ? isRequired() : _ref36$itemId,
      _ref36$shapeId = _ref36.shapeId,
      shapeId = _ref36$shapeId === void 0 ? isRequired() : _ref36$shapeId,
      props = _objectWithoutProperties(_ref36, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/smartcrop-render");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/analyze.html#get-a-smart-cropping-edl APIdoc}
 *
 * `GET /API/item/${itemId}/shape/${shapeId}/smartcrop-edl`
 *
 * @function shape.getSmartcrop
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */

function getSmartcrop(_ref37) {
  var _ref37$itemId = _ref37.itemId,
      itemId = _ref37$itemId === void 0 ? isRequired() : _ref37$itemId,
      _ref37$shapeId = _ref37.shapeId,
      shapeId = _ref37$shapeId === void 0 ? isRequired() : _ref37$shapeId,
      props = _objectWithoutProperties(_ref37, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/smartcrop-edl");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/analyze.html#start-a-highlight-reel-creation-job APIdoc}
 *
 * `POST /API/item/${itemId}/shape/${shapeId}/highlight-render`
 *
 * @function shape.createHighlight
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */

function createHighlight(_ref38) {
  var _ref38$itemId = _ref38.itemId,
      itemId = _ref38$itemId === void 0 ? isRequired() : _ref38$itemId,
      _ref38$shapeId = _ref38.shapeId,
      shapeId = _ref38$shapeId === void 0 ? isRequired() : _ref38$shapeId,
      props = _objectWithoutProperties(_ref38, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/highlight-render");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/analyze.html#get-a-highlight-reel-edl APIdoc}
 *
 * `GET /API/item/${itemId}/shape/${shapeId}/highlighter-edl`
 *
 * @function shape.getHighlight
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */

function getHighlight(_ref39) {
  var _ref39$itemId = _ref39.itemId,
      itemId = _ref39$itemId === void 0 ? isRequired() : _ref39$itemId,
      _ref39$shapeId = _ref39.shapeId,
      shapeId = _ref39$shapeId === void 0 ? isRequired() : _ref39$shapeId,
      props = _objectWithoutProperties(_ref39, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/highlighter-edl");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
var shape = {
  createShapePlaceholder: createShapePlaceholder,
  createShape: createShape,
  updateShapePlaceholder: updateShapePlaceholder,
  createShapeImport: createShapeImport,
  createShapeImportImp: createShapeImportImp,
  createShapeImportRaw: createShapeImportRaw,
  listShape: listShape,
  getShape: getShape,
  getShapeGraph: getShapeGraph,
  getShapeGraphDot: getShapeGraphDot,
  getShapeCpl: getShapeCpl,
  createShapeTranscode: createShapeTranscode,
  listShapeEssence: listShapeEssence,
  getShapeEssence: getShapeEssence,
  removeShapeEssence: removeShapeEssence,
  copyShapeEssence: copyShapeEssence,
  copyShapeEssenceSpecific: copyShapeEssenceSpecific,
  createShapeEssenceImport: createShapeEssenceImport,
  createShapeEssenceImportRaw: createShapeEssenceImportRaw,
  removeShape: removeShape,
  removeShapeAll: removeShapeAll,
  createTranscode: createTranscode$1,
  createThumbnail: createThumbnail$1,
  createDeduction: createDeduction,
  listShapeFile: listShapeFile,
  getShapeTag: getShapeTag,
  updateShapeTag: updateShapeTag,
  removeShapeTag: removeShapeTag,
  getShapeMime: getShapeMime,
  updateShapeMime: updateShapeMime,
  removeShapeMime: removeShapeMime,
  getShapeFileNameRule: getShapeFileNameRule,
  createShapeFileNameRule: createShapeFileNameRule,
  removeShapeFileNameRule: removeShapeFileNameRule,
  createShapeAnalyze: createShapeAnalyze,
  createSmartcrop: createSmartcrop,
  getSmartcrop: getSmartcrop,
  createHighlight: createHighlight,
  getHighlight: getHighlight
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/shape-tag.html APIdoc}
 *
 * `GET /API/shape-tag/`
 *
 * @function shapetag.listShapeTag
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listShapeTag() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/shape-tag/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/shape-tag.html APIdoc}
 *
 * `GET /API/shape-tag/${tagName}`
 *
 * @function shapetag.getShapeTag
 * @param {Object} obj
 * @param {string} obj.tagName
 * @returns {Promise<Object>}
 */


function getShapeTag$1(_ref2) {
  var _ref2$tagName = _ref2.tagName,
      tagName = _ref2$tagName === void 0 ? isRequired() : _ref2$tagName,
      props = _objectWithoutProperties(_ref2, ["tagName"]);

  var path = "/API/shape-tag/".concat(tagName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/shape-tag.html APIdoc}
 *
 * `PUT /API/shape-tag/${tagName}`
 *
 * @function shapetag.updateShapeTag
 * @param {Object} obj
 * @param {string} obj.tagName
 * @param {Object} obj.transcodePresetDocument
 * @returns {Promise<Object>}
 */


function updateShapeTag$1(_ref3) {
  var _ref3$tagName = _ref3.tagName,
      tagName = _ref3$tagName === void 0 ? isRequired() : _ref3$tagName,
      transcodePresetDocument = _ref3.transcodePresetDocument,
      props = _objectWithoutProperties(_ref3, ["tagName", "transcodePresetDocument"]);

  var path = "/API/shape-tag/".concat(tagName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: transcodePresetDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/shape-tag.html APIdoc}
 *
 * `DELETE /API/shape-tag/${tagName}`
 *
 * @function shapetag.removeShapeTag
 * @param {Object} obj
 * @param {string} obj.tagName
 * @returns {Promise<Object>}
 */


function removeShapeTag$1(_ref4) {
  var _ref4$tagName = _ref4.tagName,
      tagName = _ref4$tagName === void 0 ? isRequired() : _ref4$tagName,
      props = _objectWithoutProperties(_ref4, ["tagName"]);

  var path = "/API/shape-tag/".concat(tagName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/shape-tag.html APIdoc}
 *
 * `GET /API/shape-tag/${tagName}/script`
 *
 * @function shapetag.getShapeTagScript
 * @param {Object} obj
 * @param {string} obj.tagName
 * @returns {Promise<Object>}
 */


function getShapeTagScript(_ref5) {
  var _ref5$tagName = _ref5.tagName,
      tagName = _ref5$tagName === void 0 ? isRequired() : _ref5$tagName,
      _ref5$headers = _ref5.headers,
      propHeaders = _ref5$headers === void 0 ? {} : _ref5$headers,
      props = _objectWithoutProperties(_ref5, ["tagName", "headers"]);

  var headers = _objectSpread2({
    accept: 'application/javascript'
  }, propHeaders);

  var path = "/API/shape-tag/".concat(tagName, "/script");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/shape-tag.html APIdoc}
 *
 * `PUT /API/shape-tag/${tagName}/script`
 *
 * @function shapetag.updateShapeTagScript
 * @param {Object} obj
 * @param {string} obj.tagName
 * @param {Object} obj.shapeTagScript
 * @returns {Promise<Object>}
 */


function updateShapeTagScript(_ref6) {
  var _ref6$tagName = _ref6.tagName,
      tagName = _ref6$tagName === void 0 ? isRequired() : _ref6$tagName,
      shapeTagScript = _ref6.shapeTagScript,
      _ref6$headers = _ref6.headers,
      propHeaders = _ref6$headers === void 0 ? {} : _ref6$headers,
      props = _objectWithoutProperties(_ref6, ["tagName", "shapeTagScript", "headers"]);

  var headers = _objectSpread2({
    contentType: 'application/javascript'
  }, propHeaders);

  var path = "/API/shape-tag/".concat(tagName, "/script");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: shapeTagScript,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/shape-tag.html APIdoc}
 *
 * `DELETE /API/shape-tag/${tagName}/script`
 *
 * @function shapetag.removeShapeTagScript
 * @param {Object} obj
 * @param {string} obj.tagName
 * @returns {Promise<Object>}
 */


function removeShapeTagScript(_ref7) {
  var _ref7$tagName = _ref7.tagName,
      tagName = _ref7$tagName === void 0 ? isRequired() : _ref7$tagName,
      props = _objectWithoutProperties(_ref7, ["tagName"]);

  var path = "/API/shape-tag/".concat(tagName, "/script");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/shape-tag.html APIdoc}
 *
 * `GET /API/shape-tag/${tagName}/item/${itemId}/shape/${shapeId}/`
 *
 * @function shapetag.testShapeTagScript
 * @param {Object} obj
 * @param {string} obj.tagName
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function testShapeTagScript(_ref8) {
  var _ref8$tagName = _ref8.tagName,
      tagName = _ref8$tagName === void 0 ? isRequired() : _ref8$tagName,
      _ref8$itemId = _ref8.itemId,
      itemId = _ref8$itemId === void 0 ? isRequired() : _ref8$itemId,
      _ref8$shapeId = _ref8.shapeId,
      shapeId = _ref8$shapeId === void 0 ? isRequired() : _ref8$shapeId,
      props = _objectWithoutProperties(_ref8, ["tagName", "itemId", "shapeId"]);

  var path = "/API/shape-tag/".concat(tagName, "/item/").concat(itemId, "/shape/").concat(shapeId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/shape-tag.html APIdoc}
 *
 * `PUT /APIinit/preset-templates`
 *
 * @function shapetag.createShapeTagPreset
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function createShapeTagPreset() {
  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref9);

  var path = '/APIinit/preset-templates';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}

var shapetag = {
  listShapeTag: listShapeTag,
  getShapeTag: getShapeTag$1,
  updateShapeTag: updateShapeTag$1,
  removeShapeTag: removeShapeTag$1,
  getShapeTagScript: getShapeTagScript,
  updateShapeTagScript: updateShapeTagScript,
  removeShapeTagScript: removeShapeTagScript,
  testShapeTagScript: testShapeTagScript,
  createShapeTagPreset: createShapeTagPreset
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `GET /API/storage/`
 *
 * @function storage.listStorage
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listStorage() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/storage/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `POST /API/storage/`
 *
 * @function storage.createStorage
 * @param {Object} obj
 * @param {Object} obj.storageDocument
 * @returns {Promise<Object>}
 */


function createStorage(_ref2) {
  var storageDocument = _ref2.storageDocument,
      props = _objectWithoutProperties(_ref2, ["storageDocument"]);

  var path = '/API/storage/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: storageDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `GET /API/storage/${storageId}/`
 *
 * @function storage.getStorage
 * @param {Object} obj
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function getStorage(_ref3) {
  var _ref3$storageId = _ref3.storageId,
      storageId = _ref3$storageId === void 0 ? isRequired() : _ref3$storageId,
      props = _objectWithoutProperties(_ref3, ["storageId"]);

  var path = "/API/storage/".concat(storageId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `PUT /API/storage/${storageId}/`
 *
 * @function storage.modifyStorage
 * @param {Object} obj
 * @param {string} obj.storageId
 * @param {Object} obj.storageDocument
 * @returns {Promise<Object>}
 */


function modifyStorage(_ref4) {
  var _ref4$storageId = _ref4.storageId,
      storageId = _ref4$storageId === void 0 ? isRequired() : _ref4$storageId,
      storageDocument = _ref4.storageDocument,
      props = _objectWithoutProperties(_ref4, ["storageId", "storageDocument"]);

  var path = "/API/storage/".concat(storageId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: storageDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `PUT /API/storage/${storageId}/metadata`
 *
 * @function storage.modifyStorageMetadata
 * @param {Object} obj
 * @param {string} obj.storageId
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */


function modifyStorageMetadata(_ref5) {
  var _ref5$storageId = _ref5.storageId,
      storageId = _ref5$storageId === void 0 ? isRequired() : _ref5$storageId,
      metadataDocument = _ref5.metadataDocument,
      props = _objectWithoutProperties(_ref5, ["storageId", "metadataDocument"]);

  var path = "/API/storage/".concat(storageId, "/metadata");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `PUT /API/storage/${storageId}/metadata/${key}`
 *
 * @function storage.modifyStorageMetadataKey
 * @param {Object} obj
 * @param {string} obj.storageId
 * @param {string} obj.key
 * @param {string} obj.metadataValue
 * @returns {Promise<Object>}
 */


function modifyStorageMetadataKey(_ref6) {
  var _ref6$storageId = _ref6.storageId,
      storageId = _ref6$storageId === void 0 ? isRequired() : _ref6$storageId,
      _ref6$key = _ref6.key,
      key = _ref6$key === void 0 ? isRequired() : _ref6$key,
      metadataValue = _ref6.metadataValue,
      _ref6$headers = _ref6.headers,
      propHeaders = _ref6$headers === void 0 ? {} : _ref6$headers,
      props = _objectWithoutProperties(_ref6, ["storageId", "key", "metadataValue", "headers"]);

  var headers = _objectSpread2({
    contentType: 'text/plain'
  }, propHeaders);

  var path = "/API/storage/".concat(storageId, "/metadata/").concat(key);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metadataValue,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `DELETE /API/storage/${storageId}/metadata/${key}`
 *
 * @function storage.removeStorageMetadata
 * @param {Object} obj
 * @param {string} obj.storageId
 * @param {string} obj.key
 * @returns {Promise<Object>}
 */


function removeStorageMetadata(_ref7) {
  var _ref7$storageId = _ref7.storageId,
      storageId = _ref7$storageId === void 0 ? isRequired() : _ref7$storageId,
      _ref7$key = _ref7.key,
      key = _ref7$key === void 0 ? isRequired() : _ref7$key,
      props = _objectWithoutProperties(_ref7, ["storageId", "key"]);

  var path = "/API/storage/".concat(storageId, "/metadata/").concat(key);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `POST /API/storage/${storageId}/rescan`
 *
 * @function storage.rescanStorage
 * @param {Object} obj
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function rescanStorage(_ref8) {
  var _ref8$storageId = _ref8.storageId,
      storageId = _ref8$storageId === void 0 ? isRequired() : _ref8$storageId,
      props = _objectWithoutProperties(_ref8, ["storageId"]);

  var path = "/API/storage/".concat(storageId, "/rescan");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `PUT /API/storage/${storageId}/method/`
 *
 * @function storage.createStorageMethod
 * @param {Object} obj
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function createStorageMethod(_ref9) {
  var _ref9$storageId = _ref9.storageId,
      storageId = _ref9$storageId === void 0 ? isRequired() : _ref9$storageId,
      _ref9$headers = _ref9.headers,
      propHeaders = _ref9$headers === void 0 ? {} : _ref9$headers,
      props = _objectWithoutProperties(_ref9, ["storageId", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  var path = "/API/storage/".concat(storageId, "/method/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `PUT /API/storage/${storageId}/method/${storageMethodId}/`
 *
 * @function storage.modifyStorageMethod
 * @param {Object} obj
 * @param {string} obj.storageId
 * @param {string} obj.storageMethodId
 * @returns {Promise<Object>}
 */


function modifyStorageMethod(_ref10) {
  var _ref10$storageId = _ref10.storageId,
      storageId = _ref10$storageId === void 0 ? isRequired() : _ref10$storageId,
      _ref10$storageMethodI = _ref10.storageMethodId,
      storageMethodId = _ref10$storageMethodI === void 0 ? isRequired() : _ref10$storageMethodI,
      _ref10$headers = _ref10.headers,
      propHeaders = _ref10$headers === void 0 ? {} : _ref10$headers,
      props = _objectWithoutProperties(_ref10, ["storageId", "storageMethodId", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  var path = "/API/storage/".concat(storageId, "/method/").concat(storageMethodId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `DELETE /API/storage/${storageId}/method/${storageMethodId}`
 *
 * @function storage.removeStorageMethod
 * @param {Object} obj
 * @param {string} obj.storageId
 * @param {string} obj.storageMethodId
 * @returns {Promise<Object>}
 */


function removeStorageMethod(_ref11) {
  var _ref11$storageId = _ref11.storageId,
      storageId = _ref11$storageId === void 0 ? isRequired() : _ref11$storageId,
      _ref11$storageMethodI = _ref11.storageMethodId,
      storageMethodId = _ref11$storageMethodI === void 0 ? isRequired() : _ref11$storageMethodI,
      _ref11$headers = _ref11.headers,
      propHeaders = _ref11$headers === void 0 ? {} : _ref11$headers,
      props = _objectWithoutProperties(_ref11, ["storageId", "storageMethodId", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  var path = "/API/storage/".concat(storageId, "/method/").concat(storageMethodId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `GET /API/storage/${storageId}/method/${storageMethodId}`
 *
 * @function storage.getStorageMethod
 * @param {Object} obj
 * @param {string} obj.storageId
 * @param {string} obj.storageMethodId
 * @returns {Promise<Object>}
 */


function getStorageMethod(_ref12) {
  var _ref12$storageId = _ref12.storageId,
      storageId = _ref12$storageId === void 0 ? isRequired() : _ref12$storageId,
      _ref12$storageMethodI = _ref12.storageMethodId,
      storageMethodId = _ref12$storageMethodI === void 0 ? isRequired() : _ref12$storageMethodI,
      props = _objectWithoutProperties(_ref12, ["storageId", "storageMethodId"]);

  var path = "/API/storage/".concat(storageId, "/method/").concat(storageMethodId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `GET /API/storage/${storageId}/method/`
 *
 * @function storage.listStorageMethod
 * @param {Object} obj
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function listStorageMethod(_ref13) {
  var _ref13$storageId = _ref13.storageId,
      storageId = _ref13$storageId === void 0 ? isRequired() : _ref13$storageId,
      props = _objectWithoutProperties(_ref13, ["storageId"]);

  var path = "/API/storage/".concat(storageId, "/method/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `DELETE /API/storage/${storageId}/`
 *
 * @function storage.removeStorage
 * @param {Object} obj
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function removeStorage(_ref14) {
  var _ref14$storageId = _ref14.storageId,
      storageId = _ref14$storageId === void 0 ? isRequired() : _ref14$storageId,
      _ref14$headers = _ref14.headers,
      propHeaders = _ref14$headers === void 0 ? {} : _ref14$headers,
      props = _objectWithoutProperties(_ref14, ["storageId", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  var path = "/API/storage/".concat(storageId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `PUT /API/storage/${storageId}/evacuate`
 *
 * @function storage.startEvacuateStorage
 * @param {Object} obj
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function startEvacuateStorage(_ref15) {
  var _ref15$storageId = _ref15.storageId,
      storageId = _ref15$storageId === void 0 ? isRequired() : _ref15$storageId,
      props = _objectWithoutProperties(_ref15, ["storageId"]);

  var path = "/API/storage/".concat(storageId, "/evacuate");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `DELETE /API/storage/${storageId}/evacuate`
 *
 * @function storage.cancelEvacuateStorage
 * @param {Object} obj
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function cancelEvacuateStorage(_ref16) {
  var _ref16$storageId = _ref16.storageId,
      storageId = _ref16$storageId === void 0 ? isRequired() : _ref16$storageId,
      props = _objectWithoutProperties(_ref16, ["storageId"]);

  var path = "/API/storage/".concat(storageId, "/evacuate");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage.html APIdoc}
 *
 * `PUT /API/storage/${storageId}/type/${storageType}`
 *
 * @function storage.updateStorageType
 * @param {Object} obj
 * @param {string} obj.storageId
 * @param {string} obj.storageType
 * @returns {Promise<Object>}
 */


function updateStorageType(_ref17) {
  var _ref17$storageId = _ref17.storageId,
      storageId = _ref17$storageId === void 0 ? isRequired() : _ref17$storageId,
      _ref17$storageType = _ref17.storageType,
      storageType = _ref17$storageType === void 0 ? isRequired() : _ref17$storageType,
      props = _objectWithoutProperties(_ref17, ["storageId", "storageType"]);

  var path = "/API/storage/".concat(storageId, "/type/").concat(storageType);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}

var storage = {
  listStorage: listStorage,
  createStorage: createStorage,
  getStorage: getStorage,
  modifyStorage: modifyStorage,
  modifyStorageMetadata: modifyStorageMetadata,
  modifyStorageMetadataKey: modifyStorageMetadataKey,
  removeStorageMetadata: removeStorageMetadata,
  rescanStorage: rescanStorage,
  createStorageMethod: createStorageMethod,
  modifyStorageMethod: modifyStorageMethod,
  removeStorageMethod: removeStorageMethod,
  getStorageMethod: getStorageMethod,
  listStorageMethod: listStorageMethod,
  removeStorage: removeStorage,
  startEvacuateStorage: startEvacuateStorage,
  cancelEvacuateStorage: cancelEvacuateStorage,
  updateStorageType: updateStorageType
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-rule.html APIdoc}
 *
 * `GET /API/storage-rule/`
 *
 * @function storagerule.listStorageRule
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listStorageRule() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/storage-rule/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-rule.html APIdoc}
 *
 * `GET /API/${entityType}/${entityId}/storage-rule`
 *
 * @function storagerule.getEntityStorageRule
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function getEntityStorageRule(_ref2) {
  var _ref2$entityType = _ref2.entityType,
      entityType = _ref2$entityType === void 0 ? isRequired() : _ref2$entityType,
      _ref2$entityId = _ref2.entityId,
      entityId = _ref2$entityId === void 0 ? isRequired() : _ref2$entityId,
      props = _objectWithoutProperties(_ref2, ["entityType", "entityId"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/storage-rule");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-rule.html APIdoc}
 *
 * `PUT /API/${entityType}/${entityId}/storage-rule`
 *
 * @function storagerule.updateEntityStorageRule
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {Object} obj.storageRuleDocument
 * @returns {Promise<Object>}
 */


function updateEntityStorageRule(_ref3) {
  var _ref3$entityType = _ref3.entityType,
      entityType = _ref3$entityType === void 0 ? isRequired() : _ref3$entityType,
      _ref3$entityId = _ref3.entityId,
      entityId = _ref3$entityId === void 0 ? isRequired() : _ref3$entityId,
      storageRuleDocument = _ref3.storageRuleDocument,
      props = _objectWithoutProperties(_ref3, ["entityType", "entityId", "storageRuleDocument"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/storage-rule");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: storageRuleDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-rule.html APIdoc}
 *
 * `DELETE /API/${entityType}/${entityId}/storage-rule`
 *
 * @function storagerule.removeEntityStorageRule
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */

function removeEntityStorageRule(_ref4) {
  var _ref4$entityType = _ref4.entityType,
      entityType = _ref4$entityType === void 0 ? isRequired() : _ref4$entityType,
      _ref4$entityId = _ref4.entityId,
      entityId = _ref4$entityId === void 0 ? isRequired() : _ref4$entityId,
      props = _objectWithoutProperties(_ref4, ["entityType", "entityId"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/storage-rule");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-rule.html APIdoc}
 *
 * `GET /API/${entityType}/${entityId}/storage-rule/${tagName}`
 *
 * @function storagerule.getEntityStorageRuleTag
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {string} obj.tagName
 * @returns {Promise<Object>}
 */


function getEntityStorageRuleTag(_ref5) {
  var _ref5$entityType = _ref5.entityType,
      entityType = _ref5$entityType === void 0 ? isRequired() : _ref5$entityType,
      _ref5$entityId = _ref5.entityId,
      entityId = _ref5$entityId === void 0 ? isRequired() : _ref5$entityId,
      _ref5$tagName = _ref5.tagName,
      tagName = _ref5$tagName === void 0 ? isRequired() : _ref5$tagName,
      props = _objectWithoutProperties(_ref5, ["entityType", "entityId", "tagName"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/storage-rule/").concat(tagName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-rule.html APIdoc}
 *
 * `PUT /API/${entityType}/${entityId}/storage-rule/${tagName}`
 *
 * @function storagerule.updateEntityStorageRuleTag
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {string} obj.tagName
 * @param {Object} obj.storageRuleDocument
 * @returns {Promise<Object>}
 */


function updateEntityStorageRuleTag(_ref6) {
  var _ref6$entityType = _ref6.entityType,
      entityType = _ref6$entityType === void 0 ? isRequired() : _ref6$entityType,
      _ref6$entityId = _ref6.entityId,
      entityId = _ref6$entityId === void 0 ? isRequired() : _ref6$entityId,
      _ref6$tagName = _ref6.tagName,
      tagName = _ref6$tagName === void 0 ? isRequired() : _ref6$tagName,
      storageRuleDocument = _ref6.storageRuleDocument,
      props = _objectWithoutProperties(_ref6, ["entityType", "entityId", "tagName", "storageRuleDocument"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/storage-rule/").concat(tagName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: storageRuleDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-rule.html APIdoc}
 *
 * `DELETE /API/${entityType}/${entityId}/storage-rule/${tagName}`
 *
 * @function storagerule.removeEntityStorageRuleTag
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {string} obj.tagName
 * @returns {Promise<Object>}
 */

function removeEntityStorageRuleTag(_ref7) {
  var _ref7$entityType = _ref7.entityType,
      entityType = _ref7$entityType === void 0 ? isRequired() : _ref7$entityType,
      _ref7$entityId = _ref7.entityId,
      entityId = _ref7$entityId === void 0 ? isRequired() : _ref7$entityId,
      _ref7$tagName = _ref7.tagName,
      tagName = _ref7$tagName === void 0 ? isRequired() : _ref7$tagName,
      props = _objectWithoutProperties(_ref7, ["entityType", "entityId", "tagName"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/storage-rule/").concat(tagName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-rule.html APIdoc}
 *
 * `GET /API/shape-tag/storage-rule/${tagName}`
 *
 * @function storagerule.getStorageRuleShapeTag
 * @param {Object} obj
 * @param {string} obj.tagName
 * @returns {Promise<Object>}
 */


function getStorageRuleShapeTag(_ref8) {
  var _ref8$tagName = _ref8.tagName,
      tagName = _ref8$tagName === void 0 ? isRequired() : _ref8$tagName,
      props = _objectWithoutProperties(_ref8, ["tagName"]);

  var path = "/API/shape-tag/storage-rule/".concat(tagName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-rule.html APIdoc}
 *
 * `PUT /API/shape-tag/storage-rule/${tagName}`
 *
 * @function storagerule.updateStorageRuleShapeTag
 * @param {Object} obj
 * @param {string} obj.tagName
 * @param {Object} obj.storageRuleDocument
 * @returns {Promise<Object>}
 */


function updateStorageRuleShapeTag(_ref9) {
  var _ref9$tagName = _ref9.tagName,
      tagName = _ref9$tagName === void 0 ? isRequired() : _ref9$tagName,
      storageRuleDocument = _ref9.storageRuleDocument,
      props = _objectWithoutProperties(_ref9, ["tagName", "storageRuleDocument"]);

  var path = "/API/shape-tag/storage-rule/".concat(tagName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: storageRuleDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-rule.html APIdoc}
 *
 * `DELETE /API/shape-tag/storage-rule/${tagName}`
 *
 * @function storagerule.removeStorageRuleShapeTag
 * @param {Object} obj
 * @param {string} obj.tagName
 * @returns {Promise<Object>}
 */

function removeStorageRuleShapeTag(_ref10) {
  var _ref10$tagName = _ref10.tagName,
      tagName = _ref10$tagName === void 0 ? isRequired() : _ref10$tagName,
      props = _objectWithoutProperties(_ref10, ["tagName"]);

  var path = "/API/shape-tag/storage-rule/".concat(tagName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var storagerule = {
  listStorageRule: listStorageRule,
  getEntityStorageRule: getEntityStorageRule,
  updateEntityStorageRule: updateEntityStorageRule,
  removeEntityStorageRule: removeEntityStorageRule,
  getEntityStorageRuleTag: getEntityStorageRuleTag,
  updateEntityStorageRuleTag: updateEntityStorageRuleTag,
  removeEntityStorageRuleTag: removeEntityStorageRuleTag,
  getStorageRuleShapeTag: getStorageRuleShapeTag,
  updateStorageRuleShapeTag: updateStorageRuleShapeTag,
  removeStorageRuleShapeTag: removeStorageRuleShapeTag
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `GET /API/jobtype`
 *
 * @function taskdefinition.listJobType
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listJobType() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/jobtype';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `POST /API/task-definition/jobtype/${jobType}/`
 *
 * @function taskdefinition.createJobType
 * @param {Object} obj
 * @param {string} obj.jobType
 * @returns {Promise<Object>}
 */


function createJobType(_ref2) {
  var _ref2$jobType = _ref2.jobType,
      jobType = _ref2$jobType === void 0 ? isRequired() : _ref2$jobType,
      props = _objectWithoutProperties(_ref2, ["jobType"]);

  var path = "/API/task-definition/jobtype/".concat(jobType, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `DELETE /API/task-definition/jobtype/${jobType}/`
 *
 * @function taskdefinition.removeJobType
 * @param {Object} obj
 * @param {string} obj.jobType
 * @returns {Promise<Object>}
 */


function removeJobType(_ref3) {
  var _ref3$jobType = _ref3.jobType,
      jobType = _ref3$jobType === void 0 ? isRequired() : _ref3$jobType,
      props = _objectWithoutProperties(_ref3, ["jobType"]);

  var path = "/API/task-definition/jobtype/".concat(jobType, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `GET /API/task-definition`
 *
 * @function taskdefinition.listTaskDefinition
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function listTaskDefinition() {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref4);

  var path = '/API/task-definition';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `GET /API/task-definition/jobtype/${taskDefinitionType}/`
 *
 * @function taskdefinition.getTaskDefinitionType
 * @param {Object} obj
 * @param {string} obj.taskDefinitionType
 * @returns {Promise<Object>}
 */


function getTaskDefinitionType(_ref5) {
  var _ref5$taskDefinitionT = _ref5.taskDefinitionType,
      taskDefinitionType = _ref5$taskDefinitionT === void 0 ? isRequired() : _ref5$taskDefinitionT,
      props = _objectWithoutProperties(_ref5, ["taskDefinitionType"]);

  var path = "/API/task-definition/jobtype/".concat(taskDefinitionType, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `POST /API/task-definition`
 *
 * @function taskdefinition.createTaskDefinition
 * @param {Object} obj
 * @param {Object} obj.taskDefinitionListDocument
 * @returns {Promise<Object>}
 */


function createTaskDefinition(_ref6) {
  var taskDefinitionListDocument = _ref6.taskDefinitionListDocument,
      props = _objectWithoutProperties(_ref6, ["taskDefinitionListDocument"]);

  var path = '/API/task-definition';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: taskDefinitionListDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `GET /API/task-definition/${taskDefinitionId}`
 *
 * @function taskdefinition.getTaskDefinition
 * @param {Object} obj
 * @param {string} obj.taskDefinitionId
 * @returns {Promise<Object>}
 */


function getTaskDefinition(_ref7) {
  var _ref7$taskDefinitionI = _ref7.taskDefinitionId,
      taskDefinitionId = _ref7$taskDefinitionI === void 0 ? isRequired() : _ref7$taskDefinitionI,
      props = _objectWithoutProperties(_ref7, ["taskDefinitionId"]);

  var path = "/API/task-definition/".concat(taskDefinitionId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `GET /API/task-definition/jobtype/${taskDefinitionType}/step/${taskDefinitionStep}`
 *
 * @function taskdefinition.getTaskDefinitionStep
 * @param {Object} obj
 * @param {string} obj.taskDefinitionType
 * @param {string} obj.taskDefinitionStep
 * @returns {Promise<Object>}
 */


function getTaskDefinitionStep(_ref8) {
  var _ref8$taskDefinitionT = _ref8.taskDefinitionType,
      taskDefinitionType = _ref8$taskDefinitionT === void 0 ? isRequired() : _ref8$taskDefinitionT,
      _ref8$taskDefinitionS = _ref8.taskDefinitionStep,
      taskDefinitionStep = _ref8$taskDefinitionS === void 0 ? isRequired() : _ref8$taskDefinitionS,
      props = _objectWithoutProperties(_ref8, ["taskDefinitionType", "taskDefinitionStep"]);

  var path = "/API/task-definition/jobtype/".concat(taskDefinitionType, "/step/").concat(taskDefinitionStep);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `DELETE /API/task-definition/${taskDefinitionId}`
 *
 * @function taskdefinition.removeTaskDefinition
 * @param {Object} obj
 * @param {string} obj.taskDefinitionId
 * @returns {Promise<Object>}
 */


function removeTaskDefinition(_ref9) {
  var _ref9$taskDefinitionI = _ref9.taskDefinitionId,
      taskDefinitionId = _ref9$taskDefinitionI === void 0 ? isRequired() : _ref9$taskDefinitionI,
      props = _objectWithoutProperties(_ref9, ["taskDefinitionId"]);

  var path = "/API/task-definition/".concat(taskDefinitionId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `DELETE /API/task-definition/jobtype/${taskDefinitionType}/step/${taskDefinitionStep}`
 *
 * @function taskdefinition.removeTaskDefinitionStep
 * @param {Object} obj
 * @param {string} obj.taskDefinitionType
 * @param {string} obj.taskDefinitionStep
 * @returns {Promise<Object>}
 */


function removeTaskDefinitionStep(_ref10) {
  var _ref10$taskDefinition = _ref10.taskDefinitionType,
      taskDefinitionType = _ref10$taskDefinition === void 0 ? isRequired() : _ref10$taskDefinition,
      _ref10$taskDefinition2 = _ref10.taskDefinitionStep,
      taskDefinitionStep = _ref10$taskDefinition2 === void 0 ? isRequired() : _ref10$taskDefinition2,
      props = _objectWithoutProperties(_ref10, ["taskDefinitionType", "taskDefinitionStep"]);

  var path = "/API/task-definition/jobtype/".concat(taskDefinitionType, "/step/").concat(taskDefinitionStep);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `PUT /API/task-definition/${taskDefinitionId}`
 *
 * @function taskdefinition.modifyTaskDefinition
 * @param {Object} obj
 * @param {string} obj.taskDefinitionId
 * @param {Object} obj.taskDefinitionDocument
 * @returns {Promise<Object>}
 */


function modifyTaskDefinition(_ref11) {
  var _ref11$taskDefinition = _ref11.taskDefinitionId,
      taskDefinitionId = _ref11$taskDefinition === void 0 ? isRequired() : _ref11$taskDefinition,
      _ref11$taskDefinition2 = _ref11.taskDefinitionDocument,
      taskDefinitionDocument = _ref11$taskDefinition2 === void 0 ? isRequired() : _ref11$taskDefinition2,
      props = _objectWithoutProperties(_ref11, ["taskDefinitionId", "taskDefinitionDocument"]);

  var path = "/API/task-definition/".concat(taskDefinitionId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: taskDefinitionDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `PUT /API/task-definition/jobtype/${taskDefinitionType}/step/${taskDefinitionStep}`
 *
 * @function taskdefinition.modifyTaskDefinitionStep
 * @param {Object} obj
 * @param {string} obj.taskDefinitionType
 * @param {string} obj.taskDefinitionStep
 * @param {Object} obj.taskDefinitionDocument
 * @returns {Promise<Object>}
 */


function modifyTaskDefinitionStep(_ref12) {
  var _ref12$taskDefinition = _ref12.taskDefinitionType,
      taskDefinitionType = _ref12$taskDefinition === void 0 ? isRequired() : _ref12$taskDefinition,
      _ref12$taskDefinition2 = _ref12.taskDefinitionStep,
      taskDefinitionStep = _ref12$taskDefinition2 === void 0 ? isRequired() : _ref12$taskDefinition2,
      taskDefinitionDocument = _ref12.taskDefinitionDocument,
      props = _objectWithoutProperties(_ref12, ["taskDefinitionType", "taskDefinitionStep", "taskDefinitionDocument"]);

  var path = "/API/task-definition/jobtype/".concat(taskDefinitionType, "/step/").concat(taskDefinitionStep);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: taskDefinitionDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `GET /API/task-definition/${taskDefinitionId}/script`
 *
 * @function taskdefinition.getTaskDefinitionScript
 * @param {Object} obj
 * @param {string} obj.taskDefinitionId
 * @returns {Promise<Object>}
 */


function getTaskDefinitionScript(_ref13) {
  var _ref13$taskDefinition = _ref13.taskDefinitionId,
      taskDefinitionId = _ref13$taskDefinition === void 0 ? isRequired() : _ref13$taskDefinition,
      _ref13$headers = _ref13.headers,
      propHeaders = _ref13$headers === void 0 ? {} : _ref13$headers,
      props = _objectWithoutProperties(_ref13, ["taskDefinitionId", "headers"]);

  var headers = _objectSpread2({
    accept: 'application/javascript'
  }, propHeaders);

  var path = "/API/task-definition/".concat(taskDefinitionId, "/script");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `GET /API/task-definition/jobtype/${taskDefinitionType}/step/${taskDefinitionStep}/script`
 *
 * @function taskdefinition.getTaskDefinitionStepScript
 * @param {Object} obj
 * @param {string} obj.taskDefinitionType
 * @param {string} obj.taskDefinitionStep
 * @returns {Promise<Object>}
 */


function getTaskDefinitionStepScript(_ref14) {
  var _ref14$taskDefinition = _ref14.taskDefinitionType,
      taskDefinitionType = _ref14$taskDefinition === void 0 ? isRequired() : _ref14$taskDefinition,
      _ref14$taskDefinition2 = _ref14.taskDefinitionStep,
      taskDefinitionStep = _ref14$taskDefinition2 === void 0 ? isRequired() : _ref14$taskDefinition2,
      _ref14$headers = _ref14.headers,
      propHeaders = _ref14$headers === void 0 ? {} : _ref14$headers,
      props = _objectWithoutProperties(_ref14, ["taskDefinitionType", "taskDefinitionStep", "headers"]);

  var headers = _objectSpread2({
    accept: 'application/javascript'
  }, propHeaders);

  var path = "/API/task-definition/jobtype/".concat(taskDefinitionType, "/step/").concat(taskDefinitionStep, "/script");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `PUT /API/task-definition/${taskDefinitionId}/script`
 *
 * @function taskdefinition.updateTaskDefinitionScript
 * @param {Object} obj
 * @param {string} obj.taskDefinitionId
 * @param {Object} obj.scriptDocument
 * @returns {Promise<Object>}
 */


function updateTaskDefinitionScript(_ref15) {
  var _ref15$taskDefinition = _ref15.taskDefinitionId,
      taskDefinitionId = _ref15$taskDefinition === void 0 ? isRequired() : _ref15$taskDefinition,
      scriptDocument = _ref15.scriptDocument,
      _ref15$headers = _ref15.headers,
      propHeaders = _ref15$headers === void 0 ? {} : _ref15$headers,
      props = _objectWithoutProperties(_ref15, ["taskDefinitionId", "scriptDocument", "headers"]);

  var headers = _objectSpread2({
    contentType: 'application/javascript',
    accept: 'application/javascript'
  }, propHeaders);

  var path = "/API/task-definition/".concat(taskDefinitionId, "/script");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: scriptDocument,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-definition.html APIdoc}
 *
 * `PUT /API/task-definition/jobtype/${taskDefinitionType}/step/${taskDefinitionStep}/script`
 *
 * @function taskdefinition.updateTaskDefinitionStepScript
 * @param {Object} obj
 * @param {string} obj.taskDefinitionType
 * @param {string} obj.taskDefinitionStep
 * @param {Object} obj.scriptDocument
 * @returns {Promise<Object>}
 */


function updateTaskDefinitionStepScript(_ref16) {
  var _ref16$taskDefinition = _ref16.taskDefinitionType,
      taskDefinitionType = _ref16$taskDefinition === void 0 ? isRequired() : _ref16$taskDefinition,
      _ref16$taskDefinition2 = _ref16.taskDefinitionStep,
      taskDefinitionStep = _ref16$taskDefinition2 === void 0 ? isRequired() : _ref16$taskDefinition2,
      scriptDocument = _ref16.scriptDocument,
      _ref16$headers = _ref16.headers,
      propHeaders = _ref16$headers === void 0 ? {} : _ref16$headers,
      props = _objectWithoutProperties(_ref16, ["taskDefinitionType", "taskDefinitionStep", "scriptDocument", "headers"]);

  var headers = _objectSpread2({
    contentType: 'application/javascript',
    accept: 'application/javascript'
  }, propHeaders);

  var path = "/API/task-definition/jobtype/".concat(taskDefinitionType, "/step/").concat(taskDefinitionStep, "/script");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: scriptDocument,
    headers: headers
  }, props));
}

var taskdefinition = {
  listJobType: listJobType,
  createJobType: createJobType,
  removeJobType: removeJobType,
  listTaskDefinition: listTaskDefinition,
  getTaskDefinitionType: getTaskDefinitionType,
  createTaskDefinition: createTaskDefinition,
  getTaskDefinition: getTaskDefinition,
  getTaskDefinitionStep: getTaskDefinitionStep,
  removeTaskDefinition: removeTaskDefinition,
  removeTaskDefinitionStep: removeTaskDefinitionStep,
  modifyTaskDefinition: modifyTaskDefinition,
  modifyTaskDefinitionStep: modifyTaskDefinitionStep,
  getTaskDefinitionScript: getTaskDefinitionScript,
  getTaskDefinitionStepScript: getTaskDefinitionStepScript,
  updateTaskDefinitionScript: updateTaskDefinitionScript,
  updateTaskDefinitionStepScript: updateTaskDefinitionStepScript
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/license.html APIdoc}
 *
 * `POST /UploadLicense/getlic`
 *
 * @function uploadlicense.createLicense
 * @param {Object} obj
 * @param {string} obj.username
 * @param {string} obj.password
 * @param {Object} obj.file
 * @returns {Promise<Object>}
 */

function createLicense$1(_ref) {
  var _ref$username = _ref.username,
      username = _ref$username === void 0 ? isRequired() : _ref$username,
      _ref$password = _ref.password,
      password = _ref$password === void 0 ? isRequired() : _ref$password,
      _ref$file = _ref.file,
      file = _ref$file === void 0 ? isRequired() : _ref$file,
      _ref$headers = _ref.headers,
      propHeaders = _ref$headers === void 0 ? {} : _ref$headers,
      props = _objectWithoutProperties(_ref, ["username", "password", "file", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/html'
  }, propHeaders);

  headers["delete"]('content-type');
  var path = '/UploadLicense/getlic';
  var formData = new FormData();
  formData.append('user', username);
  formData.append('pass', password);
  formData.append('file', file);
  return vFetch(_objectSpread2({
    path: path,
    body: formData,
    method: 'POST',
    headers: headers
  }, props));
}

var uploadlicense = {
  createLicense: createLicense$1
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `GET /API/whoami`
 *
 * @function user.whoAmI
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function whoAmI() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$headers = _ref.headers,
      propsHeaders = _ref$headers === void 0 ? {} : _ref$headers,
      props = _objectWithoutProperties(_ref, ["headers"]);

  var path = '/API/whoami';

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propsHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `GET /API/user/${username}/token`
 *
 * @function user.getUserToken
 * @param {Object} obj
 * @param {string} obj.username
 * @param {string} obj.password
 * @returns {Promise<Object>}
 */


function getUserToken(_ref2) {
  var _ref2$username = _ref2.username,
      username = _ref2$username === void 0 ? isRequired() : _ref2$username,
      password = _ref2.password,
      _ref2$headers = _ref2.headers,
      propHeaders = _ref2$headers === void 0 ? {} : _ref2$headers,
      props = _objectWithoutProperties(_ref2, ["username", "password", "headers"]);

  var headers = _objectSpread2({
    username: username,
    password: password,
    accept: 'text/plain'
  }, propHeaders);

  var path = "/API/user/".concat(username, "/token");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `GET /API/user/`
 *
 * @function user.listUser
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function listUser() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref3);

  var path = '/API/user/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `POST /API/user/`
 *
 * @function user.createUser
 * @param {Object} obj
 * @param {Object} obj.userDocument
 * @returns {Promise<Object>}
 */


function createUser(_ref4) {
  var userDocument = _ref4.userDocument,
      props = _objectWithoutProperties(_ref4, ["userDocument"]);

  var path = '/API/user/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: userDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `GET /API/user/${userName}`
 *
 * @function user.getUser
 * @param {Object} obj
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function getUser(_ref5) {
  var _ref5$userName = _ref5.userName,
      userName = _ref5$userName === void 0 ? isRequired() : _ref5$userName,
      props = _objectWithoutProperties(_ref5, ["userName"]);

  var path = "/API/user/".concat(userName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `GET /API/user/${userName}/graph`
 *
 * @function user.getUserGraph
 * @param {Object} obj
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function getUserGraph(_ref6) {
  var _ref6$userName = _ref6.userName,
      userName = _ref6$userName === void 0 ? isRequired() : _ref6$userName,
      props = _objectWithoutProperties(_ref6, ["userName"]);

  var path = "/API/user/".concat(userName, "/graph");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `PUT /API/user/${userName}`
 *
 * @function user.updateUser
 * @param {Object} obj
 * @param {string} obj.userName
 * @param {Object} obj.userDocument
 * @returns {Promise<Object>}
 */


function updateUser(_ref7) {
  var _ref7$userName = _ref7.userName,
      userName = _ref7$userName === void 0 ? isRequired() : _ref7$userName,
      _ref7$userDocument = _ref7.userDocument,
      userDocument = _ref7$userDocument === void 0 ? isRequired() : _ref7$userDocument,
      props = _objectWithoutProperties(_ref7, ["userName", "userDocument"]);

  var path = "/API/user/".concat(userName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: userDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `DELETE /API/user/${userName}`
 *
 * @function user.disableUser
 * @param {Object} obj
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function disableUser(_ref8) {
  var _ref8$userName = _ref8.userName,
      userName = _ref8$userName === void 0 ? isRequired() : _ref8$userName,
      props = _objectWithoutProperties(_ref8, ["userName"]);

  var path = "/API/user/".concat(userName, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `PUT /API/user/${userName}/enable`
 *
 * @function user.enableUser
 * @param {Object} obj
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function enableUser(_ref9) {
  var _ref9$userName = _ref9.userName,
      userName = _ref9$userName === void 0 ? isRequired() : _ref9$userName,
      props = _objectWithoutProperties(_ref9, ["userName"]);

  var path = "/API/user/".concat(userName, "/enable");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `PUT /API/user/`
 *
 * @function user.searchUser
 * @param {Object} obj
 * @param {Object} obj.userSearchDocument
 * @returns {Promise<Object>}
 */


function searchUser(_ref10) {
  var userSearchDocument = _ref10.userSearchDocument,
      props = _objectWithoutProperties(_ref10, ["userSearchDocument"]);

  var path = '/API/user/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: userSearchDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `PUT /API/user/${userName}/alias/${alias}`
 *
 * @function user.createAlias
 * @param {Object} obj
 * @param {string} obj.userName
 * @param {string} obj.alias
 * @returns {Promise<Object>}
 */


function createAlias(_ref11) {
  var _ref11$userName = _ref11.userName,
      userName = _ref11$userName === void 0 ? isRequired() : _ref11$userName,
      _ref11$alias = _ref11.alias,
      alias = _ref11$alias === void 0 ? isRequired() : _ref11$alias,
      props = _objectWithoutProperties(_ref11, ["userName", "alias"]);

  var path = "/API/user/".concat(userName, "/alias/").concat(alias);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `DELETE /API/user/${userName}/alias/${alias}`
 *
 * @function user.removeAlias
 * @param {Object} obj
 * @param {string} obj.userName
 * @param {string} obj.alias
 * @returns {Promise<Object>}
 */


function removeAlias(_ref12) {
  var _ref12$userName = _ref12.userName,
      userName = _ref12$userName === void 0 ? isRequired() : _ref12$userName,
      _ref12$alias = _ref12.alias,
      alias = _ref12$alias === void 0 ? isRequired() : _ref12$alias,
      props = _objectWithoutProperties(_ref12, ["userName", "alias"]);

  var path = "/API/user/".concat(userName, "/alias/").concat(alias);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `GET /API/user/${userName}/realname`
 *
 * @function user.getUserRealName
 * @param {Object} obj
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function getUserRealName(_ref13) {
  var _ref13$userName = _ref13.userName,
      userName = _ref13$userName === void 0 ? isRequired() : _ref13$userName,
      _ref13$headers = _ref13.headers,
      propHeaders = _ref13$headers === void 0 ? {} : _ref13$headers,
      props = _objectWithoutProperties(_ref13, ["userName", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  var path = "/API/user/".concat(userName, "/realname");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `PUT /API/user/${userName}/realname`
 *
 * @function user.updateUserRealName
 * @param {Object} obj
 * @param {string} obj.userName
 * @param {string} obj.realName
 * @returns {Promise<Object>}
 */


function updateUserRealName(_ref14) {
  var _ref14$userName = _ref14.userName,
      userName = _ref14$userName === void 0 ? isRequired() : _ref14$userName,
      realName = _ref14.realName,
      _ref14$headers = _ref14.headers,
      propHeaders = _ref14$headers === void 0 ? {} : _ref14$headers,
      props = _objectWithoutProperties(_ref14, ["userName", "realName", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain',
    contentType: 'text/plain'
  }, propHeaders);

  var path = "/API/user/".concat(userName, "/realname");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: realName,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `PUT /API/user/${userName}/password/`
 *
 * @function user.updateUserPassword
 * @param {Object} obj
 * @param {string} obj.userName
 * @param {string} obj.password
 * @returns {Promise<Object>}
 */


function updateUserPassword(_ref15) {
  var _ref15$userName = _ref15.userName,
      userName = _ref15$userName === void 0 ? isRequired() : _ref15$userName,
      _ref15$password = _ref15.password,
      password = _ref15$password === void 0 ? isRequired() : _ref15$password,
      _ref15$headers = _ref15.headers,
      propHeaders = _ref15$headers === void 0 ? {} : _ref15$headers,
      props = _objectWithoutProperties(_ref15, ["userName", "password", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain',
    contentType: 'text/plain'
  }, propHeaders);

  var path = "/API/user/".concat(userName, "/password/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: password,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `GET /API/user/${userName}/validate/`
 *
 * @function user.validateUserPassword
 * @param {Object} obj
 * @param {string} obj.userName
 * @param {string} obj.password
 * @returns {Promise<Object>}
 */


function validateUserPassword(_ref16) {
  var _ref16$userName = _ref16.userName,
      userName = _ref16$userName === void 0 ? isRequired() : _ref16$userName,
      _ref16$password = _ref16.password,
      password = _ref16$password === void 0 ? isRequired() : _ref16$password,
      _ref16$headers = _ref16.headers,
      propHeaders = _ref16$headers === void 0 ? {} : _ref16$headers,
      props = _objectWithoutProperties(_ref16, ["userName", "password", "headers"]);

  var headers = _objectSpread2({
    accept: 'text/plain',
    contentType: 'text/plain'
  }, propHeaders);

  var path = "/API/user/".concat(userName, "/validate/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: password,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `GET /API/user/${userName}/password/salt`
 *
 * @function user.getUserSalt
 * @param {Object} obj
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function getUserSalt(_ref17) {
  var _ref17$userName = _ref17.userName,
      userName = _ref17$userName === void 0 ? isRequired() : _ref17$userName,
      _ref17$headers = _ref17.headers,
      propHeaders = _ref17$headers === void 0 ? {} : _ref17$headers,
      props = _objectWithoutProperties(_ref17, ["userName", "headers"]);

  var headers = _objectSpread2({
    accept: 'application/octet-stream'
  }, propHeaders);

  var path = "/API/user/".concat(userName, "/password/salt");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `POST /API/user/${userName}/password/salt`
 *
 * @function user.createUserSalt
 * @param {Object} obj
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function createUserSalt(_ref18) {
  var _ref18$userName = _ref18.userName,
      userName = _ref18$userName === void 0 ? isRequired() : _ref18$userName,
      _ref18$headers = _ref18.headers,
      propHeaders = _ref18$headers === void 0 ? {} : _ref18$headers,
      props = _objectWithoutProperties(_ref18, ["userName", "headers"]);

  var headers = _objectSpread2({
    accept: 'application/octet-stream'
  }, propHeaders);

  var path = "/API/user/".concat(userName, "/password/salt");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `GET /API/user/${userName}/groups/`
 *
 * @function user.getUserGroup
 * @param {Object} obj
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function getUserGroup(_ref19) {
  var _ref19$userName = _ref19.userName,
      userName = _ref19$userName === void 0 ? isRequired() : _ref19$userName,
      props = _objectWithoutProperties(_ref19, ["userName"]);

  var path = "/API/user/".concat(userName, "/groups/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `GET /API/user/${userName}/roles`
 *
 * @function user.getUserRole
 * @param {Object} obj
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function getUserRole(_ref20) {
  var _ref20$userName = _ref20.userName,
      userName = _ref20$userName === void 0 ? isRequired() : _ref20$userName,
      props = _objectWithoutProperties(_ref20, ["userName"]);

  var path = "/API/user/".concat(userName, "/roles");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `GET /API/user/${userName}/allgroups`
 *
 * @function user.getUserGroupRole
 * @param {Object} obj
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function getUserGroupRole(_ref21) {
  var _ref21$userName = _ref21.userName,
      userName = _ref21$userName === void 0 ? isRequired() : _ref21$userName,
      props = _objectWithoutProperties(_ref21, ["userName"]);

  var path = "/API/user/".concat(userName, "/allgroups");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `PUT /API/user/${userName}/groups/`
 *
 * @function user.updateUserGroup
 * @param {Object} obj
 * @param {string} obj.userName
 * @param {Object} obj.groupListDocument
 * @returns {Promise<Object>}
 */


function updateUserGroup(_ref22) {
  var _ref22$userName = _ref22.userName,
      userName = _ref22$userName === void 0 ? isRequired() : _ref22$userName,
      groupListDocument = _ref22.groupListDocument,
      props = _objectWithoutProperties(_ref22, ["userName", "groupListDocument"]);

  var path = "/API/user/".concat(userName, "/groups/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: groupListDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `GET /API/token`
 *
 * @function user.getToken
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getToken() {
  var _ref23 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref23$headers = _ref23.headers,
      propsHeaders = _ref23$headers === void 0 ? {} : _ref23$headers,
      props = _objectWithoutProperties(_ref23, ["headers"]);

  var path = '/API/token';

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propsHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `GET /API/user/${userName}/key`
 *
 * @function user.listKey
 * @param {Object} obj
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function listKey(_ref24) {
  var _ref24$userName = _ref24.userName,
      userName = _ref24$userName === void 0 ? isRequired() : _ref24$userName,
      props = _objectWithoutProperties(_ref24, ["userName"]);

  var path = "/API/user/".concat(userName, "/key");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `GET /API/user/${userName}/key/${keyId}`
 *
 * @function user.getKey
 * @param {Object} obj
 * @param {string} obj.userName
 * @param {string} obj.keyId
 * @returns {Promise<Object>}
 */


function getKey(_ref25) {
  var _ref25$userName = _ref25.userName,
      userName = _ref25$userName === void 0 ? isRequired() : _ref25$userName,
      _ref25$keyId = _ref25.keyId,
      keyId = _ref25$keyId === void 0 ? isRequired() : _ref25$keyId,
      props = _objectWithoutProperties(_ref25, ["userName", "keyId"]);

  var path = "/API/user/".concat(userName, "/key/").concat(keyId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `POST /API/user/${userName}/key/`
 *
 * @function user.createKey
 * @param {Object} obj
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function createKey(_ref26) {
  var _ref26$userName = _ref26.userName,
      userName = _ref26$userName === void 0 ? isRequired() : _ref26$userName,
      props = _objectWithoutProperties(_ref26, ["userName"]);

  var path = "/API/user/".concat(userName, "/key/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `PUT /API/user/${userName}/key/${keyId}`
 *
 * @function user.updateKey
 * @param {Object} obj
 * @param {string} obj.userName
 * @param {string} obj.keyId
 * @param {Object} obj.accessKeyDocument
 * @returns {Promise<Object>}
 */


function updateKey(_ref27) {
  var _ref27$userName = _ref27.userName,
      userName = _ref27$userName === void 0 ? isRequired() : _ref27$userName,
      _ref27$keyId = _ref27.keyId,
      keyId = _ref27$keyId === void 0 ? isRequired() : _ref27$keyId,
      accessKeyDocument = _ref27.accessKeyDocument,
      props = _objectWithoutProperties(_ref27, ["userName", "keyId", "accessKeyDocument"]);

  var path = "/API/user/".concat(userName, "/key/").concat(keyId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: accessKeyDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user/index.html APIdoc}
 *
 * `DELETE /API/user/${userName}/key/${keyId}`
 *
 * @function user.removeKey
 * @param {Object} obj
 * @param {string} obj.userName
 * @param {string} obj.keyId
 * @returns {Promise<Object>}
 */


function removeKey(_ref28) {
  var _ref28$userName = _ref28.userName,
      userName = _ref28$userName === void 0 ? isRequired() : _ref28$userName,
      _ref28$keyId = _ref28.keyId,
      keyId = _ref28$keyId === void 0 ? isRequired() : _ref28$keyId,
      props = _objectWithoutProperties(_ref28, ["userName", "keyId"]);

  var path = "/API/user/".concat(userName, "/key/").concat(keyId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/user.html#see-access-control-entries-for-user APIdoc}
 *
 * `GET /API/user/${userName}/access`
 *
 * @function user.getAccess
 * @param {Object} obj
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function getAccess(_ref29) {
  var _ref29$userName = _ref29.userName,
      userName = _ref29$userName === void 0 ? isRequired() : _ref29$userName,
      props = _objectWithoutProperties(_ref29, ["userName"]);

  var path = "/API/user/".concat(userName, "/access");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}

var user = {
  whoAmI: whoAmI,
  getUserToken: getUserToken,
  listUser: listUser,
  createUser: createUser,
  getUser: getUser,
  getUserGraph: getUserGraph,
  updateUser: updateUser,
  disableUser: disableUser,
  enableUser: enableUser,
  searchUser: searchUser,
  createAlias: createAlias,
  removeAlias: removeAlias,
  getUserRealName: getUserRealName,
  updateUserRealName: updateUserRealName,
  updateUserPassword: updateUserPassword,
  validateUserPassword: validateUserPassword,
  getUserSalt: getUserSalt,
  createUserSalt: createUserSalt,
  getUserGroup: getUserGroup,
  getUserRole: getUserRole,
  getUserGroupRole: getUserGroupRole,
  updateUserGroup: updateUserGroup,
  getToken: getToken,
  listKey: listKey,
  getKey: getKey,
  createKey: createKey,
  updateKey: updateKey,
  removeKey: removeKey,
  getAccess: getAccess
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/license.html APIdoc}
 *
 * `GET /API/version`
 *
 * @function version.getVersion
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function getVersion() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/version';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}

var version = {
  getVersion: getVersion
};

var createFileEntity$1 = fileApi.createFileEntity,
    createFileTemporaryCredentials$1 = fileApi.createFileTemporaryCredentials,
    updateFileState$1 = fileApi.updateFileState,
    abandonFile$1 = fileApi.abandonFile;
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import.html APIdoc}
 *
 * `POST /API/import/`
 *
 * @function vsimport.createImportUri
 * @param {Object} obj
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */

function createImportUri() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$metadataDocument = _ref.metadataDocument,
      metadataDocument = _ref$metadataDocument === void 0 ? {} : _ref$metadataDocument,
      props = _objectWithoutProperties(_ref, ["metadataDocument"]);

  var path = '/API/import/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import.html#find-destination-storage APIdoc}
 *
 * `GET /API/import/storage`
 *
 * @function vsimport.getImportStorage
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getImportStorage() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref2);

  var path = '/API/import/storage';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import.html APIdoc}
 *
 * `POST /API/import/raw/`
 *
 * @function vsimport.createImportRaw
 * @param {Object} obj
 * @param {Object} obj.file
 * @returns {Promise<Object>}
 */


function createImportRaw(_ref3) {
  var _ref3$file = _ref3.file,
      file = _ref3$file === void 0 ? isRequired() : _ref3$file,
      _ref3$headers = _ref3.headers,
      propHeaders = _ref3$headers === void 0 ? {} : _ref3$headers,
      props = _objectWithoutProperties(_ref3, ["file", "headers"]);

  var path = '/API/import/raw/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: file,
    headers: _objectSpread2({
      contentType: 'application/octet-stream'
    }, propHeaders)
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import.html APIdoc}
 *
 * `POST /APInoauth/import/raw/`
 *
 * @function vsimport.createImportRawNoAuth
 * @param {Object} obj
 * @param {Object} obj.file
 * @returns {Promise<Object>}
 */


function createImportRawNoAuth(_ref4) {
  var _ref4$file = _ref4.file,
      file = _ref4$file === void 0 ? isRequired() : _ref4$file,
      _ref4$headers = _ref4.headers,
      propHeaders = _ref4$headers === void 0 ? {} : _ref4$headers,
      props = _objectWithoutProperties(_ref4, ["file", "headers"]);

  var path = '/APInoauth/import/raw/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: file,
    headers: _objectSpread2({
      contentType: 'application/octet-stream'
    }, propHeaders)
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import.html APIdoc}
 *
 * `POST /API/import/raw-passkey/`
 *
 * @function vsimport.createImportRawPasskey
 * @param {Object} obj
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */


function createImportRawPasskey() {
  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref5$metadataDocumen = _ref5.metadataDocument,
      metadataDocument = _ref5$metadataDocumen === void 0 ? {} : _ref5$metadataDocumen,
      props = _objectWithoutProperties(_ref5, ["metadataDocument"]);

  var path = '/API/import/raw-passkey/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import.html APIdoc}
 *
 * `POST /API/import/imp/`
 *
 * @function vsimport.createImportImp
 * @param {Object} obj
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */


function createImportImp() {
  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref6$metadataDocumen = _ref6.metadataDocument,
      metadataDocument = _ref6$metadataDocumen === void 0 ? {} : _ref6$metadataDocumen,
      props = _objectWithoutProperties(_ref6, ["metadataDocument"]);

  var path = '/API/import/imp/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import.html APIdoc}
 *
 * `POST /API/import/placeholder/`
 *
 * @function vsimport.createImportPlaceholder
 * @param {Object} obj
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */


function createImportPlaceholder() {
  var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref7$metadataDocumen = _ref7.metadataDocument,
      metadataDocument = _ref7$metadataDocumen === void 0 ? {} : _ref7$metadataDocumen,
      props = _objectWithoutProperties(_ref7, ["metadataDocument"]);

  var path = '/API/import/placeholder/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import.html APIdoc}
 *
 * `POST /API/import/placeholder/${itemId}/${component}/`
 *
 * @function vsimport.createImportComponent
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.component
 * @returns {Promise<Object>}
 */


function createImportComponent(_ref8) {
  var _ref8$itemId = _ref8.itemId,
      itemId = _ref8$itemId === void 0 ? isRequired() : _ref8$itemId,
      _ref8$component = _ref8.component,
      component = _ref8$component === void 0 ? isRequired() : _ref8$component,
      props = _objectWithoutProperties(_ref8, ["itemId", "component"]);

  var path = "/API/import/placeholder/".concat(itemId, "/").concat(component, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import.html APIdoc}
 *
 * `POST /API/import/placeholder/${itemId}/${component}/raw/`
 *
 * @function vsimport.createImportComponentRaw
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.component
 * @param {Object} obj.file
 * @returns {Promise<Object>}
 */


function createImportComponentRaw(_ref9) {
  var _ref9$itemId = _ref9.itemId,
      itemId = _ref9$itemId === void 0 ? isRequired() : _ref9$itemId,
      _ref9$component = _ref9.component,
      component = _ref9$component === void 0 ? isRequired() : _ref9$component,
      _ref9$file = _ref9.file,
      file = _ref9$file === void 0 ? isRequired() : _ref9$file,
      _ref9$headers = _ref9.headers,
      propHeaders = _ref9$headers === void 0 ? {} : _ref9$headers,
      props = _objectWithoutProperties(_ref9, ["itemId", "component", "file", "headers"]);

  var path = "/API/import/placeholder/".concat(itemId, "/").concat(component, "/raw/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: file,
    headers: _objectSpread2({
      contentType: 'application/octet-stream'
    }, propHeaders)
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import.html APIdoc}
 *
 * `POST /APInoauth/import/placeholder/${itemId}/${component}/raw/`
 *
 * @function vsimport.createImportComponentRawNoAuth
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.component
 * @param {Object} obj.file
 * @returns {Promise<Object>}
 */


function createImportComponentRawNoAuth(_ref10) {
  var _ref10$itemId = _ref10.itemId,
      itemId = _ref10$itemId === void 0 ? isRequired() : _ref10$itemId,
      _ref10$component = _ref10.component,
      component = _ref10$component === void 0 ? isRequired() : _ref10$component,
      _ref10$file = _ref10.file,
      file = _ref10$file === void 0 ? isRequired() : _ref10$file,
      _ref10$headers = _ref10.headers,
      propHeaders = _ref10$headers === void 0 ? {} : _ref10$headers,
      props = _objectWithoutProperties(_ref10, ["itemId", "component", "file", "headers"]);

  var path = "/APInoauth/import/placeholder/".concat(itemId, "/").concat(component, "/raw/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: file,
    headers: _objectSpread2({
      contentType: 'application/octet-stream'
    }, propHeaders)
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import.html APIdoc}
 *
 * `POST /API/import/placeholder/${itemId}/`
 *
 * @function vsimport.createImportItem
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {Object} obj.placeholderImportRequestDocument
 * @returns {Promise<Object>}
 */


function createImportItem(_ref11) {
  var _ref11$itemId = _ref11.itemId,
      itemId = _ref11$itemId === void 0 ? isRequired() : _ref11$itemId,
      placeholderImportRequestDocument = _ref11.placeholderImportRequestDocument,
      props = _objectWithoutProperties(_ref11, ["itemId", "placeholderImportRequestDocument"]);

  var path = "/API/import/placeholder/".concat(itemId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: placeholderImportRequestDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import.html APIdoc}
 *
 * `POST /API/import/placeholder/${itemId}/raw-passkey/`
 *
 * @function vsimport.createImportItemPasskey
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function createImportItemPasskey(_ref12) {
  var _ref12$itemId = _ref12.itemId,
      itemId = _ref12$itemId === void 0 ? isRequired() : _ref12$itemId,
      props = _objectWithoutProperties(_ref12, ["itemId"]);

  var path = "/API/import/placeholder/".concat(itemId, "/raw-passkey/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import.html APIdoc}
 *
 * `POST /API/import/placeholder/${itemId}/${component}/adopt/${fileId}/`
 *
 * @function vsimport.createImportItemAdoptFile
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.component
 * @param {string} obj.fileId
 * @returns {Promise<Object>}
 */


function createImportItemAdoptFile(_ref13) {
  var _ref13$itemId = _ref13.itemId,
      itemId = _ref13$itemId === void 0 ? isRequired() : _ref13$itemId,
      _ref13$component = _ref13.component,
      component = _ref13$component === void 0 ? isRequired() : _ref13$component,
      _ref13$fileId = _ref13.fileId,
      fileId = _ref13$fileId === void 0 ? isRequired() : _ref13$fileId,
      props = _objectWithoutProperties(_ref13, ["itemId", "component", "fileId"]);

  var path = "/API/import/placeholder/".concat(itemId, "/").concat(component, "/adopt/").concat(fileId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import.html APIdoc}
 *
 * `POST /API/import/sidecar/${itemId}/`
 *
 * @function vsimport.createImportItemSidecar
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function createImportItemSidecar(_ref14) {
  var _ref14$itemId = _ref14.itemId,
      itemId = _ref14$itemId === void 0 ? isRequired() : _ref14$itemId,
      props = _objectWithoutProperties(_ref14, ["itemId"]);

  var path = "/API/import/sidecar/".concat(itemId, "/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import.html APIdoc}
 *
 * `POST /API/import/sidecar/${itemId}/raw/`
 *
 * @function vsimport.createImportItemSidecarRaw
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {Object} obj.file
 * @returns {Promise<Object>}
 */


function createImportItemSidecarRaw(_ref15) {
  var _ref15$itemId = _ref15.itemId,
      itemId = _ref15$itemId === void 0 ? isRequired() : _ref15$itemId,
      file = _ref15.file,
      _ref15$headers = _ref15.headers,
      propHeaders = _ref15$headers === void 0 ? {} : _ref15$headers,
      props = _objectWithoutProperties(_ref15, ["itemId", "file", "headers"]);

  var headers = _objectSpread2({
    contentType: 'application/octet-stream'
  }, propHeaders);

  var path = "/API/import/sidecar/".concat(itemId, "/raw/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: file,
    headers: headers
  }, props));
}

function createImportS3Direct(_ref16) {
  var _ref16$file = _ref16.file,
      file = _ref16$file === void 0 ? isRequired() : _ref16$file,
      _ref16$storageId = _ref16.storageId,
      storageId = _ref16$storageId === void 0 ? isRequired() : _ref16$storageId;
  return new Promise(function (resolve, reject) {
    var fileId;
    var fileDocument;
    createFileEntity$1({
      storageId: storageId,
      queryParams: {
        path: file.name
      }
    }).then(function (response) {
      fileDocument = response.data; // will return this on resolve

      fileId = response.data.id;
      return createFileTemporaryCredentials$1({
        fileId: fileId,
        queryParams: {
          write: true,
          scheme: 'https',
          duration: 720
        }
      });
    }).then(function (response) {
      var s3Url = response.data.uri[0];
      /*
      Upload to s3
      TODO - replace with vFetch once vFetch implements its own axios instance
      to avoid attaching auth and other vidispine headers
      */

      return fetch(s3Url, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/octet-stream'
        },
        body: file
      });
    }).then(function () {
      // set file state to closed
      updateFileState$1({
        fileId: fileId,
        state: 'CLOSED'
      });
    }).then(function () {
      // success, resolve
      resolve(fileDocument);
    })["catch"](function (err) {
      // do cleanup to avoid errors when same file is tried again
      if (fileId) {
        abandonFile$1({
          fileId: fileId
        });
      } // else filename already exists (?)


      reject(err.response);
    });
  });
}

var _import = {
  createImportUri: createImportUri,
  getImportStorage: getImportStorage,
  createImportRaw: createImportRaw,
  createImportRawNoAuth: createImportRawNoAuth,
  createImportRawPasskey: createImportRawPasskey,
  createImportImp: createImportImp,
  createImportPlaceholder: createImportPlaceholder,
  createImportComponent: createImportComponent,
  createImportComponentRaw: createImportComponentRaw,
  createImportComponentRawNoAuth: createImportComponentRawNoAuth,
  createImportItem: createImportItem,
  createImportItemPasskey: createImportItemPasskey,
  createImportItemAdoptFile: createImportItemAdoptFile,
  createImportItemSidecar: createImportItemSidecar,
  createImportItemSidecarRaw: createImportItemSidecarRaw,
  createImportS3Direct: createImportS3Direct
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/vsa.html APIdoc}
 *
 * `GET /API/vxa/`
 *
 * @function vxa.listVxa
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listVxa() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/vxa/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/vsa.html APIdoc}
 *
 * `PUT /API/vxa/enable-ssh/`
 *
 * @function vxa.createVxa
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function createVxa() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$headers = _ref2.headers,
      propHeaders = _ref2$headers === void 0 ? {} : _ref2$headers,
      props = _objectWithoutProperties(_ref2, ["headers"]);

  var path = '/API/vxa/enable-ssh/';

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/vsa.html APIdoc}
 *
 * `GET /API/vxa/${vxaUuid}`
 *
 * @function vxa.getVxa
 * @param {Object} obj
 * @param {string} obj.vxaUuid
 * @returns {Promise<Object>}
 */


function getVxa(_ref3) {
  var _ref3$vxaUuid = _ref3.vxaUuid,
      vxaUuid = _ref3$vxaUuid === void 0 ? isRequired() : _ref3$vxaUuid,
      props = _objectWithoutProperties(_ref3, ["vxaUuid"]);

  var path = "/API/vxa/".concat(vxaUuid);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/vsa.html APIdoc}
 *
 * `GET /API/vxa/${vxaUuid}/configuration`
 *
 * @function vxa.getVxaConfiguration
 * @param {Object} obj
 * @param {string} obj.vxaUuid
 * @returns {Promise<Object>}
 */


function getVxaConfiguration(_ref4) {
  var _ref4$vxaUuid = _ref4.vxaUuid,
      vxaUuid = _ref4$vxaUuid === void 0 ? isRequired() : _ref4$vxaUuid,
      props = _objectWithoutProperties(_ref4, ["vxaUuid"]);

  var path = "/API/vxa/".concat(vxaUuid, "/configuration");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/vsa.html APIdoc}
 *
 * `DELETE /API/vxa/${vxaUuid}`
 *
 * @function vxa.removeVxa
 * @param {Object} obj
 * @param {string} obj.vxaUuid
 * @returns {Promise<Object>}
 */


function removeVxa(_ref5) {
  var _ref5$vxaUuid = _ref5.vxaUuid,
      vxaUuid = _ref5$vxaUuid === void 0 ? isRequired() : _ref5$vxaUuid,
      props = _objectWithoutProperties(_ref5, ["vxaUuid"]);

  var path = "/API/vxa/".concat(vxaUuid);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var vxa = {
  listVxa: listVxa,
  createVxa: createVxa,
  getVxa: getVxa,
  getVxaConfiguration: getVxaConfiguration,
  removeVxa: removeVxa
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/library.html APIdoc}
 *
 * `GET /API/library/`
 *
 * @function library.listLibrary
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listLibrary() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/library/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/library.html APIdoc}
 *
 * `POST /API/library/`
 *
 * @function library.createLibrary
 * @param {Object} obj
 * @param {Object} obj.itemListDocument
 * @returns {Promise<Object>}
 */


function createLibrary(_ref2) {
  var _ref2$itemListDocumen = _ref2.itemListDocument,
      itemListDocument = _ref2$itemListDocumen === void 0 ? {} : _ref2$itemListDocumen,
      props = _objectWithoutProperties(_ref2, ["itemListDocument"]);

  var path = '/API/library';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: itemListDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/library.html APIdoc}
 *
 * `DELETE /API/library/${libraryId}`
 *
 * @function library.removeLibrary
 * @param {Object} obj
 * @param {string} obj.libraryId
 * @returns {Promise<Object>}
 */


function removeLibrary(_ref3) {
  var _ref3$libraryId = _ref3.libraryId,
      libraryId = _ref3$libraryId === void 0 ? isRequired() : _ref3$libraryId,
      props = _objectWithoutProperties(_ref3, ["libraryId"]);

  var path = "/API/library/".concat(libraryId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/library.html APIdoc}
 *
 * `DELETE /API/library`
 *
 * @function library.removeLibraryList
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function removeLibraryList() {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref4);

  var path = '/API/library';
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/library.html APIdoc}
 *
 * `GET /API/library/${libraryId}`
 *
 * @function library.getLibrary
 * @param {Object} obj
 * @param {string} obj.libraryId
 * @returns {Promise<Object>}
 */


function getLibrary(_ref5) {
  var _ref5$libraryId = _ref5.libraryId,
      libraryId = _ref5$libraryId === void 0 ? isRequired() : _ref5$libraryId,
      props = _objectWithoutProperties(_ref5, ["libraryId"]);

  var path = "/API/library/".concat(libraryId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/library.html APIdoc}
 *
 * `PUT /API/library/${libraryId}`
 *
 * @function library.updateLibrary
 * @param {Object} obj
 * @param {string} obj.libraryId
 * @param {Object} obj.itemListDocument
 * @returns {Promise<Object>}
 */


function updateLibrary(_ref6) {
  var _ref6$libraryId = _ref6.libraryId,
      libraryId = _ref6$libraryId === void 0 ? isRequired() : _ref6$libraryId,
      itemListDocument = _ref6.itemListDocument,
      props = _objectWithoutProperties(_ref6, ["libraryId", "itemListDocument"]);

  var path = "/API/library/".concat(libraryId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: itemListDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/library.html APIdoc}
 *
 * `DELETE /API/library/${libraryId}/${itemId}`
 *
 * @function library.addLibraryItem
 * @param {Object} obj
 * @param {string} obj.libraryId
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function addLibraryItem(_ref7) {
  var _ref7$libraryId = _ref7.libraryId,
      libraryId = _ref7$libraryId === void 0 ? isRequired() : _ref7$libraryId,
      _ref7$itemId = _ref7.itemId,
      itemId = _ref7$itemId === void 0 ? isRequired() : _ref7$itemId,
      props = _objectWithoutProperties(_ref7, ["libraryId", "itemId"]);

  var path = "/API/library/".concat(libraryId, "/").concat(itemId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/library.html APIdoc}
 *
 * `PUT /API/library/${libraryId}/${itemId}`
 *
 * @function library.removeLibraryItem
 * @param {Object} obj
 * @param {string} obj.libraryId
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function removeLibraryItem(_ref8) {
  var _ref8$libraryId = _ref8.libraryId,
      libraryId = _ref8$libraryId === void 0 ? isRequired() : _ref8$libraryId,
      _ref8$itemId = _ref8.itemId,
      itemId = _ref8$itemId === void 0 ? isRequired() : _ref8$itemId,
      props = _objectWithoutProperties(_ref8, ["libraryId", "itemId"]);

  var path = "/API/library/".concat(libraryId, "/").concat(itemId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/library.html APIdoc}
 *
 * `PUT /API/library/${libraryId}/item-metadata`
 *
 * @function library.updateLibraryItemMetadata
 * @param {Object} obj
 * @param {string} obj.libraryId
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */


function updateLibraryItemMetadata(_ref9) {
  var _ref9$libraryId = _ref9.libraryId,
      libraryId = _ref9$libraryId === void 0 ? isRequired() : _ref9$libraryId,
      metadataDocument = _ref9.metadataDocument,
      props = _objectWithoutProperties(_ref9, ["libraryId", "metadataDocument"]);

  var path = "/API/library/".concat(libraryId, "/item-metadata");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/library.html APIdoc}
 *
 * `GET /API/library/${libraryId}/settings`
 *
 * @function library.getLibrarySettings
 * @param {Object} obj
 * @param {string} obj.libraryId
 * @returns {Promise<Object>}
 */


function getLibrarySettings(_ref10) {
  var _ref10$libraryId = _ref10.libraryId,
      libraryId = _ref10$libraryId === void 0 ? isRequired() : _ref10$libraryId,
      props = _objectWithoutProperties(_ref10, ["libraryId"]);

  var path = "/API/library/".concat(libraryId, "/settings");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/library.html APIdoc}
 *
 * `PUT /API/library/${libraryId}/settings`
 *
 * @function library.updateLibrarySettings
 * @param {Object} obj
 * @param {string} obj.libraryId
 * @param {Object} obj.librarySettingsDocument
 * @returns {Promise<Object>}
 */


function updateLibrarySettings(_ref11) {
  var _ref11$libraryId = _ref11.libraryId,
      libraryId = _ref11$libraryId === void 0 ? isRequired() : _ref11$libraryId,
      librarySettingsDocument = _ref11.librarySettingsDocument,
      props = _objectWithoutProperties(_ref11, ["libraryId", "librarySettingsDocument"]);

  var path = "/API/library/".concat(libraryId, "/settings");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: librarySettingsDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/library.html APIdoc}
 *
 * `POST /API/library/${libraryId}/list`
 *
 * @function library.getLibraryBatch
 * @param {Object} obj
 * @param {string} obj.libraryId
 * @returns {Promise<Object>}
 */


function getLibraryBatch(_ref12) {
  var _ref12$libraryId = _ref12.libraryId,
      libraryId = _ref12$libraryId === void 0 ? isRequired() : _ref12$libraryId,
      props = _objectWithoutProperties(_ref12, ["libraryId"]);

  var path = "/API/library/".concat(libraryId, "/list");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}

var library = {
  listLibrary: listLibrary,
  createLibrary: createLibrary,
  removeLibrary: removeLibrary,
  removeLibraryList: removeLibraryList,
  getLibrary: getLibrary,
  updateLibrary: updateLibrary,
  addLibraryItem: addLibraryItem,
  removeLibraryItem: removeLibraryItem,
  updateLibraryItemMetadata: updateLibraryItemMetadata,
  getLibrarySettings: getLibrarySettings,
  updateLibrarySettings: updateLibrarySettings,
  getLibraryBatch: getLibraryBatch
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `GET /API/configuration/`
 *
 * @function configuration.getConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function getConfiguration() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/configuration/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `GET /API/configuration/properties`
 *
 * @function configuration.getPropertiesConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getPropertiesConfiguration() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref2);

  var path = '/API/configuration/properties';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `PUT /API/configuration/properties`
 *
 * @function configuration.updatePropertiesConfiguration
 * @param {Object} obj
 * @param {Object} obj.configurationPropertyDocument
 * @returns {Promise<Object>}
 */


function updatePropertiesConfiguration(_ref3) {
  var configurationPropertyDocument = _ref3.configurationPropertyDocument,
      props = _objectWithoutProperties(_ref3, ["configurationPropertyDocument"]);

  var path = '/API/configuration/properties/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: configurationPropertyDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `POST /API/configuration/properties`
 *
 * @function configuration.updateAllPropertiesConfiguration
 * @param {Object} obj
 * @param {Object} obj.configurationPropertyListDocument
 * @returns {Promise<Object>}
 */


function updateAllPropertiesConfiguration(_ref4) {
  var _ref4$configurationPr = _ref4.configurationPropertyListDocument,
      configurationPropertyListDocument = _ref4$configurationPr === void 0 ? isRequired() : _ref4$configurationPr,
      props = _objectWithoutProperties(_ref4, ["configurationPropertyListDocument"]);

  var path = '/API/configuration/properties/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: configurationPropertyListDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `DELETE /API/configuration/properties/${key}`
 *
 * @function configuration.removePropertiesConfiguration
 * @param {Object} obj
 * @param {string} obj.key
 * @returns {Promise<Object>}
 */


function removePropertiesConfiguration(_ref5) {
  var _ref5$key = _ref5.key,
      key = _ref5$key === void 0 ? isRequired() : _ref5$key,
      props = _objectWithoutProperties(_ref5, ["key"]);

  var path = "/API/configuration/properties/".concat(key);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `GET /API/configuration/indexing`
 *
 * @function configuration.getIndexingConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getIndexingConfiguration() {
  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref6);

  var path = '/API/configuration/indexing';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `PUT /API/configuration/indexing`
 *
 * @function configuration.updateIndexingConfiguration
 * @param {Object} obj
 * @param {Object} obj.indexingConfigurationDocument
 * @returns {Promise<Object>}
 */


function updateIndexingConfiguration(_ref7) {
  var _ref7$indexingConfigu = _ref7.indexingConfigurationDocument,
      indexingConfigurationDocument = _ref7$indexingConfigu === void 0 ? isRequired() : _ref7$indexingConfigu,
      props = _objectWithoutProperties(_ref7, ["indexingConfigurationDocument"]);

  var path = '/API/configuration/indexing';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: indexingConfigurationDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `GET /API/configuration/ftp-pool`
 *
 * @function configuration.getFtpPoolConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getFtpPoolConfiguration() {
  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref8);

  var path = '/API/configuration/ftp-pool';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `PUT /API/configuration/ftp-pool`
 *
 * @function configuration.updateFtpPoolConfiguration
 * @param {Object} obj
 * @param {Object} obj.ftpPoolConfigurationDocument
 * @returns {Promise<Object>}
 */


function updateFtpPoolConfiguration(_ref9) {
  var _ref9$ftpPoolConfigur = _ref9.ftpPoolConfigurationDocument,
      ftpPoolConfigurationDocument = _ref9$ftpPoolConfigur === void 0 ? isRequired() : _ref9$ftpPoolConfigur,
      props = _objectWithoutProperties(_ref9, ["ftpPoolConfigurationDocument"]);

  var path = '/API/configuration/ftp-pool';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: ftpPoolConfigurationDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `DELETE /API/configuration/ftp-pool`
 *
 * @function configuration.removeFtpPoolConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function removeFtpPoolConfiguration(_ref10) {
  var props = _extends({}, _ref10);

  var path = '/API/configuration/ftp-pool';
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `GET /API/configuration/job-pool`
 *
 * @function configuration.getJobPoolConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getJobPoolConfiguration() {
  var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref11);

  var path = '/API/configuration/job-pool';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `PUT /API/configuration/job-pool`
 *
 * @function configuration.updateJobPoolConfiguration
 * @param {Object} obj
 * @param {Object} obj.jobPoolListDocument
 * @returns {Promise<Object>}
 */


function updateJobPoolConfiguration(_ref12) {
  var _ref12$jobPoolListDoc = _ref12.jobPoolListDocument,
      jobPoolListDocument = _ref12$jobPoolListDoc === void 0 ? isRequired() : _ref12$jobPoolListDoc,
      props = _objectWithoutProperties(_ref12, ["jobPoolListDocument"]);

  var path = '/API/configuration/job-pool';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: jobPoolListDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `DELETE /API/configuration/job-pool`
 *
 * @function configuration.removeAllJobPoolConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function removeAllJobPoolConfiguration(_ref13) {
  var props = _extends({}, _ref13);

  var path = '/API/configuration/job-pool';
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `DELETE /API/configuration/job-pool/${jobPoolPriority}`
 *
 * @function configuration.removeJobPoolConfiguration
 * @param {Object} obj
 * @param {string} obj.jobPoolPriority
 * @returns {Promise<Object>}
 */


function removeJobPoolConfiguration(_ref14) {
  var _ref14$jobPoolPriorit = _ref14.jobPoolPriority,
      jobPoolPriority = _ref14$jobPoolPriorit === void 0 ? isRequired() : _ref14$jobPoolPriorit,
      props = _objectWithoutProperties(_ref14, ["jobPoolPriority"]);

  var path = "/API/configuration/job-pool/".concat(jobPoolPriority);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `GET /API/configuration/metrics`
 *
 * @function configuration.getMetricsConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getMetricsConfiguration() {
  var _ref15 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref15);

  var path = '/API/configuration/metrics';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `PUT /API/configuration/metrics`
 *
 * @function configuration.updateMetricsConfiguration
 * @param {Object} obj
 * @param {Object} obj.metricsConfigurationDocument
 * @returns {Promise<Object>}
 */


function updateMetricsConfiguration(_ref16) {
  var _ref16$metricsConfigu = _ref16.metricsConfigurationDocument,
      metricsConfigurationDocument = _ref16$metricsConfigu === void 0 ? isRequired() : _ref16$metricsConfigu,
      props = _objectWithoutProperties(_ref16, ["metricsConfigurationDocument"]);

  var path = '/API/configuration/metrics';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metricsConfigurationDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `GET /API/configuration/path-alias`
 *
 * @function configuration.getPathAliasConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getPathAliasConfiguration() {
  var _ref17 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref17);

  var path = '/API/configuration/path-alias';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `PUT /API/configuration/path-alias`
 *
 * @function configuration.updatePathAliasConfiguration
 * @param {Object} obj
 * @param {Object} obj.pathAliasConfigurationDocument
 * @returns {Promise<Object>}
 */


function updatePathAliasConfiguration(_ref18) {
  var _ref18$pathAliasConfi = _ref18.pathAliasConfigurationDocument,
      pathAliasConfigurationDocument = _ref18$pathAliasConfi === void 0 ? isRequired() : _ref18$pathAliasConfi,
      props = _objectWithoutProperties(_ref18, ["pathAliasConfigurationDocument"]);

  var path = '/API/configuration/path-alias';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: pathAliasConfigurationDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `GET /API/configuration/logreport`
 *
 * @function configuration.getLogReportConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getLogReportConfiguration() {
  var _ref19 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref19);

  var path = '/API/configuration/logreport';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `PUT /API/configuration/logreport`
 *
 * @function configuration.updateLogReportConfiguration
 * @param {Object} obj
 * @param {Object} obj.logReportConfigurationDocument
 * @returns {Promise<Object>}
 */


function updateLogReportConfiguration(_ref20) {
  var _ref20$logReportConfi = _ref20.logReportConfigurationDocument,
      logReportConfigurationDocument = _ref20$logReportConfi === void 0 ? isRequired() : _ref20$logReportConfi,
      props = _objectWithoutProperties(_ref20, ["logReportConfigurationDocument"]);

  var path = '/API/configuration/logreport';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: logReportConfigurationDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `GET /API/configuration/purging`
 *
 * @function configuration.getDatabasePurgingConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getDatabasePurgingConfiguration() {
  var _ref21 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref21);

  var path = '/API/configuration/purging';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `PUT /API/configuration/purging`
 *
 * @function configuration.updateDatabasePurgingConfiguration
 * @param {Object} obj
 * @param {Object} obj.databasePurgingConfigurationDocument
 * @returns {Promise<Object>}
 */


function updateDatabasePurgingConfiguration(_ref22) {
  var _ref22$databasePurgin = _ref22.databasePurgingConfigurationDocument,
      databasePurgingConfigurationDocument = _ref22$databasePurgin === void 0 ? isRequired() : _ref22$databasePurgin,
      props = _objectWithoutProperties(_ref22, ["databasePurgingConfigurationDocument"]);

  var path = '/API/configuration/purging';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: databasePurgingConfigurationDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `DELETE /API/configuration/purging`
 *
 * @function configuration.removeDatabasePurgingConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function removeDatabasePurgingConfiguration(_ref23) {
  var props = _extends({}, _ref23);

  var path = '/API/configuration/purging';
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `GET /API/configuration/cors`
 *
 * @function configuration.getCorsConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getCorsConfiguration() {
  var _ref24 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref24);

  var path = '/API/configuration/cors';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `PUT /API/configuration/cors`
 *
 * @function configuration.updateCorsConfiguration
 * @param {Object} obj
 * @param {Object} obj.corsConfigurationDocument
 * @returns {Promise<Object>}
 */


function updateCorsConfiguration(_ref25) {
  var _ref25$corsConfigurat = _ref25.corsConfigurationDocument,
      corsConfigurationDocument = _ref25$corsConfigurat === void 0 ? isRequired() : _ref25$corsConfigurat,
      props = _objectWithoutProperties(_ref25, ["corsConfigurationDocument"]);

  var path = '/API/configuration/cors';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: corsConfigurationDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `GET /API/configuration/auth`
 *
 * @function configuration.getAuthConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getAuthConfiguration() {
  var _ref26 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref26);

  var path = '/API/configuration/auth';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `PUT /API/configuration/auth`
 *
 * @function configuration.updateAuthConfiguration
 * @param {Object} obj
 * @param {Object} obj.oAuth2ConfigurationDocument
 * @returns {Promise<Object>}
 */


function updateAuthConfiguration(_ref27) {
  var _ref27$oAuth2Configur = _ref27.oAuth2ConfigurationDocument,
      oAuth2ConfigurationDocument = _ref27$oAuth2Configur === void 0 ? isRequired() : _ref27$oAuth2Configur,
      props = _objectWithoutProperties(_ref27, ["oAuth2ConfigurationDocument"]);

  var path = '/API/configuration/auth';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: oAuth2ConfigurationDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html APIdoc}
 *
 * `DELETE /API/configuration/auth`
 *
 * @function configuration.removeAuthConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function removeAuthConfiguration() {
  var _ref28 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref28);

  var path = '/API/configuration/auth';
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html#retrieve-the-default-job-priority-configuration APIdoc}
 *
 * `GET /API/configuration/job-priority`
 *
 * @function configuration.getJobPriorityConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getJobPriorityConfiguration() {
  var _ref29 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref29);

  var path = '/API/configuration/job-priority';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link hhttps://apidoc.vidispine.com/latest/ref/property.html#update-the-default-job-priority-configuration APIdoc}
 *
 * `PUT /API/configuration/job-priority`
 *
 * @function configuration.updateJobPriorityConfiguration
 * @param {Object} obj
 * @param {Object} obj.jobPriorityConfigurationDocument
 * @returns {Promise<Object>}
 */


function updateJobPriorityConfiguration(_ref30) {
  var _ref30$jobPriorityCon = _ref30.jobPriorityConfigurationDocument,
      jobPriorityConfigurationDocument = _ref30$jobPriorityCon === void 0 ? isRequired() : _ref30$jobPriorityCon,
      props = _objectWithoutProperties(_ref30, ["jobPriorityConfigurationDocument"]);

  var path = '/API/configuration/job-priority';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: jobPriorityConfigurationDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html#remove-the-default-job-priority-configuration APIdoc}
 *
 * `DELETE /API/configuration/job-priority`
 *
 * @function configuration.removeJobPriorityConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function removeJobPriorityConfiguration() {
  var _ref31 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref31);

  var path = '/API/configuration/job-priority';
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html#bulky-metadata-storage-configuration APIdoc}
 *
 * `GET /API/configuration/bulkymetadata`
 *
 * @function configuration.getBulkyMetadataConfiguration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getBulkyMetadataConfiguration() {
  var _ref32 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref32);

  var path = '/API/configuration/bulkymetadata';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/property.html#update-the-bulky-metdata-storage-configuration APIdoc}
 *
 * `PUT /API/configuration/bulkymetadata`
 *
 * @function configuration.updateBulkyMetadataConfiguration
 * @param {Object} obj
 * @param {Object} obj.bulkyMetadataConfigurationDocument
 * @returns {Promise<Object>}
 */


function updateBulkyMetadataConfiguration(_ref33) {
  var _ref33$bulkyMetadataC = _ref33.bulkyMetadataConfigurationDocument,
      bulkyMetadataConfigurationDocument = _ref33$bulkyMetadataC === void 0 ? isRequired() : _ref33$bulkyMetadataC,
      props = _objectWithoutProperties(_ref33, ["bulkyMetadataConfigurationDocument"]);

  var path = '/API/configuration/bulkymetadata';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: bulkyMetadataConfigurationDocument
  }, props));
}

var configuration = {
  getConfiguration: getConfiguration,
  getPropertiesConfiguration: getPropertiesConfiguration,
  updatePropertiesConfiguration: updatePropertiesConfiguration,
  updateAllPropertiesConfiguration: updateAllPropertiesConfiguration,
  removePropertiesConfiguration: removePropertiesConfiguration,
  getIndexingConfiguration: getIndexingConfiguration,
  updateIndexingConfiguration: updateIndexingConfiguration,
  getFtpPoolConfiguration: getFtpPoolConfiguration,
  updateFtpPoolConfiguration: updateFtpPoolConfiguration,
  removeFtpPoolConfiguration: removeFtpPoolConfiguration,
  getJobPoolConfiguration: getJobPoolConfiguration,
  updateJobPoolConfiguration: updateJobPoolConfiguration,
  removeAllJobPoolConfiguration: removeAllJobPoolConfiguration,
  removeJobPoolConfiguration: removeJobPoolConfiguration,
  getMetricsConfiguration: getMetricsConfiguration,
  updateMetricsConfiguration: updateMetricsConfiguration,
  getPathAliasConfiguration: getPathAliasConfiguration,
  updatePathAliasConfiguration: updatePathAliasConfiguration,
  getLogReportConfiguration: getLogReportConfiguration,
  updateLogReportConfiguration: updateLogReportConfiguration,
  getDatabasePurgingConfiguration: getDatabasePurgingConfiguration,
  updateDatabasePurgingConfiguration: updateDatabasePurgingConfiguration,
  removeDatabasePurgingConfiguration: removeDatabasePurgingConfiguration,
  getCorsConfiguration: getCorsConfiguration,
  updateCorsConfiguration: updateCorsConfiguration,
  getAuthConfiguration: getAuthConfiguration,
  updateAuthConfiguration: updateAuthConfiguration,
  removeAuthConfiguration: removeAuthConfiguration,
  getJobPriorityConfiguration: getJobPriorityConfiguration,
  updateJobPriorityConfiguration: updateJobPriorityConfiguration,
  removeJobPriorityConfiguration: removeJobPriorityConfiguration,
  getBulkyMetadataConfiguration: getBulkyMetadataConfiguration,
  updateBulkyMetadataConfiguration: updateBulkyMetadataConfiguration
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/document-metadata.html APIdoc}
 *
 * `GET /API/document/`
 *
 * @function documentmetadata.listDocumentMetadata
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listDocumentMetadata() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/document/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/document-metadata.html#search-for-documents APIdoc}
 *
 * `PUT /API/document/`
 *
 * @function documentmetadata.searchDocumentMetadata
 * @param {Object} obj
 * @param {Object} obj.itemSearchDocument
 * @returns {Promise<Object>}
 */


function searchDocumentMetadata() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      itemSearchDocument = _ref2.itemSearchDocument,
      props = _objectWithoutProperties(_ref2, ["itemSearchDocument"]);

  var path = '/API/document/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: itemSearchDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/document-metadata.html APIdoc}
 *
 * `GET /API/document/${documentMetadataName}`
 *
 * @function documentmetadata.getDocumentMetadata
 * @param {Object} obj
 * @param {string} obj.documentMetadataName
 * @returns {Promise<Object>}
 */


function getDocumentMetadata(_ref3) {
  var _ref3$documentMetadat = _ref3.documentMetadataName,
      documentMetadataName = _ref3$documentMetadat === void 0 ? isRequired() : _ref3$documentMetadat,
      props = _objectWithoutProperties(_ref3, ["documentMetadataName"]);

  var path = "/API/document/".concat(documentMetadataName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/document-metadata.html APIdoc}
 *
 * `PUT /API/document/${documentMetadataName}`
 *
 * @function documentmetadata.updateDocumentMetadata
 * @param {Object} obj
 * @param {string} obj.documentMetadataName
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */


function updateDocumentMetadata(_ref4) {
  var _ref4$documentMetadat = _ref4.documentMetadataName,
      documentMetadataName = _ref4$documentMetadat === void 0 ? isRequired() : _ref4$documentMetadat,
      metadataDocument = _ref4.metadataDocument,
      props = _objectWithoutProperties(_ref4, ["documentMetadataName", "metadataDocument"]);

  var path = "/API/document/".concat(documentMetadataName);
  return vFetch(_objectSpread2({
    path: path,
    body: metadataDocument,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/document-metadata.html APIdoc}
 *
 * `GET /API/document/${documentMetadataName}/changes`
 *
 * @function documentmetadata.getDocumentMetadataChanges
 * @param {Object} obj
 * @param {string} obj.documentMetadataName
 * @returns {Promise<Object>}
 */


function getDocumentMetadataChanges(_ref5) {
  var _ref5$documentMetadat = _ref5.documentMetadataName,
      documentMetadataName = _ref5$documentMetadat === void 0 ? isRequired() : _ref5$documentMetadat,
      props = _objectWithoutProperties(_ref5, ["documentMetadataName"]);

  var path = "/API/document/".concat(documentMetadataName, "/changes");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/document-metadata.html APIdoc}
 *
 * `DELETE /API/document/${documentMetadataName}`
 *
 * @function documentmetadata.removeDocumentMetadata
 * @param {Object} obj
 * @param {string} obj.documentMetadataName
 * @returns {Promise<Object>}
 */


function removeDocumentMetadata(_ref6) {
  var _ref6$documentMetadat = _ref6.documentMetadataName,
      documentMetadataName = _ref6$documentMetadat === void 0 ? isRequired() : _ref6$documentMetadat,
      props = _objectWithoutProperties(_ref6, ["documentMetadataName"]);

  var path = "/API/document/".concat(documentMetadataName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var documentmetadata = {
  listDocumentMetadata: listDocumentMetadata,
  searchDocumentMetadata: searchDocumentMetadata,
  getDocumentMetadata: getDocumentMetadata,
  updateDocumentMetadata: updateDocumentMetadata,
  getDocumentMetadataChanges: getDocumentMetadataChanges,
  removeDocumentMetadata: removeDocumentMetadata
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/conform.html#start-a-conform-job APIdoc}
 *
 * `POST /API/conform`
 *
 * @function conform.createConform
 * @param {Object} obj
 * @param {Object} obj.conformRequestDocument
 * @returns {Promise<Object>}
 */

function createConform(_ref) {
  var _ref$conformRequestDo = _ref.conformRequestDocument,
      conformRequestDocument = _ref$conformRequestDo === void 0 ? isRequired() : _ref$conformRequestDo,
      props = _objectWithoutProperties(_ref, ["conformRequestDocument"]);

  var path = '/API/conform';
  return vFetch(_objectSpread2({
    path: path,
    body: conformRequestDocument,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/conform.html#start-a-conform-job-for-an-existing-item APIdoc}
 *
 * `POST /API/item/${itemId}/timeline/${timelineFormat}/conform`
 *
 * @function conform.createConformItem
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.timelineFormat
 * @param {Object} obj.conformRequestDocument
 * @returns {Promise<Object>}
 */


function createConformItem(_ref2) {
  var _ref2$itemId = _ref2.itemId,
      itemId = _ref2$itemId === void 0 ? isRequired() : _ref2$itemId,
      _ref2$timelineFormat = _ref2.timelineFormat,
      timelineFormat = _ref2$timelineFormat === void 0 ? isRequired() : _ref2$timelineFormat,
      _ref2$conformRequestD = _ref2.conformRequestDocument,
      conformRequestDocument = _ref2$conformRequestD === void 0 ? isRequired() : _ref2$conformRequestD,
      props = _objectWithoutProperties(_ref2, ["itemId", "timelineFormat", "conformRequestDocument"]);

  var path = "/API/item/".concat(itemId, "/timeline/").concat(timelineFormat, "/conform");
  return vFetch(_objectSpread2({
    path: path,
    body: conformRequestDocument,
    method: 'POST'
  }, props));
}

var conform = {
  createConform: createConform,
  createConformItem: createConformItem
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/projection.html APIdoc}
 *
 * `GET /API/projection/`
 *
 * @function projection.listProjection
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listProjection() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/projection/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/projection.html APIdoc}
 *
 * `GET /API/projection/${projectionId}/outgoing`
 *
 * @function projection.getProjectionOutgoing
 * @param {Object} obj
 * @param {string} obj.projectionId
 * @returns {Promise<Object>}
 */


function getProjectionOutgoing(_ref2) {
  var _ref2$projectionId = _ref2.projectionId,
      projectionId = _ref2$projectionId === void 0 ? isRequired() : _ref2$projectionId,
      _ref2$headers = _ref2.headers,
      propHeaders = _ref2$headers === void 0 ? {} : _ref2$headers,
      props = _objectWithoutProperties(_ref2, ["projectionId", "headers"]);

  var path = "/API/projection/".concat(projectionId, "/outgoing");

  var headers = _objectSpread2({
    accept: 'application/xml'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/projection.html APIdoc}
 *
 * `GET /API/projection/${projectionId}/incoming`
 *
 * @function projection.getProjectionIncoming
 * @param {Object} obj
 * @param {string} obj.projectionId
 * @returns {Promise<Object>}
 */


function getProjectionIncoming(_ref3) {
  var _ref3$projectionId = _ref3.projectionId,
      projectionId = _ref3$projectionId === void 0 ? isRequired() : _ref3$projectionId,
      _ref3$headers = _ref3.headers,
      propHeaders = _ref3$headers === void 0 ? {} : _ref3$headers,
      props = _objectWithoutProperties(_ref3, ["projectionId", "headers"]);

  var path = "/API/projection/".concat(projectionId, "/incoming");

  var headers = _objectSpread2({
    accept: 'application/xml'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/projection.html APIdoc}
 *
 * `PUT /API/projection/${projectionId}/outgoing`
 *
 * @function projection.updateProjectionOutgoing
 * @param {Object} obj
 * @param {string} obj.projectionId
 * @param {Object} obj.projectionDocument
 * @returns {Promise<Object>}
 */


function updateProjectionOutgoing(_ref4) {
  var _ref4$projectionId = _ref4.projectionId,
      projectionId = _ref4$projectionId === void 0 ? isRequired() : _ref4$projectionId,
      projectionDocument = _ref4.projectionDocument,
      _ref4$headers = _ref4.headers,
      propHeaders = _ref4$headers === void 0 ? {} : _ref4$headers,
      props = _objectWithoutProperties(_ref4, ["projectionId", "projectionDocument", "headers"]);

  var path = "/API/projection/".concat(projectionId, "/outgoing");

  var headers = _objectSpread2({
    contentType: 'application/xml',
    accept: 'application/xml'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: projectionDocument,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/projection.html APIdoc}
 *
 * `PUT /API/projection/${projectionId}/incoming`
 *
 * @function projection.updateProjectionIncoming
 * @param {Object} obj
 * @param {string} obj.projectionId
 * @param {Object} obj.projectionDocument
 * @returns {Promise<Object>}
 */


function updateProjectionIncoming(_ref5) {
  var _ref5$projectionId = _ref5.projectionId,
      projectionId = _ref5$projectionId === void 0 ? isRequired() : _ref5$projectionId,
      projectionDocument = _ref5.projectionDocument,
      _ref5$headers = _ref5.headers,
      propHeaders = _ref5$headers === void 0 ? {} : _ref5$headers,
      props = _objectWithoutProperties(_ref5, ["projectionId", "projectionDocument", "headers"]);

  var path = "/API/projection/".concat(projectionId, "/incoming");

  var headers = _objectSpread2({
    contentType: 'application/xml',
    accept: 'application/xml'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: projectionDocument,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/projection.html APIdoc}
 *
 * `DELETE /API/projection/${projectionId}`
 *
 * @function projection.removeProjection
 * @param {Object} obj
 * @param {string} obj.projectionId
 * @returns {Promise<Object>}
 */


function removeProjection(_ref6) {
  var _ref6$projectionId = _ref6.projectionId,
      projectionId = _ref6$projectionId === void 0 ? isRequired() : _ref6$projectionId,
      props = _objectWithoutProperties(_ref6, ["projectionId"]);

  var path = "/API/projection/".concat(projectionId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var projection = {
  listProjection: listProjection,
  getProjectionOutgoing: getProjectionOutgoing,
  getProjectionIncoming: getProjectionIncoming,
  updateProjectionOutgoing: updateProjectionOutgoing,
  updateProjectionIncoming: updateProjectionIncoming,
  removeProjection: removeProjection
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#retrieve-the-access-control-list-for-an-entity APIdoc}
 *
 * `GET /API/${entityType}/${entityId}/access/`
 *
 * @function access.listEntityAccess
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */

function listEntityAccess(_ref) {
  var _ref$entityType = _ref.entityType,
      entityType = _ref$entityType === void 0 ? isRequired() : _ref$entityType,
      _ref$entityId = _ref.entityId,
      entityId = _ref$entityId === void 0 ? isRequired() : _ref$entityId,
      props = _objectWithoutProperties(_ref, ["entityType", "entityId"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/access/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#create-an-access-control-entry APIdoc}
 *
 * `POST /API/${entityType}/${entityId}/access/`
 *
 * @function access.createEntityAccess
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {Object} obj.accessControlDocument
 * @returns {Promise<Object>}
 */


function createEntityAccess(_ref2) {
  var _ref2$entityType = _ref2.entityType,
      entityType = _ref2$entityType === void 0 ? isRequired() : _ref2$entityType,
      _ref2$entityId = _ref2.entityId,
      entityId = _ref2$entityId === void 0 ? isRequired() : _ref2$entityId,
      accessControlDocument = _ref2.accessControlDocument,
      props = _objectWithoutProperties(_ref2, ["entityType", "entityId", "accessControlDocument"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/access/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: accessControlDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#retrieve-an-access-control-entry APIdoc}
 *
 * `GET /API/${entityType}/${entityId}/access/${accessId}`
 *
 * @function access.getEntityAccess
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {string} obj.accessId
 * @returns {Promise<Object>}
 */


function getEntityAccess(_ref3) {
  var _ref3$entityType = _ref3.entityType,
      entityType = _ref3$entityType === void 0 ? isRequired() : _ref3$entityType,
      _ref3$entityId = _ref3.entityId,
      entityId = _ref3$entityId === void 0 ? isRequired() : _ref3$entityId,
      _ref3$accessId = _ref3.accessId,
      accessId = _ref3$accessId === void 0 ? isRequired() : _ref3$accessId,
      props = _objectWithoutProperties(_ref3, ["entityType", "entityId", "accessId"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/access/").concat(accessId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#list-the-applied-access-control-entries-for-an-entity APIdoc}
 *
 * `GET /API/${entityType}/${entityId}/merged-access/`
 *
 * @function access.getEntityAccessMerged
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function getEntityAccessMerged(_ref4) {
  var _ref4$entityType = _ref4.entityType,
      entityType = _ref4$entityType === void 0 ? isRequired() : _ref4$entityType,
      _ref4$entityId = _ref4.entityId,
      entityId = _ref4$entityId === void 0 ? isRequired() : _ref4$entityId,
      props = _objectWithoutProperties(_ref4, ["entityType", "entityId"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/merged-access/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#list-the-applied-access-control-entries-that-affects-groups APIdoc}
 *
 * `GET /API/${entityType}/${entityId}/merged-access/group`
 *
 * @function access.getEntityAccessMergedGroup
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function getEntityAccessMergedGroup(_ref5) {
  var _ref5$entityType = _ref5.entityType,
      entityType = _ref5$entityType === void 0 ? isRequired() : _ref5$entityType,
      _ref5$entityId = _ref5.entityId,
      entityId = _ref5$entityId === void 0 ? isRequired() : _ref5$entityId,
      props = _objectWithoutProperties(_ref5, ["entityType", "entityId"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/merged-access/group");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#delete-an-access-control-entry APIdoc}
 *
 * `DELETE /API/${entityType}/${entityId}/access/${accessId}`
 *
 * @function access.removeEntityAccess
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {string} obj.accessId
 * @returns {Promise<Object>}
 */


function removeEntityAccess(_ref6) {
  var _ref6$entityType = _ref6.entityType,
      entityType = _ref6$entityType === void 0 ? isRequired() : _ref6$entityType,
      _ref6$entityId = _ref6.entityId,
      entityId = _ref6$entityId === void 0 ? isRequired() : _ref6$entityId,
      _ref6$accessId = _ref6.accessId,
      accessId = _ref6$accessId === void 0 ? isRequired() : _ref6$accessId,
      props = _objectWithoutProperties(_ref6, ["entityType", "entityId", "accessId"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/access/").concat(accessId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#update-the-owner-of-an-entity APIdoc}
 *
 * `PUT /API/${entityType}/${entityId}/access/owner/${userName}`
 *
 * @function access.updateEntityOwner
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {string} obj.userName
 * @returns {Promise<Object>}
 */


function updateEntityOwner(_ref7) {
  var _ref7$entityType = _ref7.entityType,
      entityType = _ref7$entityType === void 0 ? isRequired() : _ref7$entityType,
      _ref7$entityId = _ref7.entityId,
      entityId = _ref7$entityId === void 0 ? isRequired() : _ref7$entityId,
      _ref7$userName = _ref7.userName,
      userName = _ref7$userName === void 0 ? isRequired() : _ref7$userName,
      props = _objectWithoutProperties(_ref7, ["entityType", "entityId", "userName"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/access/owner/").concat(userName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#create-multiple-entry-access-control-entries APIdoc}
 *
 * `POST /API/${entityType}/${entityId}/access/bulk`
 *
 * @function access.createEntityAccessBulk
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {Object} obj.accessControlListDocument
 * @returns {Promise<Object>}
 */


function createEntityAccessBulk(_ref8) {
  var _ref8$entityType = _ref8.entityType,
      entityType = _ref8$entityType === void 0 ? isRequired() : _ref8$entityType,
      _ref8$entityId = _ref8.entityId,
      entityId = _ref8$entityId === void 0 ? isRequired() : _ref8$entityId,
      accessControlListDocument = _ref8.accessControlListDocument,
      props = _objectWithoutProperties(_ref8, ["entityType", "entityId", "accessControlListDocument"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/access/bulk");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: accessControlListDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#delete-multiple-access-control-entries APIdoc}
 *
 * `DELETE /API/${entityType}/${entityId}/access/bulk`
 *
 * @function access.removeEntityAccessBulk
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @param {Object} obj.accessControlListDocument
 * @returns {Promise<Object>}
 */


function removeEntityAccessBulk(_ref9) {
  var _ref9$entityType = _ref9.entityType,
      entityType = _ref9$entityType === void 0 ? isRequired() : _ref9$entityType,
      _ref9$entityId = _ref9.entityId,
      entityId = _ref9$entityId === void 0 ? isRequired() : _ref9$entityId,
      accessControlListDocument = _ref9.accessControlListDocument,
      props = _objectWithoutProperties(_ref9, ["entityType", "entityId", "accessControlListDocument"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/access/bulk");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE',
    body: accessControlListDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#retrieve-the-access-graph APIdoc}
 *
 * `GET /API/${entityType}/${entityId}/access/graph`
 *
 * @function access.getEntityAccessGraph
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function getEntityAccessGraph(_ref10) {
  var _ref10$entityType = _ref10.entityType,
      entityType = _ref10$entityType === void 0 ? isRequired() : _ref10$entityType,
      _ref10$entityId = _ref10.entityId,
      entityId = _ref10$entityId === void 0 ? isRequired() : _ref10$entityId,
      _ref10$headers = _ref10.headers,
      propHeaders = _ref10$headers === void 0 ? {} : _ref10$headers,
      props = _objectWithoutProperties(_ref10, ["entityType", "entityId", "headers"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/access/graph");

  var headers = _objectSpread2({
    accept: 'image/png'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#retrieve-the-access-graph-as-dot-file APIdoc}
 *
 * `GET /API/${entityType}/${entityId}/access/graph/dot`
 *
 * @function access.getEntityAccessGraphDot
 * @param {Object} obj
 * @param {string} obj.entityType
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function getEntityAccessGraphDot(_ref11) {
  var _ref11$entityType = _ref11.entityType,
      entityType = _ref11$entityType === void 0 ? isRequired() : _ref11$entityType,
      _ref11$entityId = _ref11.entityId,
      entityId = _ref11$entityId === void 0 ? isRequired() : _ref11$entityId,
      _ref11$headers = _ref11.headers,
      propHeaders = _ref11$headers === void 0 ? {} : _ref11$headers,
      props = _objectWithoutProperties(_ref11, ["entityType", "entityId", "headers"]);

  var path = "/API/".concat(entityType, "/").concat(entityId, "/access/graph/dot");

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#add-access-control-entries-to-all-items APIdoc}
 *
 * `GET /API/item/access/`
 *
 * @function access.createItemAllAccess
 * @param {Object} obj
 * @param {Object} obj.accessControlDocument
 * @returns {Promise<Object>}
 */


function createItemAllAccess(_ref12) {
  var accessControlDocument = _ref12.accessControlDocument,
      props = _objectWithoutProperties(_ref12, ["accessControlDocument"]);

  var path = '/API/item/access/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: accessControlDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#delete-all-access-control-entries-from-all-items APIdoc}
 *
 * `DELETE /API/item/access/`
 *
 * @function access.removeItemAllAccess
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function removeItemAllAccess() {
  var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref13);

  var path = '/API/item/access/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#list-the-default-access-controls-for-the-current-user APIdoc}
 *
 * `GET /API/import/access/`
 *
 * @function access.getImportAccess
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getImportAccess() {
  var _ref14 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref14);

  var path = '/API/import/access/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#add-a-group-to-the-default-access-control-list APIdoc}
 *
 * `PUT /API/import/access/group/${groupName}`
 *
 * @function access.updateImportAccessGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function updateImportAccessGroup(_ref15) {
  var _ref15$groupName = _ref15.groupName,
      groupName = _ref15$groupName === void 0 ? isRequired() : _ref15$groupName,
      props = _objectWithoutProperties(_ref15, ["groupName"]);

  var path = "/API/import/access/group/".concat(groupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/access-control.html#remove-a-group-from-the-default-access-control-list APIdoc}
 *
 * `DELETE /API/import/access/group/${groupName}`
 *
 * @function access.removeImportAccessGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function removeImportAccessGroup(_ref16) {
  var _ref16$groupName = _ref16.groupName,
      groupName = _ref16$groupName === void 0 ? isRequired() : _ref16$groupName,
      props = _objectWithoutProperties(_ref16, ["groupName"]);

  var path = "/API/import/access/group/".concat(groupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var access = {
  listEntityAccess: listEntityAccess,
  createEntityAccess: createEntityAccess,
  getEntityAccess: getEntityAccess,
  getEntityAccessMerged: getEntityAccessMerged,
  getEntityAccessMergedGroup: getEntityAccessMergedGroup,
  removeEntityAccess: removeEntityAccess,
  updateEntityOwner: updateEntityOwner,
  createEntityAccessBulk: createEntityAccessBulk,
  removeEntityAccessBulk: removeEntityAccessBulk,
  getEntityAccessGraph: getEntityAccessGraph,
  getEntityAccessGraphDot: getEntityAccessGraphDot,
  createItemAllAccess: createItemAllAccess,
  removeItemAllAccess: removeItemAllAccess,
  getImportAccess: getImportAccess,
  updateImportAccessGroup: updateImportAccessGroup,
  removeImportAccessGroup: removeImportAccessGroup
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import-settings.html APIdoc}
 *
 * `GET /API/import/settings`
 *
 * @function importsettings.listImportSettings
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listImportSettings() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/import/settings';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import-settings.html APIdoc}
 *
 * `POST /API/import/settings`
 *
 * @function importsettings.createImportSettings
 * @param {Object} obj
 * @param {Object} obj.importSettingsDocument
 * @returns {Promise<Object>}
 */


function createImportSettings(_ref2) {
  var importSettingsDocument = _ref2.importSettingsDocument,
      props = _objectWithoutProperties(_ref2, ["importSettingsDocument"]);

  var path = '/API/import/settings';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: importSettingsDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import-settings.html APIdoc}
 *
 * `GET /API/import/settings/${settingsId}`
 *
 * @function importsettings.getImportSettings
 * @param {Object} obj
 * @param {string} obj.settingsId
 * @returns {Promise<Object>}
 */


function getImportSettings(_ref3) {
  var _ref3$settingsId = _ref3.settingsId,
      settingsId = _ref3$settingsId === void 0 ? isRequired() : _ref3$settingsId,
      props = _objectWithoutProperties(_ref3, ["settingsId"]);

  var path = "/API/import/settings/".concat(settingsId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import-settings.html APIdoc}
 *
 * `PUT /API/import/settings/${settingsId}`
 *
 * @function importsettings.updateImportSettings
 * @param {Object} obj
 * @param {string} obj.settingsId
 * @param {Object} obj.importSettingsDocument
 * @returns {Promise<Object>}
 */


function updateImportSettings(_ref4) {
  var _ref4$settingsId = _ref4.settingsId,
      settingsId = _ref4$settingsId === void 0 ? isRequired() : _ref4$settingsId,
      importSettingsDocument = _ref4.importSettingsDocument,
      props = _objectWithoutProperties(_ref4, ["settingsId", "importSettingsDocument"]);

  var path = "/API/import/settings/".concat(settingsId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: importSettingsDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/import-settings.html APIdoc}
 *
 * `DELETE /API/import/settings/${settingsId}`
 *
 * @function importsettings.removeImportSettings
 * @param {Object} obj
 * @param {string} obj.settingsId
 * @returns {Promise<Object>}
 */


function removeImportSettings(_ref5) {
  var _ref5$settingsId = _ref5.settingsId,
      settingsId = _ref5$settingsId === void 0 ? isRequired() : _ref5$settingsId,
      props = _objectWithoutProperties(_ref5, ["settingsId"]);

  var path = "/API/import/settings/".concat(settingsId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var importsettings = {
  listImportSettings: listImportSettings,
  createImportSettings: createImportSettings,
  getImportSettings: getImportSettings,
  updateImportSettings: updateImportSettings,
  removeImportSettings: removeImportSettings
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-group.html APIdoc}
 *
 * `GET /API/task-group`
 *
 * @function taskgroup.listTaskGroup
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listTaskGroup() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/task-group';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-group.html APIdoc}
 *
 * `PUT /API/task-group/${groupName}`
 *
 * @function taskgroup.updateTaskGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {Object} obj.taskGroupDocument
 * @returns {Promise<Object>}
 */


function updateTaskGroup(_ref2) {
  var _ref2$groupName = _ref2.groupName,
      groupName = _ref2$groupName === void 0 ? isRequired() : _ref2$groupName,
      taskGroupDocument = _ref2.taskGroupDocument,
      props = _objectWithoutProperties(_ref2, ["groupName", "taskGroupDocument"]);

  var path = "/API/task-group/".concat(groupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: taskGroupDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-group.html APIdoc}
 *
 * `GET /API/task-group/${groupName}`
 *
 * @function taskgroup.getTaskGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function getTaskGroup(_ref3) {
  var _ref3$groupName = _ref3.groupName,
      groupName = _ref3$groupName === void 0 ? isRequired() : _ref3$groupName,
      props = _objectWithoutProperties(_ref3, ["groupName"]);

  var path = "/API/task-group/".concat(groupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-group.html APIdoc}
 *
 * `DELETE /API/task-group/${groupName}`
 *
 * @function taskgroup.removeTaskGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function removeTaskGroup(_ref4) {
  var _ref4$groupName = _ref4.groupName,
      groupName = _ref4$groupName === void 0 ? isRequired() : _ref4$groupName,
      props = _objectWithoutProperties(_ref4, ["groupName"]);

  var path = "/API/task-group/".concat(groupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-group.html APIdoc}
 *
 * `DELETE /API/task-group`
 *
 * @function taskgroup.removeAllTaskGroup
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function removeAllTaskGroup() {
  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref5);

  var path = '/API/task-group';
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-group.html APIdoc}
 *
 * `PUT /API/task-group/${groupName}/transcoder/${transcoderId}`
 *
 * @function taskgroup.updateTaskGroupTranscoder
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {string} obj.transcoderId
 * @param {Object} obj.taskGroupDocument
 * @returns {Promise<Object>}
 */


function updateTaskGroupTranscoder(_ref6) {
  var _ref6$groupName = _ref6.groupName,
      groupName = _ref6$groupName === void 0 ? isRequired() : _ref6$groupName,
      _ref6$transcoderId = _ref6.transcoderId,
      transcoderId = _ref6$transcoderId === void 0 ? isRequired() : _ref6$transcoderId,
      taskGroupDocument = _ref6.taskGroupDocument,
      props = _objectWithoutProperties(_ref6, ["groupName", "transcoderId", "taskGroupDocument"]);

  var path = "/API/task-group/".concat(groupName, "/transcoder/").concat(transcoderId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/task-group.html APIdoc}
 *
 * `DELETE /API/task-group/${groupName}/transcoder/${transcoderId}`
 *
 * @function taskgroup.removeTaskGroupTranscoder
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {string} obj.transcoderId
 * @returns {Promise<Object>}
 */


function removeTaskGroupTranscoder(_ref7) {
  var _ref7$groupName = _ref7.groupName,
      groupName = _ref7$groupName === void 0 ? isRequired() : _ref7$groupName,
      _ref7$transcoderId = _ref7.transcoderId,
      transcoderId = _ref7$transcoderId === void 0 ? isRequired() : _ref7$transcoderId,
      props = _objectWithoutProperties(_ref7, ["groupName", "transcoderId"]);

  var path = "/API/task-group/".concat(groupName, "/transcoder/").concat(transcoderId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var taskgroup = {
  listTaskGroup: listTaskGroup,
  updateTaskGroup: updateTaskGroup,
  getTaskGroup: getTaskGroup,
  removeTaskGroup: removeTaskGroup,
  removeAllTaskGroup: removeAllTaskGroup,
  updateTaskGroupTranscoder: updateTaskGroupTranscoder,
  removeTaskGroupTranscoder: removeTaskGroupTranscoder
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-group.html APIdoc}
 *
 * `GET /API/storage/storage-group/`
 *
 * @function storagegroup.listStorageGroup
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listStorageGroup() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/storage/storage-group/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-group.html APIdoc}
 *
 * `PUT /API/storage/storage-group/${groupName}`
 *
 * @function storagegroup.createStorageGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function createStorageGroup(_ref2) {
  var _ref2$groupName = _ref2.groupName,
      groupName = _ref2$groupName === void 0 ? isRequired() : _ref2$groupName,
      props = _objectWithoutProperties(_ref2, ["groupName"]);

  var path = "/API/storage/storage-group/".concat(groupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-group.html APIdoc}
 *
 * `GET /API/storage/storage-group/${groupName}`
 *
 * @function storagegroup.getStorageGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function getStorageGroup(_ref3) {
  var _ref3$groupName = _ref3.groupName,
      groupName = _ref3$groupName === void 0 ? isRequired() : _ref3$groupName,
      props = _objectWithoutProperties(_ref3, ["groupName"]);

  var path = "/API/storage/storage-group/".concat(groupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-group.html APIdoc}
 *
 * `DELETE /API/storage/storage-group/${groupName}`
 *
 * @function storagegroup.removeStorageGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function removeStorageGroup(_ref4) {
  var _ref4$groupName = _ref4.groupName,
      groupName = _ref4$groupName === void 0 ? isRequired() : _ref4$groupName,
      props = _objectWithoutProperties(_ref4, ["groupName"]);

  var path = "/API/storage/storage-group/".concat(groupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-group.html APIdoc}
 *
 * `PUT /API/storage/storage-group/${groupName}/${storageId}`
 *
 * @function storagegroup.addStorageGroupStorage
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function addStorageGroupStorage(_ref5) {
  var _ref5$groupName = _ref5.groupName,
      groupName = _ref5$groupName === void 0 ? isRequired() : _ref5$groupName,
      _ref5$storageId = _ref5.storageId,
      storageId = _ref5$storageId === void 0 ? isRequired() : _ref5$storageId,
      props = _objectWithoutProperties(_ref5, ["groupName", "storageId"]);

  var path = "/API/storage/storage-group/".concat(groupName, "/").concat(storageId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/storage/storage-group.html APIdoc}
 *
 * `DELETE /API/storage/storage-group/${groupName}/${storageId}`
 *
 * @function storagegroup.removeStorageGroupStorage
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {string} obj.storageId
 * @returns {Promise<Object>}
 */


function removeStorageGroupStorage(_ref6) {
  var _ref6$groupName = _ref6.groupName,
      groupName = _ref6$groupName === void 0 ? isRequired() : _ref6$groupName,
      _ref6$storageId = _ref6.storageId,
      storageId = _ref6$storageId === void 0 ? isRequired() : _ref6$storageId,
      props = _objectWithoutProperties(_ref6, ["groupName", "storageId"]);

  var path = "/API/storage/storage-group/".concat(groupName, "/").concat(storageId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var storagegroup = {
  listStorageGroup: listStorageGroup,
  createStorageGroup: createStorageGroup,
  getStorageGroup: getStorageGroup,
  removeStorageGroup: removeStorageGroup,
  addStorageGroupStorage: addStorageGroupStorage,
  removeStorageGroupStorage: removeStorageGroupStorage
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/quota.html APIdoc}
 *
 * `GET /API/quota/`
 *
 * @function quota.listQuota
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listQuota() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/quota/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/quota.html APIdoc}
 *
 * `POST /API/quota/`
 *
 * @function quota.createQuota
 * @param {Object} obj
 * @param {Object} obj.quotaRuleDocument
 * @returns {Promise<Object>}
 */


function createQuota(_ref2) {
  var quotaRuleDocument = _ref2.quotaRuleDocument,
      props = _objectWithoutProperties(_ref2, ["quotaRuleDocument"]);

  var path = '/API/quota/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: quotaRuleDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/quota.html APIdoc}
 *
 * `GET /API/quota/${ruleId}`
 *
 * @function quota.getQuota
 * @param {Object} obj
 * @param {string} obj.ruleId
 * @returns {Promise<Object>}
 */


function getQuota(_ref3) {
  var _ref3$ruleId = _ref3.ruleId,
      ruleId = _ref3$ruleId === void 0 ? isRequired() : _ref3$ruleId,
      props = _objectWithoutProperties(_ref3, ["ruleId"]);

  var path = "/API/quota/".concat(ruleId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/quota.html APIdoc}
 *
 * `PUT /API/quota/${ruleId}`
 *
 * @function quota.evaluateQuota
 * @param {Object} obj
 * @param {string} obj.ruleId
 * @returns {Promise<Object>}
 */


function evaluateQuota(_ref4) {
  var _ref4$ruleId = _ref4.ruleId,
      ruleId = _ref4$ruleId === void 0 ? isRequired() : _ref4$ruleId,
      props = _objectWithoutProperties(_ref4, ["ruleId"]);

  var path = "/API/quota/".concat(ruleId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/quota.html APIdoc}
 *
 * `DELETE /API/quota/${ruleId}`
 *
 * @function quota.removeQuota
 * @param {Object} obj
 * @param {string} obj.ruleId
 * @returns {Promise<Object>}
 */


function removeQuota(_ref5) {
  var _ref5$ruleId = _ref5.ruleId,
      ruleId = _ref5$ruleId === void 0 ? isRequired() : _ref5$ruleId,
      props = _objectWithoutProperties(_ref5, ["ruleId"]);

  var path = "/API/quota/".concat(ruleId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var quota = {
  listQuota: listQuota,
  createQuota: createQuota,
  getQuota: getQuota,
  evaluateQuota: evaluateQuota,
  removeQuota: removeQuota
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/transfer.html APIdoc}
 *
 * `GET /API/transfer/`
 *
 * @function transfer.listTransfer
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listTransfer() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/transfer/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/transfer.html APIdoc}
 *
 * `GET /API/transfer/${transferId}`
 *
 * @function transfer.getTransfer
 * @param {Object} obj
 * @param {string} obj.transferId
 * @returns {Promise<Object>}
 */


function getTransfer(_ref2) {
  var _ref2$transferId = _ref2.transferId,
      transferId = _ref2$transferId === void 0 ? isRequired() : _ref2$transferId,
      props = _objectWithoutProperties(_ref2, ["transferId"]);

  var path = "/API/transfer/".concat(transferId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/transfer.html APIdoc}
 *
 * `PUT /API/transfer/${transferId}`
 *
 * @function transfer.updateTransferPriority
 * @param {Object} obj
 * @param {string} obj.transferId
 * @returns {Promise<Object>}
 */


function updateTransferPriority(_ref3) {
  var _ref3$transferId = _ref3.transferId,
      transferId = _ref3$transferId === void 0 ? isRequired() : _ref3$transferId,
      props = _objectWithoutProperties(_ref3, ["transferId"]);

  var path = "/API/transfer/".concat(transferId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/transfer.html APIdoc}
 *
 * `GET /API/log/transfer-log/`
 *
 * @function transfer.listTransferLog
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function listTransferLog() {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref4);

  var path = '/API/log/transfer-log/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}

var transfer = {
  listTransfer: listTransfer,
  getTransfer: getTransfer,
  updateTransferPriority: updateTransferPriority,
  listTransferLog: listTransferLog
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/component.html APIdoc}
 *
 * `GET /API/item/${itemId}/shape/${shapeId}/component`
 *
 * @function component.listComponent
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */
// eslint-disable-next-line max-len

function listComponent(_ref) {
  var _ref$itemId = _ref.itemId,
      itemId = _ref$itemId === void 0 ? isRequired() : _ref$itemId,
      _ref$shapeId = _ref.shapeId,
      shapeId = _ref$shapeId === void 0 ? isRequired() : _ref$shapeId,
      props = _objectWithoutProperties(_ref, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/component");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/component.html APIdoc}
 *
 * `GET /API/item/${itemId}/shape/${shapeId}/component/${componentId}`
 *
 * @function component.getComponent
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.componentId
 * @returns {Promise<Object>}
 */


function getComponent(_ref2) {
  var _ref2$itemId = _ref2.itemId,
      itemId = _ref2$itemId === void 0 ? isRequired() : _ref2$itemId,
      _ref2$shapeId = _ref2.shapeId,
      shapeId = _ref2$shapeId === void 0 ? isRequired() : _ref2$shapeId,
      _ref2$componentId = _ref2.componentId,
      componentId = _ref2$componentId === void 0 ? isRequired() : _ref2$componentId,
      props = _objectWithoutProperties(_ref2, ["itemId", "shapeId", "componentId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/component/").concat(componentId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/component.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/shape/${shapeId}/component/${componentId}`
 *
 * @function component.removeComponent
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.componentId
 * @returns {Promise<Object>}
 */


function removeComponent(_ref3) {
  var _ref3$itemId = _ref3.itemId,
      itemId = _ref3$itemId === void 0 ? isRequired() : _ref3$itemId,
      _ref3$shapeId = _ref3.shapeId,
      shapeId = _ref3$shapeId === void 0 ? isRequired() : _ref3$shapeId,
      _ref3$componentId = _ref3.componentId,
      componentId = _ref3$componentId === void 0 ? isRequired() : _ref3$componentId,
      props = _objectWithoutProperties(_ref3, ["itemId", "shapeId", "componentId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/component/").concat(componentId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/component.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/${shapeId}/component`
 *
 * @function component.createComponent
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {Object} obj.queryParams
 * @returns {Promise<Object>}
 */


function createComponent(_ref4) {
  var _ref4$itemId = _ref4.itemId,
      itemId = _ref4$itemId === void 0 ? isRequired() : _ref4$itemId,
      _ref4$shapeId = _ref4.shapeId,
      shapeId = _ref4$shapeId === void 0 ? isRequired() : _ref4$shapeId,
      _ref4$queryParams = _ref4.queryParams,
      queryParams = _ref4$queryParams === void 0 ? isRequired() : _ref4$queryParams,
      props = _objectWithoutProperties(_ref4, ["itemId", "shapeId", "queryParams"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/component");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    queryParams: queryParams
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/component.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/${shapeId}/component/placeholder`
 *
 * @function component.createComponentPlaceholder
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {Object} obj.queryParams
 * @returns {Promise<Object>}
 */


function createComponentPlaceholder(_ref5) {
  var _ref5$itemId = _ref5.itemId,
      itemId = _ref5$itemId === void 0 ? isRequired() : _ref5$itemId,
      _ref5$shapeId = _ref5.shapeId,
      shapeId = _ref5$shapeId === void 0 ? isRequired() : _ref5$shapeId,
      _ref5$queryParams = _ref5.queryParams,
      queryParams = _ref5$queryParams === void 0 ? isRequired() : _ref5$queryParams,
      props = _objectWithoutProperties(_ref5, ["itemId", "shapeId", "queryParams"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/component/placeholder");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    queryParams: queryParams
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/component.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/${shapeId}/component/${componentId}/move/item/${targetItemId}/shape/${targetShapeId}/component/${targetComponentId}`
 *
 * @function component.moveComponent
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.componentId
 * @param {string} obj.targetItemId
 * @param {string} obj.targetShapeId
 * @param {string} obj.targetComponentId
 * @returns {Promise<Object>}
 */


function moveComponent(_ref6) {
  var _ref6$itemId = _ref6.itemId,
      itemId = _ref6$itemId === void 0 ? isRequired() : _ref6$itemId,
      _ref6$shapeId = _ref6.shapeId,
      shapeId = _ref6$shapeId === void 0 ? isRequired() : _ref6$shapeId,
      _ref6$componentId = _ref6.componentId,
      componentId = _ref6$componentId === void 0 ? isRequired() : _ref6$componentId,
      _ref6$targetItemId = _ref6.targetItemId,
      targetItemId = _ref6$targetItemId === void 0 ? isRequired() : _ref6$targetItemId,
      _ref6$targetShapeId = _ref6.targetShapeId,
      targetShapeId = _ref6$targetShapeId === void 0 ? isRequired() : _ref6$targetShapeId,
      _ref6$targetComponent = _ref6.targetComponentId,
      targetComponentId = _ref6$targetComponent === void 0 ? isRequired() : _ref6$targetComponent,
      props = _objectWithoutProperties(_ref6, ["itemId", "shapeId", "componentId", "targetItemId", "targetShapeId", "targetComponentId"]);

  // eslint-disable-next-line max-len
  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/component/").concat(componentId, "/move/item/").concat(targetItemId, "/shape/").concat(targetShapeId, "/component/").concat(targetComponentId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/component.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/${shapeId}/component/${componentId}/move/item/${targetItemId}/shape/${targetShapeId}`
 *
 * @function component.moveComponentToShape
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.componentId
 * @param {string} obj.targetItemId
 * @param {string} obj.targetShapeId
 * @returns {Promise<Object>}
 */


function moveComponentToShape(_ref7) {
  var _ref7$itemId = _ref7.itemId,
      itemId = _ref7$itemId === void 0 ? isRequired() : _ref7$itemId,
      _ref7$shapeId = _ref7.shapeId,
      shapeId = _ref7$shapeId === void 0 ? isRequired() : _ref7$shapeId,
      _ref7$componentId = _ref7.componentId,
      componentId = _ref7$componentId === void 0 ? isRequired() : _ref7$componentId,
      _ref7$targetItemId = _ref7.targetItemId,
      targetItemId = _ref7$targetItemId === void 0 ? isRequired() : _ref7$targetItemId,
      _ref7$targetShapeId = _ref7.targetShapeId,
      targetShapeId = _ref7$targetShapeId === void 0 ? isRequired() : _ref7$targetShapeId,
      props = _objectWithoutProperties(_ref7, ["itemId", "shapeId", "componentId", "targetItemId", "targetShapeId"]);

  // eslint-disable-next-line max-len
  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/component/").concat(componentId, "/move/item/").concat(targetItemId, "/shape/").concat(targetShapeId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/component.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/${shapeId}/component/${componentId}/copy/item/${targetItemId}/shape/${targetShapeId}/component/${targetComponentId}`
 *
 * @function component.copyComponent
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.componentId
 * @param {string} obj.targetItemId
 * @param {string} obj.targetShapeId
 * @param {string} obj.targetComponentId
 * @returns {Promise<Object>}
 */


function copyComponent(_ref8) {
  var _ref8$itemId = _ref8.itemId,
      itemId = _ref8$itemId === void 0 ? isRequired() : _ref8$itemId,
      _ref8$shapeId = _ref8.shapeId,
      shapeId = _ref8$shapeId === void 0 ? isRequired() : _ref8$shapeId,
      _ref8$componentId = _ref8.componentId,
      componentId = _ref8$componentId === void 0 ? isRequired() : _ref8$componentId,
      _ref8$targetItemId = _ref8.targetItemId,
      targetItemId = _ref8$targetItemId === void 0 ? isRequired() : _ref8$targetItemId,
      _ref8$targetShapeId = _ref8.targetShapeId,
      targetShapeId = _ref8$targetShapeId === void 0 ? isRequired() : _ref8$targetShapeId,
      _ref8$targetComponent = _ref8.targetComponentId,
      targetComponentId = _ref8$targetComponent === void 0 ? isRequired() : _ref8$targetComponent,
      props = _objectWithoutProperties(_ref8, ["itemId", "shapeId", "componentId", "targetItemId", "targetShapeId", "targetComponentId"]);

  // eslint-disable-next-line max-len
  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/component/").concat(componentId, "/copy/item/").concat(targetItemId, "/shape/").concat(targetShapeId, "/component/").concat(targetComponentId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/component.html APIdoc}
 *
 * `POST /API/item/${itemId}/shape/${shapeId}/component/${componentId}/copy/item/${targetItemId}/shape/${targetShapeId}`
 *
 * @function component.copyComponentToShape
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.componentId
 * @param {string} obj.targetItemId
 * @param {string} obj.targetShapeId
 * @returns {Promise<Object>}
 */


function copyComponentToShape(_ref9) {
  var _ref9$itemId = _ref9.itemId,
      itemId = _ref9$itemId === void 0 ? isRequired() : _ref9$itemId,
      _ref9$shapeId = _ref9.shapeId,
      shapeId = _ref9$shapeId === void 0 ? isRequired() : _ref9$shapeId,
      _ref9$componentId = _ref9.componentId,
      componentId = _ref9$componentId === void 0 ? isRequired() : _ref9$componentId,
      _ref9$targetItemId = _ref9.targetItemId,
      targetItemId = _ref9$targetItemId === void 0 ? isRequired() : _ref9$targetItemId,
      _ref9$targetShapeId = _ref9.targetShapeId,
      targetShapeId = _ref9$targetShapeId === void 0 ? isRequired() : _ref9$targetShapeId,
      props = _objectWithoutProperties(_ref9, ["itemId", "shapeId", "componentId", "targetItemId", "targetShapeId"]);

  // eslint-disable-next-line max-len
  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/component/").concat(componentId, "/copy/item/").concat(targetItemId, "/shape/").concat(targetShapeId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/component.html APIdoc}
 *
 * `PUT /API/item/${itemId}/shape/${shapeId}/component/${componentId}/file/${fileId}`
 *
 * @function component.addComponentFile
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.componentId
 * @param {string} obj.fileId
 * @returns {Promise<Object>}
 */


function addComponentFile(_ref10) {
  var _ref10$itemId = _ref10.itemId,
      itemId = _ref10$itemId === void 0 ? isRequired() : _ref10$itemId,
      _ref10$shapeId = _ref10.shapeId,
      shapeId = _ref10$shapeId === void 0 ? isRequired() : _ref10$shapeId,
      _ref10$componentId = _ref10.componentId,
      componentId = _ref10$componentId === void 0 ? isRequired() : _ref10$componentId,
      _ref10$fileId = _ref10.fileId,
      fileId = _ref10$fileId === void 0 ? isRequired() : _ref10$fileId,
      props = _objectWithoutProperties(_ref10, ["itemId", "shapeId", "componentId", "fileId"]);

  // eslint-disable-next-line max-len
  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/component/").concat(componentId, "/file/").concat(fileId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/component.html APIdoc}
 *
 * `PUT /API/item/${itemId}/shape/${shapeId}/component/${componentId}/file/${fileId}`
 *
 * @function component.removeComponentFile
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.componentId
 * @param {string} obj.fileId
 * @returns {Promise<Object>}
 */


function removeComponentFile(_ref11) {
  var _ref11$itemId = _ref11.itemId,
      itemId = _ref11$itemId === void 0 ? isRequired() : _ref11$itemId,
      _ref11$shapeId = _ref11.shapeId,
      shapeId = _ref11$shapeId === void 0 ? isRequired() : _ref11$shapeId,
      _ref11$componentId = _ref11.componentId,
      componentId = _ref11$componentId === void 0 ? isRequired() : _ref11$componentId,
      _ref11$fileId = _ref11.fileId,
      fileId = _ref11$fileId === void 0 ? isRequired() : _ref11$fileId,
      props = _objectWithoutProperties(_ref11, ["itemId", "shapeId", "componentId", "fileId"]);

  // eslint-disable-next-line max-len
  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/component/").concat(componentId, "/file/").concat(fileId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}

var component = {
  listComponent: listComponent,
  getComponent: getComponent,
  removeComponent: removeComponent,
  createComponent: createComponent,
  createComponentPlaceholder: createComponentPlaceholder,
  moveComponent: moveComponent,
  moveComponentToShape: moveComponentToShape,
  copyComponent: copyComponent,
  copyComponentToShape: copyComponentToShape,
  addComponentFile: addComponentFile,
  removeComponentFile: removeComponentFile
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/auto-projection.html APIdoc}
 *
 * `GET /API/auto-projection`
 *
 * @function autoprojection.listAutoProjection
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listAutoProjection() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/auto-projection';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/auto-projection.html APIdoc}
 *
 * `GET /API/auto-projection/disable`
 *
 * @function autoprojection.listDisabledAutoProjection
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function listDisabledAutoProjection() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref2);

  var path = '/API/auto-projection/disable';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/auto-projection.html APIdoc}
 *
 * `GET /API/auto-projection/enable`
 *
 * @function autoprojection.listEnabledAutoProjection
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function listEnabledAutoProjection() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref3);

  var path = '/API/auto-projection/enable';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/auto-projection.html APIdoc}
 *
 * `GET /API/auto-projection/${projectionName}`
 *
 * @function autoprojection.getAutoProjection
 * @param {Object} obj
 * @param {string} obj.projectionName
 * @returns {Promise<Object>}
 */


function getAutoProjection(_ref4) {
  var _ref4$projectionName = _ref4.projectionName,
      projectionName = _ref4$projectionName === void 0 ? isRequired() : _ref4$projectionName,
      props = _objectWithoutProperties(_ref4, ["projectionName"]);

  var path = "/API/auto-projection/".concat(projectionName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/auto-projection.html APIdoc}
 *
 * `PUT /API/auto-projection/${projectionName}`
 *
 * @function autoprojection.createAutoProjection
 * @param {Object} obj
 * @param {string} obj.projectionName
 * @param {Object} obj.autoProjectionRuleDocument
 * @returns {Promise<Object>}
 */


function createAutoProjection(_ref5) {
  var _ref5$projectionName = _ref5.projectionName,
      projectionName = _ref5$projectionName === void 0 ? isRequired() : _ref5$projectionName,
      _ref5$autoProjectionR = _ref5.autoProjectionRuleDocument,
      autoProjectionRuleDocument = _ref5$autoProjectionR === void 0 ? isRequired() : _ref5$autoProjectionR,
      props = _objectWithoutProperties(_ref5, ["projectionName", "autoProjectionRuleDocument"]);

  var path = "/API/auto-projection/".concat(projectionName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: autoProjectionRuleDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/auto-projection.html APIdoc}
 *
 * `DELETE /API/auto-projection/${projectionName}`
 *
 * @function autoprojection.removeAutoProjection
 * @param {Object} obj
 * @param {string} obj.projectionName
 * @returns {Promise<Object>}
 */


function removeAutoProjection(_ref6) {
  var _ref6$projectionName = _ref6.projectionName,
      projectionName = _ref6$projectionName === void 0 ? isRequired() : _ref6$projectionName,
      props = _objectWithoutProperties(_ref6, ["projectionName"]);

  var path = "/API/auto-projection/".concat(projectionName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/auto-projection.html APIdoc}
 *
 * `PUT /API/auto-projection/${projectionName}/enable`
 *
 * @function autoprojection.enableAutoProjection
 * @param {Object} obj
 * @param {string} obj.projectionName
 * @returns {Promise<Object>}
 */


function enableAutoProjection(_ref7) {
  var _ref7$projectionName = _ref7.projectionName,
      projectionName = _ref7$projectionName === void 0 ? isRequired() : _ref7$projectionName,
      props = _objectWithoutProperties(_ref7, ["projectionName"]);

  var path = "/API/auto-projection/".concat(projectionName, "/enable");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/auto-projection.html APIdoc}
 *
 * `PUT /API/auto-projection/${projectionName}/disable`
 *
 * @function autoprojection.disableAutoProjection
 * @param {Object} obj
 * @param {string} obj.projectionName
 * @returns {Promise<Object>}
 */


function disableAutoProjection(_ref8) {
  var _ref8$projectionName = _ref8.projectionName,
      projectionName = _ref8$projectionName === void 0 ? isRequired() : _ref8$projectionName,
      props = _objectWithoutProperties(_ref8, ["projectionName"]);

  var path = "/API/auto-projection/".concat(projectionName, "/disable");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}

var autoprojection = {
  listAutoProjection: listAutoProjection,
  listDisabledAutoProjection: listDisabledAutoProjection,
  listEnabledAutoProjection: listEnabledAutoProjection,
  getAutoProjection: getAutoProjection,
  createAutoProjection: createAutoProjection,
  removeAutoProjection: removeAutoProjection,
  enableAutoProjection: enableAutoProjection,
  disableAutoProjection: disableAutoProjection
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/bulky.html APIdoc}
 *
 * `GET /API/item/${itemId}/metadata/bulky`
 *
 * @function bulkymetadata.listItemBulkyMetadata
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */

function listItemBulkyMetadata(_ref) {
  var _ref$itemId = _ref.itemId,
      itemId = _ref$itemId === void 0 ? isRequired() : _ref$itemId,
      props = _objectWithoutProperties(_ref, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/metadata/bulky");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/bulky.html APIdoc}
 *
 * `GET /API/item/${itemId}/shape/${shapeId}/metadata/bulky`
 *
 * @function bulkymetadata.listShapeBulkyMetadata
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function listShapeBulkyMetadata(_ref2) {
  var _ref2$itemId = _ref2.itemId,
      itemId = _ref2$itemId === void 0 ? isRequired() : _ref2$itemId,
      _ref2$shapeId = _ref2.shapeId,
      shapeId = _ref2$shapeId === void 0 ? isRequired() : _ref2$shapeId,
      props = _objectWithoutProperties(_ref2, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/metadata/bulky");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/bulky.html APIdoc}
 *
 * `PUT /API/item/${itemId}/metadata/bulky`
 *
 * @function bulkymetadata.updateAllItemBulkyMetadata
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {Object} obj.bulkyMetadataDocument
 * @returns {Promise<Object>}
 */


function updateAllItemBulkyMetadata(_ref3) {
  var _ref3$itemId = _ref3.itemId,
      itemId = _ref3$itemId === void 0 ? isRequired() : _ref3$itemId,
      _ref3$bulkyMetadataDo = _ref3.bulkyMetadataDocument,
      bulkyMetadataDocument = _ref3$bulkyMetadataDo === void 0 ? isRequired() : _ref3$bulkyMetadataDo,
      props = _objectWithoutProperties(_ref3, ["itemId", "bulkyMetadataDocument"]);

  var path = "/API/item/".concat(itemId, "/metadata/bulky");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: bulkyMetadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/bulky.html APIdoc}
 *
 * `PUT /API/item/${itemId}/shape/${shapeId}/metadata/bulky`
 *
 * @function bulkymetadata.updateAllShapeBulkyMetadata
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {Object} obj.bulkyMetadataDocument
 * @returns {Promise<Object>}
 */


function updateAllShapeBulkyMetadata(_ref4) {
  var _ref4$itemId = _ref4.itemId,
      itemId = _ref4$itemId === void 0 ? isRequired() : _ref4$itemId,
      _ref4$shapeId = _ref4.shapeId,
      shapeId = _ref4$shapeId === void 0 ? isRequired() : _ref4$shapeId,
      _ref4$bulkyMetadataDo = _ref4.bulkyMetadataDocument,
      bulkyMetadataDocument = _ref4$bulkyMetadataDo === void 0 ? isRequired() : _ref4$bulkyMetadataDo,
      props = _objectWithoutProperties(_ref4, ["itemId", "shapeId", "bulkyMetadataDocument"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/metadata/bulky");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: bulkyMetadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/bulky.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/metadata/bulky`
 *
 * @function bulkymetadata.removeAllItemBulkyMetadata
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function removeAllItemBulkyMetadata(_ref5) {
  var _ref5$itemId = _ref5.itemId,
      itemId = _ref5$itemId === void 0 ? isRequired() : _ref5$itemId,
      props = _objectWithoutProperties(_ref5, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/metadata/bulky");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/bulky.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/shape/${shapeId}/metadata/bulky`
 *
 * @function bulkymetadata.removeAllShapeBulkyMetadata
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @returns {Promise<Object>}
 */


function removeAllShapeBulkyMetadata(_ref6) {
  var _ref6$itemId = _ref6.itemId,
      itemId = _ref6$itemId === void 0 ? isRequired() : _ref6$itemId,
      _ref6$shapeId = _ref6.shapeId,
      shapeId = _ref6$shapeId === void 0 ? isRequired() : _ref6$shapeId,
      props = _objectWithoutProperties(_ref6, ["itemId", "shapeId"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/metadata/bulky");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/bulky.html APIdoc}
 *
 * `GET /API/item/${itemId}/metadata/bulky/${key}`
 *
 * @function bulkymetadata.getItemBulkyMetadata
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.key
 * @returns {Promise<Object>}
 */


function getItemBulkyMetadata(_ref7) {
  var _ref7$itemId = _ref7.itemId,
      itemId = _ref7$itemId === void 0 ? isRequired() : _ref7$itemId,
      _ref7$key = _ref7.key,
      key = _ref7$key === void 0 ? isRequired() : _ref7$key,
      props = _objectWithoutProperties(_ref7, ["itemId", "key"]);

  var path = "/API/item/".concat(itemId, "/metadata/bulky/").concat(key);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/bulky.html APIdoc}
 *
 * `GET /API/item/${itemId}/shape/${shapeId}/metadata/bulky/${key}`
 *
 * @function bulkymetadata.getShapeBulkyMetadata
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.key
 * @returns {Promise<Object>}
 */


function getShapeBulkyMetadata(_ref8) {
  var _ref8$itemId = _ref8.itemId,
      itemId = _ref8$itemId === void 0 ? isRequired() : _ref8$itemId,
      _ref8$shapeId = _ref8.shapeId,
      shapeId = _ref8$shapeId === void 0 ? isRequired() : _ref8$shapeId,
      _ref8$key = _ref8.key,
      key = _ref8$key === void 0 ? isRequired() : _ref8$key,
      props = _objectWithoutProperties(_ref8, ["itemId", "shapeId", "key"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/metadata/bulky/").concat(key);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/bulky.html APIdoc}
 *
 * `PUT /API/item/${itemId}/metadata/bulky/${key}`
 *
 * @function bulkymetadata.updateItemBulkyMetadata
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.key
 * @param {string} obj.value
 * @param {Object} obj.headers
 * @returns {Promise<Object>}
 */


function updateItemBulkyMetadata(_ref9) {
  var _ref9$itemId = _ref9.itemId,
      itemId = _ref9$itemId === void 0 ? isRequired() : _ref9$itemId,
      _ref9$key = _ref9.key,
      key = _ref9$key === void 0 ? isRequired() : _ref9$key,
      _ref9$value = _ref9.value,
      value = _ref9$value === void 0 ? isRequired() : _ref9$value,
      _ref9$headers = _ref9.headers,
      propHeaders = _ref9$headers === void 0 ? {} : _ref9$headers,
      props = _objectWithoutProperties(_ref9, ["itemId", "key", "value", "headers"]);

  var path = "/API/item/".concat(itemId, "/metadata/bulky/").concat(key);

  var headers = _objectSpread2({
    contentType: 'text/plain'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: value,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/bulky.html APIdoc}
 *
 * `PUT /API/item/${itemId}/shape/${shapeId}/metadata/bulky/${key}`
 *
 * @function bulkymetadata.updateShapeBulkyMetadata
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.key
 * @param {string} obj.value
 * @returns {Promise<Object>}
 */


function updateShapeBulkyMetadata(_ref10) {
  var _ref10$itemId = _ref10.itemId,
      itemId = _ref10$itemId === void 0 ? isRequired() : _ref10$itemId,
      _ref10$shapeId = _ref10.shapeId,
      shapeId = _ref10$shapeId === void 0 ? isRequired() : _ref10$shapeId,
      _ref10$key = _ref10.key,
      key = _ref10$key === void 0 ? isRequired() : _ref10$key,
      _ref10$value = _ref10.value,
      value = _ref10$value === void 0 ? isRequired() : _ref10$value,
      _ref10$headers = _ref10.headers,
      propHeaders = _ref10$headers === void 0 ? {} : _ref10$headers,
      props = _objectWithoutProperties(_ref10, ["itemId", "shapeId", "key", "value", "headers"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/metadata/bulky/").concat(key);

  var headers = _objectSpread2({
    contentType: 'text/plain'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: value,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/bulky.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/metadata/bulky/${key}`
 *
 * @function bulkymetadata.removeItemBulkyMetadata
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.key
 * @returns {Promise<Object>}
 */


function removeItemBulkyMetadata(_ref11) {
  var _ref11$itemId = _ref11.itemId,
      itemId = _ref11$itemId === void 0 ? isRequired() : _ref11$itemId,
      _ref11$key = _ref11.key,
      key = _ref11$key === void 0 ? isRequired() : _ref11$key,
      props = _objectWithoutProperties(_ref11, ["itemId", "key"]);

  var path = "/API/item/".concat(itemId, "/metadata/bulky/").concat(key);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/bulky.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/shape/${shapeId}/metadata/bulky/${key}`
 *
 * @function bulkymetadata.removeShapeBulkyMetadata
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.shapeId
 * @param {string} obj.key
 * @returns {Promise<Object>}
 */


function removeShapeBulkyMetadata(_ref12) {
  var _ref12$itemId = _ref12.itemId,
      itemId = _ref12$itemId === void 0 ? isRequired() : _ref12$itemId,
      _ref12$shapeId = _ref12.shapeId,
      shapeId = _ref12$shapeId === void 0 ? isRequired() : _ref12$shapeId,
      _ref12$key = _ref12.key,
      key = _ref12$key === void 0 ? isRequired() : _ref12$key,
      props = _objectWithoutProperties(_ref12, ["itemId", "shapeId", "key"]);

  var path = "/API/item/".concat(itemId, "/shape/").concat(shapeId, "/metadata/bulky/").concat(key);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var bulkymetadata = {
  listItemBulkyMetadata: listItemBulkyMetadata,
  listShapeBulkyMetadata: listShapeBulkyMetadata,
  updateAllItemBulkyMetadata: updateAllItemBulkyMetadata,
  updateAllShapeBulkyMetadata: updateAllShapeBulkyMetadata,
  removeAllItemBulkyMetadata: removeAllItemBulkyMetadata,
  removeAllShapeBulkyMetadata: removeAllShapeBulkyMetadata,
  getItemBulkyMetadata: getItemBulkyMetadata,
  getShapeBulkyMetadata: getShapeBulkyMetadata,
  updateItemBulkyMetadata: updateItemBulkyMetadata,
  updateShapeBulkyMetadata: updateShapeBulkyMetadata,
  removeItemBulkyMetadata: removeItemBulkyMetadata,
  removeShapeBulkyMetadata: removeShapeBulkyMetadata
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/deletion-lock.html APIdoc}
 *
 * `GET /API/deletion-lock`
 *
 * @function deletionlock.listDeletionLock
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listDeletionLock() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/deletion-lock';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/deletion-lock.html APIdoc}
 *
 * `GET /API/deletion-lock/${lockId}`
 *
 * @function deletionlock.getDeletionLock
 * @param {Object} obj
 * @param {string} obj.lockId
 * @returns {Promise<Object>}
 */


function getDeletionLock(_ref2) {
  var _ref2$lockId = _ref2.lockId,
      lockId = _ref2$lockId === void 0 ? isRequired() : _ref2$lockId,
      props = _objectWithoutProperties(_ref2, ["lockId"]);

  var path = "/API/deletion-lock/".concat(lockId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/deletion-lock.html APIdoc}
 *
 * `PUT /API/deletion-lock/${lockId`
 *
 * @function deletionlock.updateDeletionLock
 * @param {Object} obj
 * @param {string} obj.lockId
 * @param {Object} obj.deletionLockDocument
 * @returns {Promise<Object>}
 */


function updateDeletionLock(_ref3) {
  var _ref3$lockId = _ref3.lockId,
      lockId = _ref3$lockId === void 0 ? isRequired() : _ref3$lockId,
      _ref3$deletionLockDoc = _ref3.deletionLockDocument,
      deletionLockDocument = _ref3$deletionLockDoc === void 0 ? isRequired() : _ref3$deletionLockDoc,
      props = _objectWithoutProperties(_ref3, ["lockId", "deletionLockDocument"]);

  var path = "/API/deletion-lock/".concat(lockId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: deletionLockDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/deletion-lock.html APIdoc}
 *
 * `DELETE /API/deletion-lock/${lockId}`
 *
 * @function deletionlock.removeDeletionLock
 * @param {Object} obj
 * @param {string} obj.lockId
 * @returns {Promise<Object>}
 */


function removeDeletionLock(_ref4) {
  var _ref4$lockId = _ref4.lockId,
      lockId = _ref4$lockId === void 0 ? isRequired() : _ref4$lockId,
      props = _objectWithoutProperties(_ref4, ["lockId"]);

  var path = "/API/deletion-lock/".concat(lockId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/deletion-lock.html APIdoc}
 *
 * `GET /API/${entity}/${entityId}/deletion-lock/`
 *
 * @function deletionlock.listEntityDeletionLock
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @returns {Promise<Object>}
 */


function listEntityDeletionLock(_ref5) {
  var _ref5$entity = _ref5.entity,
      entity = _ref5$entity === void 0 ? isRequired() : _ref5$entity,
      _ref5$entityId = _ref5.entityId,
      entityId = _ref5$entityId === void 0 ? isRequired() : _ref5$entityId,
      props = _objectWithoutProperties(_ref5, ["entity", "entityId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/deletion-lock/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/deletion-lock.html APIdoc}
 *
 * `POST /API/${entity}/${entityId}/deletion-lock/`
 *
 * @function deletionlock.createEntityDeletionLock
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {Object} obj.deletionLockDocument
 * @returns {Promise<Object>}
 */


function createEntityDeletionLock(_ref6) {
  var _ref6$entity = _ref6.entity,
      entity = _ref6$entity === void 0 ? isRequired() : _ref6$entity,
      _ref6$entityId = _ref6.entityId,
      entityId = _ref6$entityId === void 0 ? isRequired() : _ref6$entityId,
      _ref6$deletionLockDoc = _ref6.deletionLockDocument,
      deletionLockDocument = _ref6$deletionLockDoc === void 0 ? isRequired() : _ref6$deletionLockDoc,
      props = _objectWithoutProperties(_ref6, ["entity", "entityId", "deletionLockDocument"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/deletion-lock/");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: deletionLockDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/deletion-lock.html APIdoc}
 *
 * `GET /API/${entity}/${entityId}/deletion-lock/${lockId}`
 *
 * @function deletionlock.getEntityDeletionLock
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {string} obj.lockId
 * @returns {Promise<Object>}
 */


function getEntityDeletionLock(_ref7) {
  var _ref7$entity = _ref7.entity,
      entity = _ref7$entity === void 0 ? isRequired() : _ref7$entity,
      _ref7$entityId = _ref7.entityId,
      entityId = _ref7$entityId === void 0 ? isRequired() : _ref7$entityId,
      _ref7$lockId = _ref7.lockId,
      lockId = _ref7$lockId === void 0 ? isRequired() : _ref7$lockId,
      props = _objectWithoutProperties(_ref7, ["entity", "entityId", "lockId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/deletion-lock/").concat(lockId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/deletion-lock.html APIdoc}
 *
 * `PUT /API/${entity}/${entityId}/deletion-lock/${lockId}`
 *
 * @function deletionlock.updateEntityDeletionLock
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {string} obj.lockId
 * @param {Object} obj.deletionLockDocument
 * @returns {Promise<Object>}
 */


function updateEntityDeletionLock(_ref8) {
  var _ref8$entity = _ref8.entity,
      entity = _ref8$entity === void 0 ? isRequired() : _ref8$entity,
      _ref8$entityId = _ref8.entityId,
      entityId = _ref8$entityId === void 0 ? isRequired() : _ref8$entityId,
      _ref8$lockId = _ref8.lockId,
      lockId = _ref8$lockId === void 0 ? isRequired() : _ref8$lockId,
      _ref8$deletionLockDoc = _ref8.deletionLockDocument,
      deletionLockDocument = _ref8$deletionLockDoc === void 0 ? isRequired() : _ref8$deletionLockDoc,
      props = _objectWithoutProperties(_ref8, ["entity", "entityId", "lockId", "deletionLockDocument"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/deletion-lock/").concat(lockId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: deletionLockDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/deletion-lock.html APIdoc}
 *
 * `DELETE /API/${entity}/${entityId}/deletion-lock/${lockId}`
 *
 * @function deletionlock.removeEntityDeletionLock
 * @param {Object} obj
 * @param {string} obj.entity
 * @param {string} obj.entityId
 * @param {string} obj.lockId
 * @returns {Promise<Object>}
 */


function removeEntityDeletionLock(_ref9) {
  var _ref9$entity = _ref9.entity,
      entity = _ref9$entity === void 0 ? isRequired() : _ref9$entity,
      _ref9$entityId = _ref9.entityId,
      entityId = _ref9$entityId === void 0 ? isRequired() : _ref9$entityId,
      _ref9$lockId = _ref9.lockId,
      lockId = _ref9$lockId === void 0 ? isRequired() : _ref9$lockId,
      props = _objectWithoutProperties(_ref9, ["entity", "entityId", "lockId"]);

  var path = "/API/".concat(entity, "/").concat(entityId, "/deletion-lock/").concat(lockId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var deletionlock = {
  listDeletionLock: listDeletionLock,
  getDeletionLock: getDeletionLock,
  updateDeletionLock: updateDeletionLock,
  removeDeletionLock: removeDeletionLock,
  listEntityDeletionLock: listEntityDeletionLock,
  createEntityDeletionLock: createEntityDeletionLock,
  getEntityDeletionLock: getEntityDeletionLock,
  updateEntityDeletionLock: updateEntityDeletionLock,
  removeEntityDeletionLock: removeEntityDeletionLock
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/global.html APIdoc}
 *
 * `GET /API/metadata`
 *
 * @function globalmetadata.listGlobalMetadata
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listGlobalMetadata() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/metadata';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/global.html APIdoc}
 *
 * `PUT /API/metadata`
 *
 * @function globalmetadata.updateGlobalMetadata
 * @param {Object} obj
 * @param {Object} obj.metadataDocument
 * @returns {Promise<Object>}
 */


function updateGlobalMetadata(_ref2) {
  var _ref2$metadataDocumen = _ref2.metadataDocument,
      metadataDocument = _ref2$metadataDocumen === void 0 ? isRequired() : _ref2$metadataDocumen,
      props = _objectWithoutProperties(_ref2, ["metadataDocument"]);

  var path = '/API/metadata';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metadataDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/global.html APIdoc}
 *
 * `GET /API/metadata/${uuid}`
 *
 * @function globalmetadata.getGlobalMetadata
 * @param {Object} obj
 * @param {string} obj.uuid
 * @returns {Promise<Object>}
 */


function getGlobalMetadata(_ref3) {
  var _ref3$uuid = _ref3.uuid,
      uuid = _ref3$uuid === void 0 ? isRequired() : _ref3$uuid,
      props = _objectWithoutProperties(_ref3, ["uuid"]);

  var path = "/API/metadata/".concat(uuid);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/global.html APIdoc}
 *
 * `DELETE /API/metadata/${uuid}`
 *
 * @function globalmetadata.removeGlobalMetadata
 * @param {Object} obj
 * @param {string} obj.uuid
 * @returns {Promise<Object>}
 */


function removeGlobalMetadata() {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref4$uuid = _ref4.uuid,
      uuid = _ref4$uuid === void 0 ? isRequired() : _ref4$uuid,
      props = _objectWithoutProperties(_ref4, ["uuid"]);

  var path = "/API/metadata/".concat(uuid);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var globalmetadata = {
  listGlobalMetadata: listGlobalMetadata,
  updateGlobalMetadata: updateGlobalMetadata,
  getGlobalMetadata: getGlobalMetadata,
  removeGlobalMetadata: removeGlobalMetadata
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/dataset-ref.html APIdoc}
 *
 * `GET /API/metadata/dataset`
 *
 * @function metadatadataset.listMetadataDataset
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listMetadataDataset() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/metadata/dataset';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/dataset-ref.html APIdoc}
 *
 * `GET /API/metadata/dataset/${datasetId}`
 *
 * @function metadatadataset.getMetadataDataset
 * @param {Object} obj
 * @param {string} obj.datasetId
 * @returns {Promise<Object>}
 */


function getMetadataDataset(_ref2) {
  var _ref2$datasetId = _ref2.datasetId,
      datasetId = _ref2$datasetId === void 0 ? isRequired() : _ref2$datasetId,
      props = _objectWithoutProperties(_ref2, ["datasetId"]);

  var path = "/API/metadata/dataset/".concat(datasetId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/dataset-ref.html APIdoc}
 *
 * `PUT /API/metadata/dataset/${datasetId}`
 *
 * @function metadatadataset.updateMetadataDataset
 * @param {Object} obj
 * @param {string} obj.datasetId
 * @param {Object} obj.body
 * @returns {Promise<Object>}
 */


function updateMetadataDataset(_ref3) {
  var _ref3$datasetId = _ref3.datasetId,
      datasetId = _ref3$datasetId === void 0 ? isRequired() : _ref3$datasetId,
      _ref3$body = _ref3.body,
      body = _ref3$body === void 0 ? isRequired() : _ref3$body,
      props = _objectWithoutProperties(_ref3, ["datasetId", "body"]);

  var path = "/API/metadata/dataset/".concat(datasetId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: body
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/dataset-ref.html APIdoc}
 *
 * `DELETE /API/metadata/dataset/${datasetId}`
 *
 * @function metadatadataset.removeMetadataDataset
 * @param {Object} obj
 * @param {string} obj.datasetId
 * @returns {Promise<Object>}
 */


function removeMetadataDataset(_ref4) {
  var _ref4$datasetId = _ref4.datasetId,
      datasetId = _ref4$datasetId === void 0 ? isRequired() : _ref4$datasetId,
      props = _objectWithoutProperties(_ref4, ["datasetId"]);

  var path = "/API/metadata/dataset/".concat(datasetId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var metadatadataset = {
  listMetadataDataset: listMetadataDataset,
  getMetadataDataset: getMetadataDataset,
  updateMetadataDataset: updateMetadataDataset,
  removeMetadataDataset: removeMetadataDataset
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/migration.html APIdoc}
 *
 * `GET /API/metadata/migration`
 *
 * @function metadatamigration.listMetadataMigration
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listMetadataMigration() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/metadata/migration';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/migration.html APIdoc}
 *
 * `GET /API/metadata/migration/${migrationId}`
 *
 * @function metadatamigration.getMetadataMigration
 * @param {Object} obj
 * @param {string} obj.migrationId
 * @returns {Promise<Object>}
 */


function getMetadataMigration(_ref2) {
  var _ref2$migrationId = _ref2.migrationId,
      migrationId = _ref2$migrationId === void 0 ? isRequired() : _ref2$migrationId,
      props = _objectWithoutProperties(_ref2, ["migrationId"]);

  var path = "/API/metadata/migration/".concat(migrationId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/migration.html APIdoc}
 *
 * `POST /API/metadata/migration`
 *
 * @function metadatamigration.createMetadataMigration
 * @param {Object} obj
 * @param {Object} obj.metadataSchemaMigrationDocument
 * @returns {Promise<Object>}
 */


function createMetadataMigration(_ref3) {
  var _ref3$metadataSchemaM = _ref3.metadataSchemaMigrationDocument,
      metadataSchemaMigrationDocument = _ref3$metadataSchemaM === void 0 ? isRequired() : _ref3$metadataSchemaM,
      props = _objectWithoutProperties(_ref3, ["metadataSchemaMigrationDocument"]);

  var path = '/API/metadata/migration';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: metadataSchemaMigrationDocument
  }, props));
}

var metadatamigration = {
  listMetadataMigration: listMetadataMigration,
  getMetadataMigration: getMetadataMigration,
  createMetadataMigration: createMetadataMigration
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/schema.html APIdoc}
 *
 * `GET /API/metadata-schema`
 *
 * @function metadataschema.getMetadataSchema
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function getMetadataSchema() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/metadata-schema';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/schema.html APIdoc}
 *
 * `PUT /API/metadata-schema`
 *
 * @function metadataschema.updateMetadataSchema
 * @param {Object} obj
 * @param {Object} obj.metadataSchemaDocument
 * @returns {Promise<Object>}
 */


function updateMetadataSchema(_ref2) {
  var _ref2$metadataSchemaD = _ref2.metadataSchemaDocument,
      metadataSchemaDocument = _ref2$metadataSchemaD === void 0 ? isRequired() : _ref2$metadataSchemaD,
      props = _objectWithoutProperties(_ref2, ["metadataSchemaDocument"]);

  var path = '/API/metadata-schema';
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metadataSchemaDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/schema.html APIdoc}
 *
 * `DELETE /API/metadata-schema`
 *
 * @function metadataschema.removeMetadataSchema
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function removeMetadataSchema() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref3);

  var path = '/API/metadata-schema';
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/schema.html APIdoc}
 *
 * `GET /API/metadata-schema${groupName}`
 *
 * @function metadataschema.getMetadataSchemaGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function getMetadataSchemaGroup() {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref4$groupName = _ref4.groupName,
      groupName = _ref4$groupName === void 0 ? isRequired() : _ref4$groupName,
      props = _objectWithoutProperties(_ref4, ["groupName"]);

  var path = "/API/metadata-schema".concat(groupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/schema.html APIdoc}
 *
 * `PUT /API/metadata-schema${groupName}`
 *
 * @function metadataschema.updateMetadataSchemaGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @param {Object} obj.metadataSchemaGroupDocument
 * @returns {Promise<Object>}
 */


function updateMetadataSchemaGroup() {
  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref5$groupName = _ref5.groupName,
      groupName = _ref5$groupName === void 0 ? isRequired() : _ref5$groupName,
      _ref5$metadataSchemaG = _ref5.metadataSchemaGroupDocument,
      metadataSchemaGroupDocument = _ref5$metadataSchemaG === void 0 ? isRequired() : _ref5$metadataSchemaG,
      props = _objectWithoutProperties(_ref5, ["groupName", "metadataSchemaGroupDocument"]);

  var path = "/API/metadata-schema".concat(groupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: metadataSchemaGroupDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/schema.html APIdoc}
 *
 * `DELETE /API/metadata-schema${groupName}`
 *
 * @function metadataschema.removeMetadataSchemaGroup
 * @param {Object} obj
 * @param {string} obj.groupName
 * @returns {Promise<Object>}
 */


function removeMetadataSchemaGroup() {
  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref6$groupName = _ref6.groupName,
      groupName = _ref6$groupName === void 0 ? isRequired() : _ref6$groupName,
      props = _objectWithoutProperties(_ref6, ["groupName"]);

  var path = "/API/metadata-schema".concat(groupName);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/schema.html APIdoc}
 *
 * `GET /API/metadata-field/terse-schema`
 *
 * @function metadataschema.getTerseMetadataSchema
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getTerseMetadataSchema() {
  var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref7);

  var path = '/API/metadata-field/terse-schema';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}

var metadataschema = {
  getMetadataSchema: getMetadataSchema,
  updateMetadataSchema: updateMetadataSchema,
  removeMetadataSchema: removeMetadataSchema,
  getMetadataSchemaGroup: getMetadataSchemaGroup,
  updateMetadataSchemaGroup: updateMetadataSchemaGroup,
  removeMetadataSchemaGroup: removeMetadataSchemaGroup,
  getTerseMetadataSchema: getTerseMetadataSchema
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `POST /API/collection/project/`
 *
 * @function project.createProject
 * @param {Object} obj
 * @param {Object} obj.projectDocument
 * @returns {Promise<Object>}
 */

function createProject(_ref) {
  var _ref$projectDocument = _ref.projectDocument,
      projectDocument = _ref$projectDocument === void 0 ? isRequired() : _ref$projectDocument,
      props = _objectWithoutProperties(_ref, ["projectDocument"]);

  var path = '/API/collection/project/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: projectDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `POST /API/collection/${collectionId}/version`
 *
 * @function project.createProjectVersion
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {Object} obj.projectVersionDocument
 * @returns {Promise<Object>}
 */


function createProjectVersion(_ref2) {
  var _ref2$collectionId = _ref2.collectionId,
      collectionId = _ref2$collectionId === void 0 ? isRequired() : _ref2$collectionId,
      _ref2$projectVersionD = _ref2.projectVersionDocument,
      projectVersionDocument = _ref2$projectVersionD === void 0 ? isRequired() : _ref2$projectVersionD,
      props = _objectWithoutProperties(_ref2, ["collectionId", "projectVersionDocument"]);

  var path = "/API/collection/".concat(collectionId, "/version");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: projectVersionDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `GET /API/collection/${collectionId}/definition`
 *
 * @function project.listProjectDefinition
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @returns {Promise<Object>}
 */


function listProjectDefinition(_ref3) {
  var _ref3$collectionId = _ref3.collectionId,
      collectionId = _ref3$collectionId === void 0 ? isRequired() : _ref3$collectionId,
      _ref3$headers = _ref3.headers,
      propsHeaders = _ref3$headers === void 0 ? {} : _ref3$headers,
      props = _objectWithoutProperties(_ref3, ["collectionId", "headers"]);

  var path = "/API/collection/".concat(collectionId, "/definition");

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propsHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `PUT /API/collection/${collectionId}/definition/${format}`
 *
 * @function project.updateProjectDefinition
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {string} obj.format
 * @param {string} obj.body
 * @returns {Promise<Object>}
 */


function updateProjectDefinition(_ref4) {
  var _ref4$collectionId = _ref4.collectionId,
      collectionId = _ref4$collectionId === void 0 ? isRequired() : _ref4$collectionId,
      _ref4$format = _ref4.format,
      format = _ref4$format === void 0 ? isRequired() : _ref4$format,
      _ref4$body = _ref4.body,
      body = _ref4$body === void 0 ? isRequired() : _ref4$body,
      _ref4$headers = _ref4.headers,
      propsHeaders = _ref4$headers === void 0 ? {} : _ref4$headers,
      props = _objectWithoutProperties(_ref4, ["collectionId", "format", "body", "headers"]);

  var path = "/API/collection/".concat(collectionId, "/definition/").concat(format);

  var headers = _objectSpread2({
    contentType: 'application/octet-stream'
  }, propsHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: body,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `GET /API/collection/${collectionId}/definition/${format}`
 *
 * @function project.getProjectDefinition
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {string} obj.format
 * @returns {Promise<Object>}
 */


function getProjectDefinition(_ref5) {
  var _ref5$collectionId = _ref5.collectionId,
      collectionId = _ref5$collectionId === void 0 ? isRequired() : _ref5$collectionId,
      _ref5$format = _ref5.format,
      format = _ref5$format === void 0 ? isRequired() : _ref5$format,
      _ref5$headers = _ref5.headers,
      propsHeaders = _ref5$headers === void 0 ? {} : _ref5$headers,
      props = _objectWithoutProperties(_ref5, ["collectionId", "format", "headers"]);

  var path = "/API/collection/".concat(collectionId, "/definition/").concat(format);

  var headers = _objectSpread2({
    accept: 'application/octet-stream'
  }, propsHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `DELETE /API/collection/${collectionId}/definition/${format}`
 *
 * @function project.removeProjectDefinition
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {string} obj.format
 * @returns {Promise<Object>}
 */


function removeProjectDefinition(_ref6) {
  var _ref6$collectionId = _ref6.collectionId,
      collectionId = _ref6$collectionId === void 0 ? isRequired() : _ref6$collectionId,
      _ref6$format = _ref6.format,
      format = _ref6$format === void 0 ? isRequired() : _ref6$format,
      props = _objectWithoutProperties(_ref6, ["collectionId", "format"]);

  var path = "/API/collection/".concat(collectionId, "/definition/").concat(format);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `GET /API/collection/${collectionId}/definition/${format}/asset`
 *
 * @function project.getProjectDefinitionAsset
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {string} obj.format
 * @returns {Promise<Object>}
 */


function getProjectDefinitionAsset(_ref7) {
  var _ref7$collectionId = _ref7.collectionId,
      collectionId = _ref7$collectionId === void 0 ? isRequired() : _ref7$collectionId,
      _ref7$format = _ref7.format,
      format = _ref7$format === void 0 ? isRequired() : _ref7$format,
      props = _objectWithoutProperties(_ref7, ["collectionId", "format"]);

  var path = "/API/collection/".concat(collectionId, "/definition/").concat(format, "/asset");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `PUT /API/collection/${collectionId}/definition/${format}/asset`
 *
 * @function project.updateProjectDefinitionAsset
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {string} obj.format
 * @param {Object} obj.essenceMappingsDocument
 * @returns {Promise<Object>}
 */


function updateProjectDefinitionAsset(_ref8) {
  var _ref8$collectionId = _ref8.collectionId,
      collectionId = _ref8$collectionId === void 0 ? isRequired() : _ref8$collectionId,
      _ref8$format = _ref8.format,
      format = _ref8$format === void 0 ? isRequired() : _ref8$format,
      _ref8$essenceMappings = _ref8.essenceMappingsDocument,
      essenceMappingsDocument = _ref8$essenceMappings === void 0 ? isRequired() : _ref8$essenceMappings,
      props = _objectWithoutProperties(_ref8, ["collectionId", "format", "essenceMappingsDocument"]);

  var path = "/API/collection/".concat(collectionId, "/definition/").concat(format, "/asset");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: essenceMappingsDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `DELETE /API/collection/${collectionId}/definition/${format}/asset`
 *
 * @function project.removeProjectDefinitionAsset
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {string} obj.format
 * @returns {Promise<Object>}
 */


function removeProjectDefinitionAsset(_ref9) {
  var _ref9$collectionId = _ref9.collectionId,
      collectionId = _ref9$collectionId === void 0 ? isRequired() : _ref9$collectionId,
      _ref9$format = _ref9.format,
      format = _ref9$format === void 0 ? isRequired() : _ref9$format,
      props = _objectWithoutProperties(_ref9, ["collectionId", "format"]);

  var path = "/API/collection/".concat(collectionId, "/definition/").concat(format, "/asset");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `GET /API/collection/${collectionId}/definition/${format}/extradata`
 *
 * @function project.getProjectDefinitionExtraData
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {string} obj.format
 * @returns {Promise<Object>}
 */


function getProjectDefinitionExtraData(_ref10) {
  var _ref10$collectionId = _ref10.collectionId,
      collectionId = _ref10$collectionId === void 0 ? isRequired() : _ref10$collectionId,
      _ref10$format = _ref10.format,
      format = _ref10$format === void 0 ? isRequired() : _ref10$format,
      _ref10$headers = _ref10.headers,
      propsHeaders = _ref10$headers === void 0 ? {} : _ref10$headers,
      props = _objectWithoutProperties(_ref10, ["collectionId", "format", "headers"]);

  var path = "/API/collection/".concat(collectionId, "/definition/").concat(format, "/extradata");

  var headers = _objectSpread2({
    accept: 'application/octet-stream'
  }, propsHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `PUT /API/collection/${collectionId}/definition/${format}/extradata`
 *
 * @function project.updateProjectDefinitionExtraData
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {string} obj.format
 * @param {Object} obj.body
 * @returns {Promise<Object>}
 */


function updateProjectDefinitionExtraData(_ref11) {
  var _ref11$collectionId = _ref11.collectionId,
      collectionId = _ref11$collectionId === void 0 ? isRequired() : _ref11$collectionId,
      _ref11$format = _ref11.format,
      format = _ref11$format === void 0 ? isRequired() : _ref11$format,
      _ref11$body = _ref11.body,
      body = _ref11$body === void 0 ? isRequired() : _ref11$body,
      _ref11$headers = _ref11.headers,
      propsHeaders = _ref11$headers === void 0 ? {} : _ref11$headers,
      props = _objectWithoutProperties(_ref11, ["collectionId", "format", "body", "headers"]);

  var path = "/API/collection/".concat(collectionId, "/definition/").concat(format, "/extradata");

  var headers = _objectSpread2({
    contentType: 'application/octet-stream'
  }, propsHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    headers: headers,
    body: body
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `DELETE /API/collection/${collectionId}/definition/${format}/extradata`
 *
 * @function project.removeProjectDefinitionExtraData
 * @param {Object} obj
 * @param {string} obj.collectionId
 * @param {string} obj.format
 * @returns {Promise<Object>}
 */


function removeProjectDefinitionExtraData(_ref12) {
  var _ref12$collectionId = _ref12.collectionId,
      collectionId = _ref12$collectionId === void 0 ? isRequired() : _ref12$collectionId,
      _ref12$format = _ref12.format,
      format = _ref12$format === void 0 ? isRequired() : _ref12$format,
      props = _objectWithoutProperties(_ref12, ["collectionId", "format"]);

  var path = "/API/collection/".concat(collectionId, "/definition/").concat(format, "/extradata");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `POST /API/collection/project/inspect`
 *
 * @function project.inspectProjectFile
 * @param {Object} obj
 * @param {Object} obj.essenceMappingsDocument
 * @param {Object} obj.queryParams
 * @returns {Promise<Object>}
 */


function inspectProjectFile(_ref13) {
  var _ref13$queryParams = _ref13.queryParams,
      queryParams = _ref13$queryParams === void 0 ? isRequired() : _ref13$queryParams,
      essenceMappingsDocument = _ref13.essenceMappingsDocument,
      props = _objectWithoutProperties(_ref13, ["queryParams", "essenceMappingsDocument"]);

  var path = '/API/collection/project/inspect';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: essenceMappingsDocument,
    queryParams: queryParams
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `POST /API/import/project`
 *
 * @function project.importProject
 * @param {Object} obj
 * @param {Object} obj.essenceMappingsDocument
 * @param {Object} obj.queryParams
 * @returns {Promise<Object>}
 */


function importProject(_ref14) {
  var _ref14$queryParams = _ref14.queryParams,
      queryParams = _ref14$queryParams === void 0 ? isRequired() : _ref14$queryParams,
      essenceMappingsDocument = _ref14.essenceMappingsDocument,
      props = _objectWithoutProperties(_ref14, ["queryParams", "essenceMappingsDocument"]);

  var path = '/API/import/project';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: essenceMappingsDocument,
    queryParams: queryParams
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `POST /API/import/project/sequence`
 *
 * @function project.importProjectSequence
 * @param {Object} obj
 * @param {Object} obj.essenceMappingsDocument
 * @param {Object} obj.queryParams
 * @returns {Promise<Object>}
 */


function importProjectSequence(_ref15) {
  var _ref15$queryParams = _ref15.queryParams,
      queryParams = _ref15$queryParams === void 0 ? isRequired() : _ref15$queryParams,
      essenceMappingsDocument = _ref15.essenceMappingsDocument,
      props = _objectWithoutProperties(_ref15, ["queryParams", "essenceMappingsDocument"]);

  var path = '/API/import/project/sequence';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: essenceMappingsDocument,
    queryParams: queryParams
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/project.html APIdoc}
 *
 * `POST /API/collection/${collectionId}/version/export`
 *
 * @function project.exportProjectVersionSequence
 * @param {Object} obj
 * @param {sttring} obj.collectionId
 * @param {Object} obj.exportRequestDocument
 * @param {Object} obj.queryParams
 * @returns {Promise<Object>}
 */


function exportProjectVersionSequence(_ref16) {
  var _ref16$collectionId = _ref16.collectionId,
      collectionId = _ref16$collectionId === void 0 ? isRequired() : _ref16$collectionId,
      _ref16$queryParams = _ref16.queryParams,
      queryParams = _ref16$queryParams === void 0 ? isRequired() : _ref16$queryParams,
      exportRequestDocument = _ref16.exportRequestDocument,
      props = _objectWithoutProperties(_ref16, ["collectionId", "queryParams", "exportRequestDocument"]);

  var path = "/API/collection/".concat(collectionId, "/version/export");
  var method = 'GET';

  if (exportRequestDocument) {
    method = 'POST';
  }

  return vFetch(_objectSpread2({
    path: path,
    method: method,
    body: exportRequestDocument,
    queryParams: queryParams
  }, props));
}

var project = {
  createProject: createProject,
  createProjectVersion: createProjectVersion,
  listProjectDefinition: listProjectDefinition,
  updateProjectDefinition: updateProjectDefinition,
  getProjectDefinition: getProjectDefinition,
  removeProjectDefinition: removeProjectDefinition,
  getProjectDefinitionAsset: getProjectDefinitionAsset,
  updateProjectDefinitionAsset: updateProjectDefinitionAsset,
  removeProjectDefinitionAsset: removeProjectDefinitionAsset,
  getProjectDefinitionExtraData: getProjectDefinitionExtraData,
  updateProjectDefinitionExtraData: updateProjectDefinitionExtraData,
  removeProjectDefinitionExtraData: removeProjectDefinitionExtraData,
  inspectProjectFile: inspectProjectFile,
  importProject: importProject,
  importProjectSequence: importProjectSequence,
  exportProjectVersionSequence: exportProjectVersionSequence
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/sequence.html APIdoc}
 *
 * `PUT /API/item/${itemId}/sequence/${format}`
 *
 * @function sequence.updateItemSequence
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.format
 * @param {Object} obj.sequenceDefinition
 * @returns {Promise<Object>}
 */

function updateItemSequence(_ref) {
  var _ref$itemId = _ref.itemId,
      itemId = _ref$itemId === void 0 ? isRequired() : _ref$itemId,
      _ref$format = _ref.format,
      format = _ref$format === void 0 ? isRequired() : _ref$format,
      sequenceDefinition = _ref.sequenceDefinition,
      _ref$headers = _ref.headers,
      propsHeaders = _ref$headers === void 0 ? {} : _ref$headers,
      props = _objectWithoutProperties(_ref, ["itemId", "format", "sequenceDefinition", "headers"]);

  var path = "/API/item/".concat(itemId, "/sequence/").concat(format);

  var headers = _objectSpread2({
    contentType: 'application/octet-stream'
  }, propsHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: sequenceDefinition,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/sequence.html APIdoc}
 *
 * `GET /API/item/${itemId}/sequence`
 *
 * @function sequence.listItemSequence
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function listItemSequence(_ref2) {
  var _ref2$itemId = _ref2.itemId,
      itemId = _ref2$itemId === void 0 ? isRequired() : _ref2$itemId,
      props = _objectWithoutProperties(_ref2, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/sequence");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/sequence.html APIdoc}
 *
 * `GET /API/item/${itemId}/sequence/${format}`
 *
 * @function sequence.getItemSequence
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.format
 * @returns {Promise<Object>}
 */


function getItemSequence(_ref3) {
  var _ref3$itemId = _ref3.itemId,
      itemId = _ref3$itemId === void 0 ? isRequired() : _ref3$itemId,
      _ref3$format = _ref3.format,
      format = _ref3$format === void 0 ? isRequired() : _ref3$format,
      _ref3$headers = _ref3.headers,
      propsHeaders = _ref3$headers === void 0 ? {} : _ref3$headers,
      props = _objectWithoutProperties(_ref3, ["itemId", "format", "headers"]);

  var path = "/API/item/".concat(itemId, "/sequence/").concat(format);

  var headers = _objectSpread2({
    accept: '*/*'
  }, propsHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/sequence.html APIdoc}
 *
 * `POST /API/item/${itemId}/sequence/conform-metadata`
 *
 * @function sequence.conformItemSequence
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function conformItemSequence(_ref4) {
  var _ref4$itemId = _ref4.itemId,
      itemId = _ref4$itemId === void 0 ? isRequired() : _ref4$itemId,
      props = _objectWithoutProperties(_ref4, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/sequence/conform-metadata");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/sequence.html APIdoc}
 *
 * `POST /API/item/${itemId}/sequence/render`
 *
 * @function sequence.renderItemSequence
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function renderItemSequence(_ref5) {
  var _ref5$itemId = _ref5.itemId,
      itemId = _ref5$itemId === void 0 ? isRequired() : _ref5$itemId,
      props = _objectWithoutProperties(_ref5, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/sequence/render");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/sequence.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/sequence/${format}`
 *
 * @function sequence.removeItemSequence
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.format
 * @returns {Promise<Object>}
 */


function removeItemSequence(_ref6) {
  var _ref6$itemId = _ref6.itemId,
      itemId = _ref6$itemId === void 0 ? isRequired() : _ref6$itemId,
      _ref6$format = _ref6.format,
      format = _ref6$format === void 0 ? isRequired() : _ref6$format,
      props = _objectWithoutProperties(_ref6, ["itemId", "format"]);

  var path = "/API/item/".concat(itemId, "/sequence/").concat(format);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/sequence.html APIdoc}
 *
 * `POST /API/sequence/render`
 *
 * @function sequence.renderSequence
 * @param {Object} obj
 * @param {Object} obj.sequenceRenderRequestDocument
 * @returns {Promise<Object>}
 */


function renderSequence(_ref7) {
  var _ref7$sequenceRenderR = _ref7.sequenceRenderRequestDocument,
      sequenceRenderRequestDocument = _ref7$sequenceRenderR === void 0 ? isRequired() : _ref7$sequenceRenderR,
      props = _objectWithoutProperties(_ref7, ["sequenceRenderRequestDocument"]);

  var path = '/API/sequence/render';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: sequenceRenderRequestDocument
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/sequence.html APIdoc}
 *
 * `POST /API/sequence/export`
 *
 * @function sequence.exportSequence
 * @param {Object} obj
 * @param {Object} obj.exportRequestDocument
 * @param {Object} obj.queryParams
 * @returns {Promise<Object>}
 */


function exportSequence(_ref8) {
  var _ref8$queryParams = _ref8.queryParams,
      queryParams = _ref8$queryParams === void 0 ? isRequired() : _ref8$queryParams,
      exportRequestDocument = _ref8.exportRequestDocument,
      props = _objectWithoutProperties(_ref8, ["queryParams", "exportRequestDocument"]);

  var path = '/API/sequence/export';
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST',
    body: exportRequestDocument,
    queryParams: queryParams
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/sequence.html APIdoc}
 *
 * `GET/POST /API/item/${itemId}/sequence/export`
 *
 * @function sequence.exportItemSequence
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {Object} obj.queryParams
 * @param {Object} obj.exportRequestDocument
 * @returns {Promise<Object>}
 */


function exportItemSequence(_ref9) {
  var _ref9$itemId = _ref9.itemId,
      itemId = _ref9$itemId === void 0 ? isRequired() : _ref9$itemId,
      _ref9$queryParams = _ref9.queryParams,
      queryParams = _ref9$queryParams === void 0 ? isRequired() : _ref9$queryParams,
      exportRequestDocument = _ref9.exportRequestDocument,
      props = _objectWithoutProperties(_ref9, ["itemId", "queryParams", "exportRequestDocument"]);

  var path = "/API/item/".concat(itemId, "/sequence/export");
  var method = 'GET';

  if (exportRequestDocument) {
    method = 'POST';
  }

  return vFetch(_objectSpread2({
    path: path,
    method: method,
    body: exportRequestDocument,
    queryParams: queryParams
  }, props));
}

var sequence = {
  updateItemSequence: updateItemSequence,
  listItemSequence: listItemSequence,
  getItemSequence: getItemSequence,
  conformItemSequence: conformItemSequence,
  renderItemSequence: renderItemSequence,
  removeItemSequence: removeItemSequence,
  renderSequence: renderSequence,
  exportSequence: exportSequence,
  exportItemSequence: exportItemSequence
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/scheduled-requests.html APIdoc}
 *
 * `GET /API/scheduled-request/`
 *
 * @function scheduledrequest.listScheduledRequest
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listScheduledRequest(_ref) {
  var props = _extends({}, _ref);

  var path = '/API/scheduled-request/';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/scheduled-requests.html APIdoc}
 *
 * `GET /API/scheduled-request/${requestId}`
 *
 * @function scheduledrequest.getScheduledRequest
 * @param {Object} obj
 * @param {string} obj.requestId
 * @returns {Promise<Object>}
 */


function getScheduledRequest(_ref2) {
  var _ref2$requestId = _ref2.requestId,
      requestId = _ref2$requestId === void 0 ? isRequired() : _ref2$requestId,
      props = _objectWithoutProperties(_ref2, ["requestId"]);

  var path = "/API/scheduled-request/".concat(requestId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/scheduled-requests.html APIdoc}
 *
 * `GET /API/scheduled-request/${requestId}/response`
 *
 * @function scheduledrequest.getScheduledRequestResponse
 * @param {Object} obj
 * @param {string} obj.requestId
 * @returns {Promise<Object>}
 */


function getScheduledRequestResponse(_ref3) {
  var _ref3$requestId = _ref3.requestId,
      requestId = _ref3$requestId === void 0 ? isRequired() : _ref3$requestId,
      _ref3$headers = _ref3.headers,
      propsHeaders = _ref3$headers === void 0 ? {} : _ref3$headers,
      props = _objectWithoutProperties(_ref3, ["requestId", "headers"]);

  var path = "/API/scheduled-request/".concat(requestId, "/response");

  var headers = _objectSpread2({
    accept: '*/*'
  }, propsHeaders);

  return vFetch(_objectSpread2({
    path: path,
    headers: headers,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/scheduled-requests.html APIdoc}
 *
 * `DELETE /API/scheduled-request/${requestId}`
 *
 * @function scheduledrequest.removeScheduledRequest
 * @param {Object} obj
 * @param {string} obj.requestId
 * @returns {Promise<Object>}
 */


function removeScheduledRequest(_ref4) {
  var _ref4$requestId = _ref4.requestId,
      requestId = _ref4$requestId === void 0 ? isRequired() : _ref4$requestId,
      props = _objectWithoutProperties(_ref4, ["requestId"]);

  var path = "/API/scheduled-request/".concat(requestId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/scheduled-requests.html APIdoc}
 *
 * `DELETE /API/scheduled-request`
 *
 * @function scheduledrequest.removeAllScheduledRequest
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function removeAllScheduledRequest(_ref5) {
  var props = _extends({}, _ref5);

  var path = '/API/scheduled-request';
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var scheduledrequest = {
  listScheduledRequest: listScheduledRequest,
  getScheduledRequest: getScheduledRequest,
  getScheduledRequestResponse: getScheduledRequestResponse,
  removeScheduledRequest: removeScheduledRequest,
  removeAllScheduledRequest: removeAllScheduledRequest
};

/**
 * `GET /APInoauth/stitch`
 *
 * @function stitch.getStitch
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function getStitch() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$headers = _ref.headers,
      propHeaders = _ref$headers === void 0 ? {} : _ref$headers,
      props = _objectWithoutProperties(_ref, ["headers"]);

  var headers = _objectSpread2({
    accept: 'image/png'
  }, propHeaders);

  var path = '/APInoauth/stitch';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}

var stitch = {
  getStitch: getStitch
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/subtitle.html APIdoc}
 *
 * `GET /API/item/${itemId}/metadata/export/scc`
 *
 * @function subtitle.getSubtitleSCC
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */

function getSubtitleSCC(_ref) {
  var _ref$itemId = _ref.itemId,
      itemId = _ref$itemId === void 0 ? isRequired() : _ref$itemId,
      _ref$headers = _ref.headers,
      propHeaders = _ref$headers === void 0 ? {} : _ref$headers,
      props = _objectWithoutProperties(_ref, ["itemId", "headers"]);

  var path = "/API/item/".concat(itemId, "/metadata/export/scc");

  var headers = _objectSpread2({
    accept: 'text/plain '
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/metadata/subtitle.html APIdoc}
 *
 * `GET /API/item/${itemId}/metadata/export/ttml`
 *
 * @function subtitle.getSubtitleTTML
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function getSubtitleTTML(_ref2) {
  var _ref2$itemId = _ref2.itemId,
      itemId = _ref2$itemId === void 0 ? isRequired() : _ref2$itemId,
      _ref2$headers = _ref2.headers,
      propHeaders = _ref2$headers === void 0 ? {} : _ref2$headers,
      props = _objectWithoutProperties(_ref2, ["itemId", "headers"]);

  var path = "/API/item/".concat(itemId, "/metadata/export/ttml");

  var headers = _objectSpread2({
    accept: 'application/xml'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}

var subtitle = {
  getSubtitleSCC: getSubtitleSCC,
  getSubtitleTTML: getSubtitleTTML
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `POST /API/item/${itemId}/thumbnail`
 *
 * @function thumbnail.createThumbnail
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */

function createThumbnail$2(_ref) {
  var _ref$itemId = _ref.itemId,
      itemId = _ref$itemId === void 0 ? isRequired() : _ref$itemId,
      props = _objectWithoutProperties(_ref, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/thumbnail");
  return vFetch(_objectSpread2({
    path: path,
    method: 'POST'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `GET /API/item/${itemId}/thumbnailresource`
 *
 * @function thumbnail.listThumbnailResource
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function listThumbnailResource(_ref2) {
  var _ref2$itemId = _ref2.itemId,
      itemId = _ref2$itemId === void 0 ? isRequired() : _ref2$itemId,
      props = _objectWithoutProperties(_ref2, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/thumbnailresource");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `PUT /API/item/${itemId}/thumbnailresource`
 *
 * @function thumbnail.createThumbnailResource
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function createThumbnailResource(_ref3) {
  var _ref3$itemId = _ref3.itemId,
      itemId = _ref3$itemId === void 0 ? isRequired() : _ref3$itemId,
      props = _objectWithoutProperties(_ref3, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/thumbnailresource");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `GET /API/thumbnail/${resourceId}/${itemId}`
 *
 * @function thumbnail.listThumbnail
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.resourceId
 * @returns {Promise<Object>}
 */


function listThumbnail(_ref4) {
  var _ref4$itemId = _ref4.itemId,
      itemId = _ref4$itemId === void 0 ? isRequired() : _ref4$itemId,
      _ref4$resourceId = _ref4.resourceId,
      resourceId = _ref4$resourceId === void 0 ? isRequired() : _ref4$resourceId,
      props = _objectWithoutProperties(_ref4, ["itemId", "resourceId"]);

  var path = "/API/thumbnail/".concat(resourceId, "/").concat(itemId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `DELETE /API/thumbnail/${resourceId}/${itemId}`
 *
 * @function thumbnail.removeAllThumbnail
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.resourceId
 * @returns {Promise<Object>}
 */


function removeAllThumbnail(_ref5) {
  var _ref5$itemId = _ref5.itemId,
      itemId = _ref5$itemId === void 0 ? isRequired() : _ref5$itemId,
      _ref5$resourceId = _ref5.resourceId,
      resourceId = _ref5$resourceId === void 0 ? isRequired() : _ref5$resourceId,
      props = _objectWithoutProperties(_ref5, ["itemId", "resourceId"]);

  var path = "/API/thumbnail/".concat(resourceId, "/").concat(itemId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `PUT /API/thumbnail/${resourceId}/${itemId}/${time}`
 *
 * @function thumbnail.updateThumbnail
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.resourceId
 * @param {string} obj.time
 * @returns {Promise<Object>}
 */


function updateThumbnail(_ref6) {
  var _ref6$itemId = _ref6.itemId,
      itemId = _ref6$itemId === void 0 ? isRequired() : _ref6$itemId,
      _ref6$resourceId = _ref6.resourceId,
      resourceId = _ref6$resourceId === void 0 ? isRequired() : _ref6$resourceId,
      _ref6$time = _ref6.time,
      time = _ref6$time === void 0 ? isRequired() : _ref6$time,
      _ref6$headers = _ref6.headers,
      propHeaders = _ref6$headers === void 0 ? {} : _ref6$headers,
      file = _ref6.file,
      props = _objectWithoutProperties(_ref6, ["itemId", "resourceId", "time", "headers", "file"]);

  var path = "/API/thumbnail/".concat(resourceId, "/").concat(itemId, "/").concat(time);

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: file,
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `GET /API/thumbnail/${resourceId}/${itemId}/${time}`
 *
 * @function thumbnail.getThumbnail
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.resourceId
 * @param {string} obj.time
 * @returns {Promise<Object>}
 */


function getThumbnail(_ref7) {
  var _ref7$itemId = _ref7.itemId,
      itemId = _ref7$itemId === void 0 ? isRequired() : _ref7$itemId,
      _ref7$resourceId = _ref7.resourceId,
      resourceId = _ref7$resourceId === void 0 ? isRequired() : _ref7$resourceId,
      _ref7$time = _ref7.time,
      time = _ref7$time === void 0 ? isRequired() : _ref7$time,
      _ref7$headers = _ref7.headers,
      propsHeaders = _ref7$headers === void 0 ? {} : _ref7$headers,
      props = _objectWithoutProperties(_ref7, ["itemId", "resourceId", "time", "headers"]);

  var path = "/API/thumbnail/".concat(resourceId, "/").concat(itemId, "/").concat(time);

  var headers = _objectSpread2({
    accept: 'image/png, image/jpeg'
  }, propsHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `GET /API/thumbnail/${resourceId}/${itemId}/${time}/export`
 *
 * @function thumbnail.exportThumbnail
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.resourceId
 * @param {string} obj.time
 * @returns {Promise<Object>}
 */


function exportThumbnail(_ref8) {
  var _ref8$itemId = _ref8.itemId,
      itemId = _ref8$itemId === void 0 ? isRequired() : _ref8$itemId,
      _ref8$resourceId = _ref8.resourceId,
      resourceId = _ref8$resourceId === void 0 ? isRequired() : _ref8$resourceId,
      _ref8$time = _ref8.time,
      time = _ref8$time === void 0 ? isRequired() : _ref8$time,
      props = _objectWithoutProperties(_ref8, ["itemId", "resourceId", "time"]);

  var path = "/API/thumbnail/".concat(resourceId, "/").concat(itemId, "/").concat(time, "/export");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `DELETE /API/thumbnail/${resourceId}/${itemId}/${time}`
 *
 * @function thumbnail.removeThumbnail
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.resourceId
 * @param {string} obj.time
 * @returns {Promise<Object>}
 */


function removeThumbnail(_ref9) {
  var _ref9$itemId = _ref9.itemId,
      itemId = _ref9$itemId === void 0 ? isRequired() : _ref9$itemId,
      _ref9$resourceId = _ref9.resourceId,
      resourceId = _ref9$resourceId === void 0 ? isRequired() : _ref9$resourceId,
      _ref9$time = _ref9.time,
      time = _ref9$time === void 0 ? isRequired() : _ref9$time,
      props = _objectWithoutProperties(_ref9, ["itemId", "resourceId", "time"]);

  var path = "/API/thumbnail/".concat(resourceId, "/").concat(itemId, "/").concat(time);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `GET /API/item/${itemId}/posterresource`
 *
 * @function thumbnail.listPosterResource
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function listPosterResource(_ref10) {
  var _ref10$itemId = _ref10.itemId,
      itemId = _ref10$itemId === void 0 ? isRequired() : _ref10$itemId,
      props = _objectWithoutProperties(_ref10, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/posterresource");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `PUT /API/item/${itemId}/posterresource`
 *
 * @function thumbnail.createPosterResource
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function createPosterResource(_ref11) {
  var _ref11$itemId = _ref11.itemId,
      itemId = _ref11$itemId === void 0 ? isRequired() : _ref11$itemId,
      props = _objectWithoutProperties(_ref11, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/posterresource");
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `GET /API/poster/${resourceId}/${itemId}`
 *
 * @function thumbnail.listPoster
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.resourceId
 * @returns {Promise<Object>}
 */


function listPoster(_ref12) {
  var _ref12$itemId = _ref12.itemId,
      itemId = _ref12$itemId === void 0 ? isRequired() : _ref12$itemId,
      _ref12$resourceId = _ref12.resourceId,
      resourceId = _ref12$resourceId === void 0 ? isRequired() : _ref12$resourceId,
      props = _objectWithoutProperties(_ref12, ["itemId", "resourceId"]);

  var path = "/API/poster/".concat(resourceId, "/").concat(itemId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `DELETE /API/poster/${resourceId}/${itemId}`
 *
 * @function thumbnail.removeAllPoster
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.resourceId
 * @returns {Promise<Object>}
 */


function removeAllPoster(_ref13) {
  var _ref13$itemId = _ref13.itemId,
      itemId = _ref13$itemId === void 0 ? isRequired() : _ref13$itemId,
      _ref13$resourceId = _ref13.resourceId,
      resourceId = _ref13$resourceId === void 0 ? isRequired() : _ref13$resourceId,
      props = _objectWithoutProperties(_ref13, ["itemId", "resourceId"]);

  var path = "/API/poster/".concat(resourceId, "/").concat(itemId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `PUT /API/poster/${resourceId}/${itemId}/${time}`
 *
 * @function thumbnail.updatePoster
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.resourceId
 * @param {string} obj.time
 * @returns {Promise<Object>}
 */


function updatePoster(_ref14) {
  var _ref14$itemId = _ref14.itemId,
      itemId = _ref14$itemId === void 0 ? isRequired() : _ref14$itemId,
      _ref14$resourceId = _ref14.resourceId,
      resourceId = _ref14$resourceId === void 0 ? isRequired() : _ref14$resourceId,
      _ref14$time = _ref14.time,
      time = _ref14$time === void 0 ? isRequired() : _ref14$time,
      props = _objectWithoutProperties(_ref14, ["itemId", "resourceId", "time"]);

  var path = "/API/poster/".concat(resourceId, "/").concat(itemId, "/").concat(time);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `GET /API/poster/${resourceId}/${itemId}/${time}`
 *
 * @function thumbnail.getPoster
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.resourceId
 * @param {string} obj.time
 * @returns {Promise<Object>}
 */


function getPoster(_ref15) {
  var _ref15$itemId = _ref15.itemId,
      itemId = _ref15$itemId === void 0 ? isRequired() : _ref15$itemId,
      _ref15$resourceId = _ref15.resourceId,
      resourceId = _ref15$resourceId === void 0 ? isRequired() : _ref15$resourceId,
      _ref15$time = _ref15.time,
      time = _ref15$time === void 0 ? isRequired() : _ref15$time,
      _ref15$headers = _ref15.headers,
      propsHeaders = _ref15$headers === void 0 ? {} : _ref15$headers,
      props = _objectWithoutProperties(_ref15, ["itemId", "resourceId", "time", "headers"]);

  var path = "/API/poster/".concat(resourceId, "/").concat(itemId, "/").concat(time);

  var headers = _objectSpread2({
    accept: 'image/png, image/jpeg'
  }, propsHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `GET /API/poster/${resourceId}/${itemId}/${time}/export`
 *
 * @function thumbnail.exportPoster
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.resourceId
 * @param {string} obj.time
 * @returns {Promise<Object>}
 */


function exportPoster(_ref16) {
  var _ref16$itemId = _ref16.itemId,
      itemId = _ref16$itemId === void 0 ? isRequired() : _ref16$itemId,
      _ref16$resourceId = _ref16.resourceId,
      resourceId = _ref16$resourceId === void 0 ? isRequired() : _ref16$resourceId,
      _ref16$time = _ref16.time,
      time = _ref16$time === void 0 ? isRequired() : _ref16$time,
      props = _objectWithoutProperties(_ref16, ["itemId", "resourceId", "time"]);

  var path = "/API/poster/".concat(resourceId, "/").concat(itemId, "/").concat(time, "/export");
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/thumbnail.html APIdoc}
 *
 * `DELETE /API/poster/${resourceId}/${itemId}/${time}`
 *
 * @function thumbnail.removePoster
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.resourceId
 * @param {string} obj.time
 * @returns {Promise<Object>}
 */


function removePoster(_ref17) {
  var _ref17$itemId = _ref17.itemId,
      itemId = _ref17$itemId === void 0 ? isRequired() : _ref17$itemId,
      _ref17$resourceId = _ref17.resourceId,
      resourceId = _ref17$resourceId === void 0 ? isRequired() : _ref17$resourceId,
      _ref17$time = _ref17.time,
      time = _ref17$time === void 0 ? isRequired() : _ref17$time,
      props = _objectWithoutProperties(_ref17, ["itemId", "resourceId", "time"]);

  var path = "/API/poster/".concat(resourceId, "/").concat(itemId, "/").concat(time);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var thumbnail = {
  createThumbnail: createThumbnail$2,
  listThumbnailResource: listThumbnailResource,
  createThumbnailResource: createThumbnailResource,
  listThumbnail: listThumbnail,
  removeAllThumbnail: removeAllThumbnail,
  updateThumbnail: updateThumbnail,
  getThumbnail: getThumbnail,
  exportThumbnail: exportThumbnail,
  removeThumbnail: removeThumbnail,
  listPosterResource: listPosterResource,
  createPosterResource: createPosterResource,
  listPoster: listPoster,
  removeAllPoster: removeAllPoster,
  updatePoster: updatePoster,
  getPoster: getPoster,
  exportPoster: exportPoster,
  removePoster: removePoster
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/timeline.html APIdoc}
 *
 * `GET /API/item/${itemId}/timeline`
 *
 * @function timeline.getTimeline
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */

function getTimeline(_ref) {
  var _ref$itemId = _ref.itemId,
      itemId = _ref$itemId === void 0 ? isRequired() : _ref$itemId,
      _ref$headers = _ref.headers,
      propsHeaders = _ref$headers === void 0 ? {} : _ref$headers,
      props = _objectWithoutProperties(_ref, ["itemId", "headers"]);

  var path = "/API/item/".concat(itemId, "/timeline");

  var headers = _objectSpread2({
    accept: 'text/plain'
  }, propsHeaders);

  return vFetch(_objectSpread2({
    path: path,
    method: 'GET',
    headers: headers
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/timeline.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/timeline`
 *
 * @function timeline.removeTimeline
 * @param {Object} obj
 * @param {string} obj.itemId
 * @returns {Promise<Object>}
 */


function removeTimeline(_ref2) {
  var _ref2$itemId = _ref2.itemId,
      itemId = _ref2$itemId === void 0 ? isRequired() : _ref2$itemId,
      props = _objectWithoutProperties(_ref2, ["itemId"]);

  var path = "/API/item/".concat(itemId, "/timeline");
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/timeline.html APIdoc}
 *
 * `GET /API/item/${itemId}/timeline/${format}`
 *
 * @function timeline.getTimelineFormat
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.format
 * @returns {Promise<Object>}
 */


function getTimelineFormat(_ref3) {
  var _ref3$itemId = _ref3.itemId,
      itemId = _ref3$itemId === void 0 ? isRequired() : _ref3$itemId,
      _ref3$format = _ref3.format,
      format = _ref3$format === void 0 ? isRequired() : _ref3$format,
      props = _objectWithoutProperties(_ref3, ["itemId", "format"]);

  var path = "/API/item/".concat(itemId, "/timeline/").concat(format);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/timeline.html APIdoc}
 *
 * `PUT /API/item/${itemId}/timeline/${format}`
 *
 * @function timeline.updateTimelineFormat
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.format
 * @param {Object} obj.body
 * @returns {Promise<Object>}
 */


function updateTimelineFormat(_ref4) {
  var _ref4$itemId = _ref4.itemId,
      itemId = _ref4$itemId === void 0 ? isRequired() : _ref4$itemId,
      _ref4$format = _ref4.format,
      format = _ref4$format === void 0 ? isRequired() : _ref4$format,
      _ref4$body = _ref4.body,
      body = _ref4$body === void 0 ? isRequired() : _ref4$body,
      props = _objectWithoutProperties(_ref4, ["itemId", "format", "body"]);

  var path = "/API/item/".concat(itemId, "/timeline/").concat(format);
  return vFetch(_objectSpread2({
    path: path,
    method: 'PUT',
    body: body
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/item/timeline.html APIdoc}
 *
 * `DELETE /API/item/${itemId}/timeline/${format}`
 *
 * @function timeline.removeTimelineFormat
 * @param {Object} obj
 * @param {string} obj.itemId
 * @param {string} obj.format
 * @returns {Promise<Object>}
 */


function removeTimelineFormat(_ref5) {
  var _ref5$itemId = _ref5.itemId,
      itemId = _ref5$itemId === void 0 ? isRequired() : _ref5$itemId,
      _ref5$format = _ref5.format,
      format = _ref5$format === void 0 ? isRequired() : _ref5$format,
      props = _objectWithoutProperties(_ref5, ["itemId", "format"]);

  var path = "/API/item/".concat(itemId, "/timeline/").concat(format);
  return vFetch(_objectSpread2({
    path: path,
    method: 'DELETE'
  }, props));
}

var timeline = {
  getTimeline: getTimeline,
  removeTimeline: removeTimeline,
  getTimelineFormat: getTimelineFormat,
  updateTimelineFormat: updateTimelineFormat,
  removeTimelineFormat: removeTimelineFormat
};

/**
 * {@link https://apidoc.vidispine.com/latest/ref/vidinet.html APIdoc}
 *
 * `GET /API/cost/${costPath}`
 *
 * @function vidinet.createCostEstimate
 * @param {Object} obj
 * @param {string} obj.path
 * @returns {Promise<Object>}
 */

function createCostEstimate(_ref) {
  var _ref$path = _ref.path,
      costPath = _ref$path === void 0 ? isRequired() : _ref$path,
      props = _objectWithoutProperties(_ref, ["path"]);

  var path = "/API/cost/".concat(costPath);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link https://apidoc.vidispine.com/latest/ref/vidinet.html APIdoc}
 *
 * `GET /API/cost/estimate/${costEstimateId}`
 *
 * @function vidinet.getCostEstimate
 * @param {Object} obj
 * @param {string} obj.costEstimateId
 * @returns {Promise<Object>}
 */


function getCostEstimate(_ref2) {
  var _ref2$costEstimateId = _ref2.costEstimateId,
      costEstimateId = _ref2$costEstimateId === void 0 ? isRequired() : _ref2$costEstimateId,
      props = _objectWithoutProperties(_ref2, ["costEstimateId"]);

  var path = "/API/cost/estimate/".concat(costEstimateId);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}

var vidinet = {
  createCostEstimate: createCostEstimate,
  getCostEstimate: getCostEstimate
};

function toPercent(numerator, denominator) {
  if (numerator === 0 || denominator === 0) {
    return 0;
  }

  return Math.floor(numerator / denominator * 100);
}

var constants = Object.freeze({
  statuses: {
    transfering: 1,
    paused: 2,
    complete: 3,
    failed: 4,
    unstarted: 5,
    canceled: 6
  },
  events: {
    progress: 'progress',
    update: 'update',
    complete: 'complete',
    error: 'error',
    added: 'upload-added',
    removed: 'upload-removed',
    retry: 'retry',
    pausing: 'pausing',
    paused: 'paused',
    resuming: 'resuming',
    offline: 'offline',
    // <-- don't change this one, www spec match
    online: 'online' // <-- don't change this one, www spec match

  },
  defaults: {
    targetRate: 4000000,
    // 4mb sec,
    chunkSize: 10000000,
    // 10mb chunks
    minChunkSize: 8388608,
    // 8mb
    maxConcurrentTransfers: 1,
    maxConcurrentFileTransfers: 1,
    autoMaxConcurrentTransfers: false,
    autoResume: true,
    // ChunkedTransferManager -> automatically resume transfers on network
    api: {
      props: {}
    },
    minFileSize: 104857600 // 100MB

  }
});

var CUEvents = /*#__PURE__*/function () {
  // custom events model
  function CUEvents() {
    _classCallCheck(this, CUEvents);

    this.events = {};
  }

  _createClass(CUEvents, [{
    key: "on",
    value: function on(event, callback) {
      // add handlers
      var handlers = this.events[event] || [];
      handlers.push(callback);
      this.events[event] = handlers;
    }
  }, {
    key: "off",
    value: function off(event) {
      // remove handlers
      if (this.events[event]) {
        this.events[event] = [];
      }
    }
  }, {
    key: "trigger",
    value: function trigger(event, data) {
      // trigger event handler with data
      var handlers = this.events[event];
      if (!handlers || handlers.length < 1) return;
      handlers.forEach(function (handler) {
        handler(data);
      });
    }
  }]);

  return CUEvents;
}();

var Chunk = /*#__PURE__*/function () {
  function Chunk() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Chunk);

    var defaultProps = {
      blobSlice: null,
      fileSize: null,
      start: null,
      end: null,
      api: null // constants.defaults.api

    };
    Object.assign(this, defaultProps, props);
    this.state = {
      retries: 0,
      status: constants.statuses.unstarted,
      startTime: null,
      completeTime: null,
      response: null,
      bytesTransfered: null
    };
    this.events = new CUEvents();
  } // try to transfer


  _createClass(Chunk, [{
    key: "try",
    value: function _try() {
      var _this = this;

      this.state.status = constants.statuses.transfering;
      this.state.startTime = performance.now();
      return new Promise(function (resolve, reject) {
        var tryTransfer = function tryTransfer() {
          _this.transfer().then(function (response) {
            _this.state.response = response;

            _this.onComplete();

            resolve();
          })["catch"](function () {
            if (_this.state.retries > 3) {
              _this.state.status = constants.statuses.failed;
              reject(new Error("Chunk ".concat(_this.start, "-").concat(_this.end, " failed")));
            } else if (_this.state.status !== constants.statuses.paused) {
              _this.state.retries += 1; // wait a sec and call again

              _this.tryTimeout = setTimeout(function () {
                tryTransfer(); // retry
              }, 1000);
            } else {
              clearTimeout(_this.tryTimeout);
            }
          });
        };

        tryTransfer(); // try again and eventually reject if nothing improves
      });
    }
  }, {
    key: "transfer",
    value: function transfer() {
      var _this2 = this;

      var options = {
        file: this.blobSlice,
        onUploadProgress: function onUploadProgress(progressEvent) {
          if (_this2.state.status !== constants.statuses.complete) {
            _this2.state.bytesTransfered = progressEvent.loaded;

            _this2.events.trigger(constants.events.progress, _this2.state);
          }
        }
      };

      if (this.end - this.start !== this.fileSize) {
        // only add headers if chunk !== whole file
        options.headers = {
          index: this.start,
          size: this.fileSize
        };
      }

      options = Object.assign({}, options, this.api.props);
      this.transferPromise = this.api.method(options); // TODO implement axios onUploadProgress

      this.state.status = constants.statuses.transfering;
      return this.transferPromise;
    }
  }, {
    key: "onComplete",
    value: function onComplete() {
      this.state.status = constants.statuses.complete;
      this.state.bytesTransfered = this.end - this.start;
      this.state.completeTime = performance.now();
      this.events.trigger(constants.events.complete);
    }
  }, {
    key: "pause",
    value: function pause() {
      if (this.state.status !== constants.statuses.complete) {
        this.state.status = constants.statuses.paused;
      }
    }
  }, {
    key: "cancel",
    value: function cancel() {
      if (this.state.status !== constants.statuses.complete) {
        this.state.status = constants.statuses.canceled; // reject promise
        // this.transferPromise && this.transferPromise.reject(new Error(`Chunk ${this.start}-${this.end} canceled.`))
      }
    }
  }, {
    key: "transferRate",
    get: function get() {
      if (this.state.bytesTransfered) {
        var secondsTaken = (this.state.completeTime - this.state.startTime) / 1000;
        var bytesPerSecond = this.state.bytesTransfered / secondsTaken;
        return bytesPerSecond;
      }

      return 0;
    }
  }]);

  return Chunk;
}();

var ChunkedUpload = /*#__PURE__*/function () {
  function ChunkedUpload(param, options) {
    _classCallCheck(this, ChunkedUpload);

    this.events = new CUEvents(); // can be blob or transfer if for download (?)

    if (!options.api.method) throw new Error('No api method specified');
    this.defaultOptions = _objectSpread2(_objectSpread2({}, constants.defaults), {}, {
      targetRate: 4000000,
      // bytes / second
      chunkSize: constants.defaults.minChunkSize,
      // the 8mb
      autoMaxConcurrentTransfers: false,
      api: {
        props: Object.assign({}, constants.defaults.api.props, {
          queryParams: {
            transferId: uuidv4()
          }
        }, options.api.props)
      }
    });
    this.options = Object.assign({}, this.defaultOptions, options);
    this.state = {
      blob: null,
      chunks: [],
      transferPromises: [],
      targetRate: this.options.targetRate,
      rate: 0,
      // bytes / sec transfer rate updated on progress
      autoMaxConcurrentTransfers: this.options.autoMaxConcurrentTransfers,
      // this one is self adjusting, start off small...
      maxConcurrentTransfers: this.options.maxConcurrentTransfers,
      mime: '',
      status: constants.statuses.unstarted,
      transferId: options.api.props.queryParams.transferId,
      lastStats: {}
    };

    if (_typeof(param) === 'object') {
      // upload scenario, expect a blob
      this.state.blob = param;
      this.state.mime = param.type;
      this.addChunksFromBlob(param);
    } else {
      console.error(new Error("Expected a File or a Blob object, but got ".concat(_typeof(param))));
    }
  }

  _createClass(ChunkedUpload, [{
    key: "upload",
    value: function upload() {
      var _this3 = this;

      // used to upload in chunks, will look for anything that passes as uploadable
      var status = this.state.status;

      if (status === constants.statuses.complete) {
        return;
      } // can do uploads now


      if (status === constants.statuses.unstarted || status === constants.statuses.transfering) {
        this.state.transferPromises = []; // reset transfer promises, a queue of sorts

        /* eslint-disable-next-line max-len */

        var isOKToAddMoreTransfers = function isOKToAddMoreTransfers() {
          var firstChunkStatus = _this3.state.chunks[0].state.status;
          var isOK = _this3.state.transferPromises.length < _this3.state.maxConcurrentTransfers && (firstChunkStatus !== constants.statuses.transfering || firstChunkStatus === constants.statuses.unstarted);
          return isOK;
        }; // check if not too many transfers exist in transferPromises arr


        if (isOKToAddMoreTransfers()) {
          // look for unfinished business
          this.state.chunks.forEach(function (chunk) {
            /* eslint-disable-next-line max-len */
            var isChunkAvailable = chunk.state.status !== constants.statuses.complete && chunk.state.status !== constants.statuses.transfering;

            if (isChunkAvailable && isOKToAddMoreTransfers()) {
              _this3.state.status = constants.statuses.transfering; // truggers upload for chunk

              _this3.state.transferPromises.push(chunk["try"]());
            } // TODO - forEach looks pretty but is not the fastest, consider if perf is optimal

          }); // reinvoke this method for next chunk batch

          if (this.state.transferPromises.length > 0) {
            // there is more work to do
            Promise.all(this.state.transferPromises).then(function () {
              _this3.upload();
            })["catch"](function (error) {
              console.log('Failed on this upload() cycle, check connectivity and try to resume :(');
              _this3.state.status = constants.statuses.failed;

              _this3.events.trigger(constants.events.failed, {
                error: error,
                transfer: _this3
              });

              _this3.options.onFail && _this3.options.onFail(error);
            });
          }
        }
      }
    } // get all byte ranges for splitting in chunks

  }, {
    key: "getByteRangesForChunks",
    value: function getByteRangesForChunks(blob) {
      var chunkSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.chunkSize;
      var byteRanges = []; // output

      var minChunkSize = this.options.minChunkSize;
      var targetChunkSize = chunkSize >= minChunkSize ? chunkSize : minChunkSize;
      var finalChunkSize = targetChunkSize; // determine the number of chunks

      var times = Math.floor(blob.size / finalChunkSize); // if last chunk happens to bee too small, reduce the denominator

      if (!(blob.size - (blob.size - blob.size / times) >= minChunkSize)) {
        // TODO - ^^ this conditional could be more readable with variables
        times -= 1;
        finalChunkSize = Math.floor(blob.size / times); // adjust final chunk size
      }

      if (times < 2 || blob.size < this.options.minFileSize) {
        // single chunk it is
        byteRanges.push({
          start: 0,
          end: blob.size
        });
      } else {
        for (var i = 0; i <= times; i++) {
          var start = finalChunkSize * i;
          var end = finalChunkSize * i + finalChunkSize; // if the remainig bytes to be transfered is less than minChunkSize

          var remainder = blob.size - finalChunkSize * i;

          if (remainder <= minChunkSize) {
            end = blob.size;
          }

          var range = {
            start: start,
            end: end
          };
          byteRanges.push(range);

          if (end === blob.size) {
            break; // all byteranges till the end are covered, no more chunks
          }
        }
      }

      return byteRanges;
    }
  }, {
    key: "addChunksFromBlob",
    value: function addChunksFromBlob(blob) {
      var _this4 = this;

      var byteranges = this.getByteRangesForChunks(blob);
      byteranges.forEach(function (byterange) {
        var chunk = new Chunk({
          start: byterange.start,
          end: byterange.end,
          blobSlice: blob.slice(byterange.start, byterange.end),
          fileSize: blob.size,
          api: _this4.options.api
        });
        chunk.events.on(constants.events.progress, function () {
          _this4.onProgress();
        });
        chunk.events.on(constants.events.complete, function () {
          _this4.onProgress();
        });

        _this4.state.chunks.push(chunk);
      });
    }
  }, {
    key: "retry",
    value: function retry() {
      if (this.state.status === constants.statuses.failed) {
        this.resume();
        this.events.trigger(constants.events.retry);
      }
    }
  }, {
    key: "resume",
    value: function resume() {
      this.state.status = constants.statuses.transfering;
      this.upload();
    }
  }, {
    key: "pause",
    value: function pause() {
      var _this5 = this;

      this.state.status = constants.statuses.paused; // run a loop that pauses all Chunk instances (cancel network request / promise?)

      this.state.chunks.length > 0 && this.state.chunks.forEach(function (chunkInstance) {
        chunkInstance.pause();
      }); // wait for the rest of chunks to complete

      var pausedPromise = Promise.all(this.state.transferPromises);
      this.events.trigger(constants.events.pausing);
      pausedPromise.then(function () {
        _this5.events.trigger(constants.events.paused);
      });
      return Promise.all(this.state.transferPromises);
    }
  }, {
    key: "cancel",
    value: function cancel() {
      var _this6 = this;

      // TODO - check what to destruct
      this.state.status = constants.statuses.canceled;
      this.state.chunks.length > 0 && this.state.chunks.forEach(function (chunkInstance) {
        chunkInstance.cancel();
      });

      this.upload = function () {};

      var transfersFinishedPromise = Promise.all(this.state.transferPromises);
      transfersFinishedPromise.then(function () {
        _this6.events.trigger(constants.events.removed, _this6);
      }); // remaining transfers finishing, this can take a long time

      return transfersFinishedPromise;
    } // TODO - remove this, seems to be too flaky

  }, {
    key: "autoAdjustMaxConcurrentTransfers",
    value: function autoAdjustMaxConcurrentTransfers(stats) {
      // adjust max concurrent transfers based on speed (too fast - more concurrency and vice versa)
      if (this.state.autoMaxConcurrentTransfers && this.state.status !== constants.statuses.complete) {
        var speedRatio = stats.avgTransferRate / this.state.targetRate;

        if (speedRatio > 1.2) {
          // going reasonably fast, increase concurrency (this will slow things down)
          this.state.maxConcurrentTransfers += 1;
        } else if (speedRatio < 0.3) {
          // suboptimal speeds, reduce to 1 chunk at a time
          this.state.maxConcurrentTransfers = 1;
        } else {
          // reduce to no less than default (clamp)
          var newConcurrencyValue = this.options.maxConcurrentTransfers - 1;
          this.state.maxConcurrentTransfers = Math.max(this.options.maxConcurrentTransfers, Math.min(newConcurrencyValue, constants.defaults.maxConcurrentTransfers));
        }
      }
    }
  }, {
    key: "onProgress",
    value: function onProgress() {
      var _this7 = this;

      try {
        // prevent promise rejection if any of this throws
        var stats = this.getStats();

        if (stats !== this.state.lastStats) {
          this.state.lastStats = stats;
          debounce(function () {
            _this7.autoAdjustMaxConcurrentTransfers(stats);
          }, 1000)();

          if (this.state.status !== constants.statuses.complete) {
            if (stats.totalChunks === stats.completedChunks) {
              this.onComplete();
            } else {
              this.events.trigger(constants.events.progress, stats);
              this.options.onProgress && this.options.onProgress(stats);
            }
          }
        }
      } catch (err) {
        console.error(err);
      } // run callback that passes exampleParams

    }
  }, {
    key: "onComplete",
    value: function onComplete() {
      var stats = this.getStats();
      this.state.lastStats = stats;
      this.state.status = constants.statuses.complete; // success callback

      this.events.trigger(constants.events.complete);
      this.options.onComplete && this.options.onComplete(this.finalResponse);
    }
  }, {
    key: "getStats",
    value: function getStats() {
      var totalChunks = this.state.chunks.length;
      var completedChunks = this.state.chunks.filter(function (chunk) {
        return chunk.state.status === constants.statuses.complete;
      });
      var incompleteChunks = this.state.chunks.filter(function (chunk) {
        return chunk.state.status === constants.statuses.transfering;
      });
      var numberOfCompletedChunks = completedChunks.length; // determine average speed of completed transfers (bytes / second)

      var transferRateSum = 0;
      var transferedBytes = 0;
      completedChunks.forEach(function (chunk) {
        transferRateSum += chunk.transferRate;
        transferedBytes += chunk.blobSlice.size;
      });
      incompleteChunks.forEach(function (chunk) {
        transferedBytes += chunk.state.bytesTransfered;
      });
      var avgSpeed = transferRateSum / numberOfCompletedChunks;
      var stats = {
        totalChunks: totalChunks,
        completedChunks: numberOfCompletedChunks,
        totalBytes: this.state.blob.size,
        transferedBytes: transferedBytes,
        avgTransferRate: avgSpeed,
        concurrentTransfers: this.state.maxConcurrentTransfers
      }; // keep in state for other computed state values

      this.state.rate = stats.avgTransferRate;
      return stats;
    } // if a setter is used, stop the automatic adjustment

  }, {
    key: "concurrentTransfers",
    set: function set(_int) {
      this.state.autoMaxConcurrentTransfers = false;
      this.state.maxConcurrentTransfers = _int;
    }
  }, {
    key: "rate",
    set: function set(_int2) {
      // sets target rate
      this.state.targetRate = _int2;
    },
    get: function get() {
      // gets actual rate
      return this.state.rate;
    }
  }, {
    key: "finalResponse",
    get: function get() {
      var times = this.state.chunks.length - 1;
      var response = false;

      for (var i = times; i >= 0; i--) {
        var chunk = this.state.chunks[i];

        if (_typeof(chunk.state.response.data) === 'object') {
          return chunk.state.response;
        }
      }

      return response;
    }
  }, {
    key: "transferId",
    get: function get() {
      return this.state.transferId;
    }
  }]);

  return ChunkedUpload;
}();
var ChunkedTransferManager = /*#__PURE__*/function () {
  function ChunkedTransferManager(options) {
    _classCallCheck(this, ChunkedTransferManager);

    this.initialState = Object.freeze({
      status: constants.statuses.unstarted,
      transfers: {},
      bytesDone: 0,
      bytesTotal: 0,
      lastStats: {
        // helps evaluate progress change
        bytesDone: 0,
        bytesTotal: 0
      }
    });
    this.state = Object.assign({}, this.initialState);
    this.options = _objectSpread2({
      maxConcurrentFileTransfers: constants.defaults.maxConcurrentFileTransfers,
      autoResume: constants.defaults.autoResume
    }, options);
    this.events = new CUEvents();
    this.bindNetworkEvents();
  }

  _createClass(ChunkedTransferManager, [{
    key: "bindNetworkEvents",
    value: function bindNetworkEvents() {
      var _this8 = this;

      if (!(typeof window === 'undefined')) {
        // check if on browser
        window.addEventListener(constants.events.online, function () {
          _this8.events.trigger(constants.events.online, _this8.state);

          if (_this8.options.autoResume) {
            setTimeout(function () {
              _this8.retry();
            }, 1500);
          }
        });
        window.addEventListener(constants.events.offline, function () {
          _this8.events.trigger(constants.events.offline, _this8.state);
        });
      }
    }
  }, {
    key: "addChunkedUpload",
    value: function addChunkedUpload(cuInstance) {
      var _this9 = this;

      // for chunked uploads
      if (cuInstance.transferId !== null) {
        this.state.transfers[cuInstance.transferId] = cuInstance; // bind to ChunkedUpload events

        cuInstance.events.on(constants.events.progress, function () {
          // a chunk is finished
          _this9.onProgress();
        });
        cuInstance.events.on(constants.events.complete, function () {
          // a transfer is finished
          _this9.upload(); // start the next transfer


          _this9.onProgress();
        });
        cuInstance.events.on(constants.events.failed, function (_ref) {
          var error = _ref.error,
              transfer = _ref.transfer;

          _this9.onFail(error, transfer);
        });
        cuInstance.events.on(constants.events.retry, function () {
          _this9.events.trigger(constants.events.retry, _this9.state);
        });
        cuInstance.events.on(constants.events.paused, function () {
          if (_this9.paused) {
            _this9.events.trigger(constants.events.paused);
          }
        });
        this.updateStats();
        this.events.trigger(constants.events.added, this.state);
        this.events.trigger(constants.events.update, this.state);
      }
    } // param can be file or a reference to transfer, or a transferId
    // eslint-disable-next-line class-methods-use-this

  }, {
    key: "removeChunkedUpload",
    value: function removeChunkedUpload(param) {
      var _this10 = this;

      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var removeTransfer = function removeTransfer(transfer) {
        if (transfer) {
          // avoid complete transfers
          if (transfer.state.status === constants.statuses.complete && !force) {
            console.error("Can't cancel complete transfers, pass true as a second argument in .removeChunkedUpload() to force removal.");
            return false;
          } // find transfer and remove from state


          Object.keys(_this10.state.transfers).forEach(function (transferKey) {
            if (transfer === _this10.state.transfers[transferKey]) {
              delete _this10.state.transfers[transferKey];
            }
          }); // trigger something that will cause filelist update

          _this10.events.trigger(constants.events.removed); // stop transfering chunks


          transfer.cancel();
          return true;
        } // if no transfer found


        console.error('Could not find a matching transfer to cancel.');
        return false;
      };

      switch (param.constructor.name) {
        case ChunkedUpload.name:
          removeTransfer(param);
          break;

        case 'File':
          // find the transfer by matching file (.exists)
          removeTransfer(this.exists(param));
          break;
      }
    }
  }, {
    key: "onProgress",
    value: function onProgress() {
      this.updateStats();

      if (this.hasCompleted) {
        this.onComplete();
      } else if (this.state.bytesDone !== this.state.lastStats.bytesDone) {
        this.state.status = constants.statuses.transfering;
        this.events.trigger(constants.events.progress, this.state);
      }
    }
  }, {
    key: "onComplete",
    value: function onComplete() {
      this.state.status = constants.statuses.complete;
      this.events.trigger(constants.events.complete, this.state);
    }
  }, {
    key: "exists",
    value: function exists(file) {
      // for checking if a file already assigned to a transfer
      var transfer = false;

      for (var index = 0; index < this.transfers.length; index++) {
        var transferToCheck = this.transfers[index];

        if (transferToCheck.state.blob.name === file.name && transferToCheck.state.blob.lastModified === file.lastModified && transferToCheck.state.blob.size && file.size) {
          transfer = transferToCheck;
          return transfer;
        }
      }

      return transfer;
    } // eslint-disable-next-line class-methods-use-this

  }, {
    key: "isTransferAvailable",
    value: function isTransferAvailable(transfer) {
      // to avoid operating on completed / in progress transfers
      var isAvailable = transfer.state.status !== constants.statuses.complete && transfer.state.status !== constants.statuses.transfering || transfer.state.status === constants.statuses.unstarted;
      return isAvailable;
    }
  }, {
    key: "pause",
    value: function pause() {
      var _this11 = this;

      // will resolve if not paused
      var resultingPromise = Promise.resolve(true);

      if (!this.paused) {
        this.events.trigger(constants.events.pausing, this.state);
        var pausePromises = [];
        this.transfers.forEach(function (transfer) {
          pausePromises.push(transfer.pause());
        });
        resultingPromise = Promise.all(pausePromises);
        resultingPromise.then(function () {
          _this11.events.trigger(constants.events.paused, _this11.state);
        });
      }

      return resultingPromise;
    }
  }, {
    key: "resume",
    value: function resume() {
      var _this12 = this;

      // good for resuming transfers after network failure or after pause
      this.events.trigger(constants.events.update, this.state);
      this.transfers.forEach(function (transfer) {
        if (_this12.isTransferAvailable(transfer) && transfer.state.status !== constants.statuses.unstarted) {
          transfer.resume();
        }
      });
    }
  }, {
    key: "retry",
    value: function retry() {
      if (this.status === constants.statuses.failed) {
        this.resume();
        this.events.trigger(constants.events.retry, this.state);
      }
    }
  }, {
    key: "upload",
    value: function upload() {
      var _this13 = this;

      // transfers can also be added in an already uploading state
      var ongoingTransfers = 0;
      this.transfers.forEach(function (transfer) {
        if (_this13.isTransferAvailable(transfer)) {
          if (ongoingTransfers < _this13.options.maxConcurrentFileTransfers) {
            _this13.events.trigger(constants.events.update, _this13.state);

            transfer.upload();
            ongoingTransfers++;
          }
        } else if (transfer.state.status !== constants.statuses.complete) {
          ongoingTransfers++;
        }
      });

      if (ongoingTransfers > 0) {
        this.status = constants.statuses.transfering;
      } // trigger a simultanious upload if the number of transfers is still less than allowed


      if (ongoingTransfers < this.options.maxConcurrentFileTransfers && this.transfers.length < ongoingTransfers) {
        this.upload();
      }
    }
  }, {
    key: "onFail",
    value: function onFail(error, transfer) {
      this.status = constants.statuses.failed;
      this.events.trigger(constants.events.error, {
        error: error,
        transfer: transfer,
        file: transfer.state.blob
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      var _this14 = this;

      // user canceled scenario
      this.transfers.forEach(function (transfer) {
        if (transfer.constructor.name === ChunkedUpload.name) {
          _this14.removeChunkedUpload(transfer, true);
        }
      });
      this.state = Object.assign({}, this.initialState);
      this.events.trigger(constants.statuses.update, this.state);
      this.events.trigger(constants.statuses.complete, this.state);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.reset();
    }
  }, {
    key: "updateStats",
    value: function updateStats() {
      // register last stats
      this.state.lastStats.bytesDone = this.state.bytesDone;
      this.state.lastStats.bytesTotal = this.state.bytesTotal; // apply new stats

      this.state.bytesTotal = this.bytesTotal;
      this.state.bytesDone = this.bytesDone;
    } // these are convenient for displaying data

  }, {
    key: "hasCompleted",
    get: function get() {
      var completedAllTransfers = true;
      this.transfers.forEach(function (transfer) {
        if (transfer.state.status !== constants.statuses.complete) {
          completedAllTransfers = false;
        }
      }); // const uploadedAllBytes = (this.state.bytesTotal > 0 && (this.state.bytesTotal === this.state.bytesDone))

      return completedAllTransfers;
    }
  }, {
    key: "transfers",
    get: function get() {
      return Object.values(this.state.transfers) || [];
    }
  }, {
    key: "status",
    get: function get() {
      return this.state.status;
    },
    set: function set(value) {
      this.events.trigger(constants.statuses.update, this.state);
      this.state.status = value;
    }
  }, {
    key: "bytesTotal",
    get: function get() {
      var bytesTotal = 0;
      this.transfers.forEach(function (transfer) {
        bytesTotal += transfer.state.blob.size;
      });
      return bytesTotal;
    }
  }, {
    key: "bytesDone",
    get: function get() {
      var bytesDone = 0;
      this.transfers.forEach(function (transfer) {
        bytesDone += transfer.getStats().transferedBytes;
      });
      return bytesDone;
    }
  }, {
    key: "percentDone",
    get: function get() {
      return toPercent(this.state.bytesDone, this.state.bytesTotal);
    }
  }, {
    key: "fileList",
    get: function get() {
      // produces a upload file list with status report
      var fileListArr = [];
      this.transfers.forEach(function (transfer) {
        var transferStats = transfer.getStats();
        var totalChunks = transferStats.totalChunks,
            completedChunks = transferStats.completedChunks;
        var fileInfo = {
          name: transfer.state.blob.name,
          bytesDone: transferStats.transferedBytes,
          bytesTotal: transfer.state.blob.size,
          totalChunks: totalChunks,
          completedChunks: completedChunks,
          transfer: transfer
        };
        fileListArr.push(fileInfo);
      });
      return fileListArr;
    }
  }, {
    key: "isUploading",
    get: function get() {
      return this.state.status === constants.statuses.transfering;
    }
  }, {
    key: "paused",
    get: function get() {
      var allPaused = true;
      this.transfers.forEach(function (transfer) {
        if (transfer.state.status !== constants.statuses.paused) {
          allPaused = false;
        }
      });
      return allPaused;
    }
  }]);

  return ChunkedTransferManager;
}();
ChunkedTransferManager.constants = constants;
ChunkedUpload.constants = constants;

/**
 * {@link n/a}
 *
 * `GET /API/analyze-preset`
 *
 * @function analyzepreset.listAnalyzePreset
 * @param {Object} obj
 * @returns {Promise<Object>}
 */

function listAnalyzePreset() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      props = _extends({}, _ref);

  var path = '/API/analyze-preset';
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}
/**
 * {@link n/a}
 *
 * `GET /API/analyze-preset/${presetName}`
 *
 * @function analyzepreset.getAnalyzePreset
 * @param {Object} obj
 * @returns {Promise<Object>}
 */


function getAnalyzePreset() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$preset = _ref2.preset,
      preset = _ref2$preset === void 0 ? isRequired() : _ref2$preset,
      props = _objectWithoutProperties(_ref2, ["preset"]);

  var path = "/API/analyze-preset/".concat(preset);
  return vFetch(_objectSpread2({
    path: path,
    method: 'GET'
  }, props));
}

var analyzepreset = {
  listAnalyzePreset: listAnalyzePreset,
  getAnalyzePreset: getAnalyzePreset
};

export { ChunkedTransferManager, ChunkedUpload, access, analyzepreset, auditlog, autoimport, autoprojection, bulkymetadata, collection, component, configuration, conform, debug, deletionlock, documentmetadata, errorlog, exportlocation, exporttemplate, externalid, fieldgroup, fileApi as file, globalmetadata, group, importsettings, item, javascript, job, library, license, metadataApi as metadata, metadatadataset, metadatafield, metadataLockApi as metadatalock, metadatamigration, metadataschema, noauth, notificationApi as notification, project, projection, quota, reindex, resource, scheduledrequest, search, selftest, sequence, service, shape, shapetag, stitch, storage, storagegroup, storagerule, subtitle, taskdefinition, taskgroup, thumbnail, timeline, transfer, uploadlicense, user, utils, version, vidinet, _import as vsimport, vxa };
//# sourceMappingURL=index.es.js.map
